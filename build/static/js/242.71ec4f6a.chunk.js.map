{"version":3,"file":"static/js/242.71ec4f6a.chunk.js","mappings":"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","sources":["components/ConfirmDeleteItem.tsx","pages/apps/Business/Business.tsx","components/ErrorBoundary.tsx","pages/apps/MenuManagement/ManageMenu.tsx","pages/apps/MenuManagement/ToggleSwitch.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/Table.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface ConfirmDeleteModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n    title?: string;\r\n    message?: string;\r\n}\r\n\r\nconst ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({\r\n    show,\r\n    onClose,\r\n    onConfirm,\r\n    title = 'Confirm Deletion',\r\n    message = 'Are you sure you want to delete this item?',\r\n}) => {\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={onConfirm}>\r\n                    Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmDeleteModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, Table, Button, Form, InputGroup, Row, Col } from 'react-bootstrap';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {\r\n    resetBusiness,\r\n    businessList,\r\n    updateBusinessList,\r\n    deleteBusinessList,\r\n    businessUpdateIsActive,\r\n} from '../../../redux/business/actions';\r\nimport { useRedux } from '../../../hooks';\r\nimport { RootState } from '../../../redux/store';\r\nimport { setAuthorization, getUserFromLocalStorage } from '../../../helpers/api/apiCore';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport ToggleSwitch from '../MenuManagement/ToggleSwitch';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    outlet_type: string;\r\n    is_primary_outlet: boolean;\r\n    outlet_address: string;\r\n    outlet_gst_no: string;\r\n    currency: string;\r\n    language_id: string;\r\n    url: string;\r\n}\r\n\r\ninterface Business {\r\n    business_id: string;\r\n    business_name: string;\r\n    business_contact: string;\r\n    business_logo: string;\r\n    business_address: string;\r\n    cuisine: string;\r\n    gst_no: string;\r\n    outlets: Outlet[];\r\n    business_users: any[];\r\n    url: string;\r\n    is_active: boolean;\r\n    isEditing?: boolean;\r\n}\r\n\r\ninterface UpdateBusiness {\r\n    business_id: string;\r\n    business_name: string;\r\n    business_contact: string;\r\n    business_logo: string;\r\n    business_address: string;\r\n    cuisine: string;\r\n    gst_no: string;\r\n}\r\n\r\nconst BusinessDetails = () => {\r\n    const { id } = useParams<{ id: string }>();\r\n    const [selectedBusiness, setSelectedBusiness] = useState<Business | null>(null);\r\n    const [selectedBusinessId, setSelectedBusinessId] = useState<string | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const { dispatch, appSelector } = useRedux();\r\n    const businesses = appSelector((state: RootState) => state.business.businesses);\r\n    console.log('yes BUSINESSES : ', businesses);\r\n    const navigate = useNavigate();\r\n    const [editedBusinessLogoFile, setEditedBusinessLogoFile] = useState<File | null>(null); // State for storing the selected logo file\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n\r\n    const [isEditing, setIsEditing] = useState<boolean>(false); // Separate state for editing\r\n    const [editedBusiness, setEditedBusiness] = useState<Business | null>(null);\r\n    const [businessDelete, setBusinessDelete] = useState<string | null>(null);\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            const business = businesses.find((business: Business) => business.business_id === id);\r\n            if (business) {\r\n                setSelectedBusiness(business);\r\n                setEditedBusiness({ ...business }); // Initialize editedBusiness with current business\r\n            } else {\r\n                setMessage('Business not found');\r\n            }\r\n        }\r\n    }, [id, businesses]);\r\n\r\n    useEffect(() => {\r\n        dispatch(resetBusiness());\r\n        dispatch(businessList());\r\n        const user = getUserFromLocalStorage();\r\n        if (user && user.token) {\r\n            setAuthorization(user.token);\r\n            dispatch(businessList());\r\n        }\r\n    }, [dispatch]);\r\n\r\n    const handleLogoClick = (business_id: string) => {\r\n        setSelectedBusinessId(business_id === selectedBusinessId ? null : business_id);\r\n    };\r\n\r\n    const handleBusinessNameClick = (business_id: string) => {\r\n        navigate(`/apps/business-details`, { state: { business_id: business_id } });\r\n    };\r\n\r\n    const handleRegisterBusiness = () => {\r\n        navigate('/apps/business-register');\r\n    };\r\n\r\n    const handleEditClick = (business_id: string) => {\r\n        const businessToUpdate = businesses.find((business: Business) => business.business_id === business_id);\r\n        if (!businessToUpdate) {\r\n            setMessage('Business not found.');\r\n            return;\r\n        }\r\n        console.log('Edit button clicked for business:', businessToUpdate);\r\n        setIsEditing(true); // Start editing mode\r\n        setEditedBusiness({ ...businessToUpdate }); // Copy business details to editedBusiness for modification\r\n        setSelectedBusiness({ ...businessToUpdate });\r\n    };\r\n    // useEffect(() => {\r\n    //     if (isEditing && selectedBusiness) {\r\n    //         console.log('Selected Business in edit mode:', selectedBusiness);\r\n    //         console.log('Edited Business:', editedBusiness);\r\n    //     }\r\n    // }, [isEditing, selectedBusiness, editedBusiness]);\r\n\r\n    const handleBusinessUpdateTogggle = (business_id: string, is_active: boolean) => {\r\n        console.log('handleBusinessUpdateTogggle called with:', business_id, is_active);\r\n\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [business_id]: is_active,\r\n        }));\r\n\r\n        dispatch(businessUpdateIsActive(business_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(businessList());\r\n        }, 500);\r\n    };\r\n\r\n    const handleSaveChanges = () => {\r\n        if (editedBusiness) {\r\n            let payload: FormData | UpdateBusiness;\r\n\r\n            if (editedBusinessLogoFile) {\r\n                // Create FormData when there is a new logo file\r\n                const formData = new FormData();\r\n                formData.append('business_id', editedBusiness.business_id);\r\n                formData.append('business_name', editedBusiness.business_name);\r\n                formData.append('business_contact', editedBusiness.business_contact);\r\n                formData.append('business_address', editedBusiness.business_address);\r\n                formData.append('gst_no', editedBusiness.gst_no);\r\n                formData.append('cuisine', editedBusiness.cuisine);\r\n                formData.append('business_logo', editedBusinessLogoFile); // Attach the new logo file\r\n\r\n                // Dispatch the action with FormData payload\r\n                dispatch(updateBusinessList(formData));\r\n\r\n                payload = formData;\r\n            } else {\r\n                // If no logo file, send plain object\r\n                payload = {\r\n                    business_id: editedBusiness.business_id,\r\n                    business_name: editedBusiness.business_name,\r\n                    business_contact: editedBusiness.business_contact,\r\n                    business_logo: editedBusiness.business_logo ?? '',\r\n                    business_address: editedBusiness.business_address,\r\n                    gst_no: editedBusiness.gst_no,\r\n                    cuisine: editedBusiness.cuisine,\r\n                };\r\n            }\r\n\r\n            console.log('Dispatching update with payload:', payload);\r\n\r\n            // Dispatch the appropriate payload\r\n            dispatch(updateBusinessList(payload));\r\n\r\n            setIsEditing(false); // Exit editing mode\r\n            setMessage('Business details updated successfully.');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(businessList());\r\n            }, 500);\r\n            setSelectedBusiness(editedBusiness); // Update selected business\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     console.log('Selected Business:', selectedBusiness); // Check the selected business when state changes\r\n    //     console.log('Edited Business:', editedBusiness); // Check if the edited business is set\r\n    // }, [selectedBusiness, editedBusiness]);\r\n\r\n    const handleCancelEdit = () => {\r\n        setIsEditing(false); // Cancel editing mode\r\n        setEditedBusiness(null); // Reset the edited business\r\n    };\r\n\r\n    const handleDeleteClick = (business_id: string) => {\r\n        const confirmDelete = window.confirm('Are you sure you want to delete this business?');\r\n        if (confirmDelete) {\r\n            dispatch(deleteBusinessList(business_id));\r\n            setMessage('Business has been deleted successfully!');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(businessList());\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDeleteBusiness = (business_id: string) => {\r\n        setBusinessDelete(business_id);\r\n        setShowDeleteModal(true);\r\n    };\r\n\r\n    const confirmDelete = () => {\r\n        if (businessDelete) {\r\n            dispatch(deleteBusinessList(businessDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(businessList());\r\n        }, 500);\r\n        setShowDeleteModal(false);\r\n    };\r\n\r\n    const handleLogoChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0];\r\n        if (file && editedBusiness) {\r\n            const logoPreviewUrl = URL.createObjectURL(file);\r\n            setEditedBusiness((prev) => (prev ? { ...prev, business_logo: logoPreviewUrl } : null));\r\n            setEditedBusinessLogoFile(file);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                    <h4 className=\"header-title\">Business List</h4>\r\n                    <Button variant=\"primary\" onClick={handleRegisterBusiness}>\r\n                        Register New Business\r\n                    </Button>\r\n                </div>\r\n                {message && <div className=\"alert alert-success\">{message}</div>}\r\n                <div className=\"table-responsive\">\r\n                    <Table className=\"mb-0\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Logo</th>\r\n                                <th>Name</th>\r\n                                <th>Contact</th>\r\n                                <th>Address</th>\r\n                                <th>Is Active?</th>\r\n                                <th>GST Number</th>\r\n                                <th>Cuisine</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {businesses.length > 0 ? (\r\n                                businesses.map((business: Business) => (\r\n                                    <React.Fragment key={business.business_id}>\r\n                                        <tr>\r\n                                            <td>\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n                                                        onChange={handleLogoChange} // This triggers the logo change\r\n                                                    />\r\n                                                ) : (\r\n                                                    <img\r\n                                                        src={business.business_logo ?? '/default-logo.png'} // Fallback to default if no logo\r\n                                                        alt={`${business.business_name} Logo`}\r\n                                                        width=\"50\"\r\n                                                        style={{ cursor: 'pointer' }}\r\n                                                        onClick={() => handleLogoClick(business.business_id)}\r\n                                                    />\r\n                                                )}\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {/* Business Name */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusiness?.business_name}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusiness((prev) =>\r\n                                                                prev ? { ...prev, business_name: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    <button\r\n                                                        className=\"btn btn-link p-0\"\r\n                                                        onClick={() => handleBusinessNameClick(business.business_id)}>\r\n                                                        {business.business_name}\r\n                                                    </button>\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {/* Business Contact */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusiness?.business_contact}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusiness((prev) =>\r\n                                                                prev\r\n                                                                    ? { ...prev, business_contact: e.target.value }\r\n                                                                    : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business.business_contact\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {/* Business Address */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusiness?.business_address}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusiness((prev) =>\r\n                                                                prev\r\n                                                                    ? { ...prev, business_address: e.target.value }\r\n                                                                    : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business.business_address\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                <ToggleSwitch\r\n                                                    checked={toggleStates[business.business_id] ?? business.is_active}\r\n                                                    onChange={(checked) =>\r\n                                                        handleBusinessUpdateTogggle(business.business_id, checked)\r\n                                                    }\r\n                                                />\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                {/* GST Number */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusiness?.gst_no}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusiness((prev) =>\r\n                                                                prev ? { ...prev, gst_no: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business.gst_no\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {/* Cuisine */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusiness?.cuisine}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusiness((prev) =>\r\n                                                                prev ? { ...prev, cuisine: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business.cuisine\r\n                                                )}\r\n                                            </td>\r\n\r\n                                            <td className=\"d-flex align-items-center\">\r\n                                                {/* Edit/Delete Buttons */}\r\n                                                {isEditing && selectedBusiness?.business_id === business.business_id ? (\r\n                                                    <>\r\n                                                        <Button\r\n                                                            variant=\"success\"\r\n                                                            style={{ padding: '5px 10px', fontSize: '14px' }}\r\n                                                            onClick={handleSaveChanges}>\r\n                                                            Save\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            variant=\"secondary\"\r\n                                                            style={{\r\n                                                                padding: '5px 10px',\r\n                                                                fontSize: '14px',\r\n                                                                marginLeft: '5px',\r\n                                                            }}\r\n                                                            onClick={handleCancelEdit}>\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <td>\r\n                                                            <FaRegEdit\r\n                                                                size={20}\r\n                                                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                                                onClick={() => handleEditClick(business.business_id)}\r\n                                                            />\r\n                                                        </td>\r\n                                                        <td>\r\n                                                            <FaTrash\r\n                                                                size={20}\r\n                                                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                                                onClick={() =>\r\n                                                                    handleDeleteBusiness(business.business_id)\r\n                                                                }\r\n                                                            />\r\n                                                            <ConfirmDeleteModal\r\n                                                                show={showDeleteModal}\r\n                                                                onClose={() => setShowDeleteModal(false)}\r\n                                                                onConfirm={confirmDelete}\r\n                                                                title=\"Delete this Business\"\r\n                                                                message=\"Are you sure you want to delete this Business? This action cannot be undone.\"\r\n                                                            />\r\n                                                        </td>\r\n                                                    </>\r\n                                                )}\r\n                                            </td>\r\n                                        </tr>\r\n\r\n                                        {selectedBusinessId === business.business_id && (\r\n                                            <tr>\r\n                                                <td colSpan={7}>\r\n                                                    <Table bordered size=\"sm\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th>Outlet Name</th>\r\n                                                                <th>Type</th>\r\n                                                                <th>Address</th>\r\n                                                                <th>GST Number</th>\r\n                                                                <th>Currency</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n                                                        <tbody>\r\n                                                            {business.outlets.map((outlet: Outlet) => (\r\n                                                                <tr key={outlet.outlet_id}>\r\n                                                                    <td>{outlet.outlet_name}</td>\r\n                                                                    <td>{outlet.outlet_type}</td>\r\n                                                                    <td>{outlet.outlet_address}</td>\r\n                                                                    <td>{outlet.outlet_gst_no}</td>\r\n                                                                    <td>{outlet.currency}</td>\r\n                                                                </tr>\r\n                                                            ))}\r\n                                                        </tbody>\r\n                                                    </Table>\r\n                                                </td>\r\n                                            </tr>\r\n                                        )}\r\n                                    </React.Fragment>\r\n                                ))\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan={7}>No businesses found.</td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default BusinessDetails;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError() {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.error('Error caught by Error Boundary:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport ErrorBoundary from '../../../components/ErrorBoundary';\r\nimport { categoryItemList, categoryUpdateIsActive } from '../../../redux/menuManagementCategory/actions';\r\nimport { deleteItem, updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { deleteCategory } from '../../../redux/menuManagementCategory/actions';\r\nimport RegisterCategory from './RegisterCategory';\r\nimport { useRedux } from '../../../hooks';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { RootState } from '../../../redux/store';\r\nimport './ManageMenu.css';\r\nimport EditCategory from './EditCategory';\r\nimport ToggleSwitch from './ToggleSwitch';\r\nimport { itemUpdateIsActive } from '../../../redux/menuManagementItem/actions';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface CategoryItem {\r\n    business_id: string;\r\n    category_id: string;\r\n    is_active: boolean;\r\n    category_name: string;\r\n    category_names: { [key: string]: string };\r\n    logo_image: string;\r\n    items: Array<{\r\n        category_id: string;\r\n        item_id: string;\r\n        item_name: string;\r\n        price: number;\r\n        is_active: boolean;\r\n        dietary: string;\r\n        logo_image: string;\r\n        available_order_type: string[];\r\n    }>;\r\n}\r\n\r\nconst ManageMenu: React.FC = () => {\r\n    // const { business_id } = useParams<{ business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const [showCategoryRegistrationModal, setShowCategoryRegistrationModal] = useState(false);\r\n    // const [showCategoryUpdateModal, setShowCategoryUpdateModal] = useState(false);\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [editItem, setEditItem] = useState<CategoryItem['items'][number] | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\r\n    const [categoryDelete, setCategoryDelete] = useState<string | null>(null);\r\n    const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);\r\n    const [itemDelete, setItemDelete] = useState<string | null>(null);\r\n    const [showItemDeleteModal, setShowItemDeleteModal] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            dispatch(categoryItemList(business_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    useEffect(() => {\r\n        if (categories.length > 0 && !selectedCategoryId) {\r\n            setSelectedCategoryId(categories[0].category_id);\r\n        }\r\n    }, [categories, selectedCategoryId]);\r\n    useEffect(() => {\r\n        if (categories.length > 0) {\r\n            const initialToggleStates: { [key: string]: boolean } = {};\r\n            categories.forEach((category: CategoryItem) => {\r\n                initialToggleStates[category.category_id] = category.is_active;\r\n                // Update toggle states for each item inside the category\r\n                category.items.forEach((item) => {\r\n                    initialToggleStates[item.item_id] = item.is_active;\r\n                });\r\n            });\r\n            setToggleStates(initialToggleStates);\r\n        }\r\n    }, [categories]); // Ensures sync when categories are updated\r\n\r\n    const handleCategoryClick = (category_id: string) => {\r\n        console.log('Category Clicked:', category_id); // Debugging log\r\n        // setSelectedCategoryId(category_id === selectedCategoryId ? null : category_id);\r\n        setSelectedCategoryId(category_id);\r\n    };\r\n\r\n    const handleCategoryToggle = (category_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [category_id]: is_active,\r\n        }));\r\n        dispatch(categoryUpdateIsActive(category_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n        // setSelectedBusinessUser(editedBusinessUser);\r\n    };\r\n\r\n    const handleItemToggle = (item_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [item_id]: is_active,\r\n        }));\r\n\r\n        // Dispatch action to update the item status\r\n        dispatch(itemUpdateIsActive(item_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n    };\r\n    const handleRecipe = (business_id: string, item_id: string) => {\r\n        navigate('/apps/recipe', {\r\n            state: { business_id: business_id, item_id: item_id },\r\n        });\r\n    };\r\n\r\n    // const handleCategoryRegister = () => {\r\n    //     console.log('Category Register Clicked');\r\n\r\n    //     if (!showCategoryRegistrationModal) {\r\n    //         setShowCategoryRegistrationModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCategoryUpdate = () => {\r\n    //     console.log('Category Update Clicked');\r\n\r\n    //     if (!showCategoryUpdateModal) {\r\n    //         setShowCategoryUpdateModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCloseCategoryRegistrationModal = () => {\r\n    //     console.log('Category Register Closed');\r\n    //     setShowCategoryRegistrationModal(false);\r\n    // };\r\n\r\n    // const handleCloseCategoryUpdateModal = () => {\r\n    //     console.log('Category Update Clicked');\r\n    //     setShowCategoryUpdateModal(false);\r\n    // };\r\n\r\n    const handleDeleteItem = (item_id: string) => {\r\n        const confirmDeleteitem = window.confirm('Are you sure you want to delete this Item?');\r\n        if (confirmDeleteitem) {\r\n            dispatch(deleteItem(item_id));\r\n            setMessage('Item deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n    const handleItemDelete = (item_id: string) => {\r\n        setItemDelete(item_id);\r\n        setShowItemDeleteModal(true);\r\n    };\r\n\r\n    const confirmItemDelete = () => {\r\n        if (itemDelete) {\r\n            dispatch(deleteItem(itemDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowItemDeleteModal(false);\r\n    };\r\n\r\n    const handleDeleteCategory = (category_id: string) => {\r\n        const confirmDeletecategory = window.confirm('Are you sure you want to delete this Category?');\r\n        if (confirmDeletecategory) {\r\n            dispatch(deleteCategory(category_id));\r\n            setMessage('Category deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    const handleCategoryDelete = (category_id: string) => {\r\n        setCategoryDelete(category_id);\r\n        setShowCategoryDeleteModal(true);\r\n    };\r\n\r\n    const confirmCategoryDelete = () => {\r\n        if (categoryDelete) {\r\n            dispatch(deleteCategory(categoryDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowCategoryDeleteModal(false);\r\n    };\r\n\r\n    const handleEditItem = (item_id: string, category_id: string) => {\r\n        navigate(`/apps/edit-item`, {\r\n            state: { business_id: business_id, category_id: selectedCategoryId, item_id: item_id },\r\n        });\r\n        console.log('category_id: ', category_id);\r\n        console.log('selectedCategoryId: ', selectedCategoryId);\r\n        console.log('setSelectedCategoryId: ', setSelectedCategoryId);\r\n    };\r\n\r\n    // const handleSaveChanges = () => {\r\n    //     if (editItem) {\r\n    //         // Create a FormData object\r\n    //         const formData = new FormData();\r\n\r\n    //         // Append each field of the editItem to the FormData\r\n    //         formData.append('item_id', editItem.item_id);\r\n    //         formData.append('item_name', editItem.item_name);\r\n    //         formData.append('price', editItem.price.toString()); // Ensure the price is a string\r\n    //         formData.append('dietary', editItem.dietary);\r\n    //         formData.append('available_order_type', JSON.stringify(editItem.available_order_type)); // Serialize array\r\n\r\n    //         console.log('Dispatching update with FormData payload', formData);\r\n\r\n    //         // Dispatch the updateItem action with the FormData\r\n    //         dispatch(updateItem(formData));\r\n    //     } else {\r\n    //         setMessage('No item to save.');\r\n    //     }\r\n    // };\r\n\r\n    const filteredItems = categories\r\n        .filter((category: CategoryItem) => !selectedCategoryId || category.category_id === selectedCategoryId)\r\n        .flatMap((category: CategoryItem) => category.items);\r\n\r\n    console.log('Filtered Items:', filteredItems); // Debugging log\r\n\r\n    return (\r\n        <div className=\"manage-menu-container\">\r\n            <div className=\"header\">\r\n                <h2>Item List</h2>\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"add-item-button\"\r\n                        onClick={() =>\r\n                            navigate(`/apps/item-register`, {\r\n                                state: { business_id: business_id, category_id: selectedCategoryId },\r\n                            })\r\n                        }>\r\n                        + Add Item\r\n                    </button>\r\n                    {/* <button className=\"add-item-button\" onClick={handleRecipe}>\r\n                        Recipe\r\n                    </button> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"category-tabs\">\r\n                {categories.map((category: CategoryItem) => (\r\n                    <div\r\n                        className={`category-tab ${selectedCategoryId === category.category_id ? 'active' : ''}`}\r\n                        key={category.category_id}\r\n                        onClick={() => handleCategoryClick(category.category_id)}>\r\n                        <img src={category.logo_image} alt={category.category_name} />\r\n                        <p>{category.category_name}</p>\r\n                        <div>\r\n                            <div onClick={(e) => e.stopPropagation()}>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[category.category_id] || false}\r\n                                    onChange={(checked) => handleCategoryToggle(category.category_id, checked)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <FaRegEdit\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                onClick={() =>\r\n                                    navigate(`/apps/category-update`, {\r\n                                        state: {\r\n                                            business_id: business_id,\r\n                                            category_id: selectedCategoryId,\r\n                                        },\r\n                                    })\r\n                                }\r\n                            />\r\n                            {/* {showCategoryUpdateModal && (\r\n                                <EditCategory show={showCategoryUpdateModal} onClose={handleCloseCategoryUpdateModal} />\r\n                            )} */}\r\n\r\n                            <FaTrash\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                onClick={() => handleCategoryDelete(category.category_id)}\r\n                            />\r\n                            <ConfirmDeleteModal\r\n                                show={showCategoryDeleteModal}\r\n                                onClose={() => setShowCategoryDeleteModal(false)}\r\n                                onConfirm={confirmCategoryDelete}\r\n                                title=\"Delete this Category\"\r\n                                message=\"Are you sure you want to delete this Category? This action cannot be undone.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"add-category-button\"\r\n                    onClick={() => navigate(`/apps/category-register`, { state: { business_id: business_id } })}>\r\n                    + Add Category\r\n                </button>\r\n                {/* {showCategoryRegistrationModal && (\r\n                    <RegisterCategory\r\n                        show={showCategoryRegistrationModal}\r\n                        onClose={handleCloseCategoryRegistrationModal}\r\n                    /> */}\r\n            </div>\r\n\r\n            <div className=\"item-list\">\r\n                {filteredItems.length > 0 ? (\r\n                    filteredItems.map((item: CategoryItem['items'][number]) => {\r\n                        return (\r\n                            <div className=\"item-card\" key={item.item_id}>\r\n                                <img src={item.logo_image} alt={item.item_name} className=\"item-image\" />\r\n                                <div className=\"item-details\">\r\n                                    <h3>{item.item_name}</h3>\r\n                                    <p>Price: {item.price}</p>\r\n                                    <p>Total Amount: 0</p>\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    <button\r\n                                        className=\"add-recipe-button\"\r\n                                        onClick={() => handleRecipe(business_id, item.item_id)}>\r\n                                        + Recipe\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button\r\n                                        className=\"edit-button\"\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}>\r\n                                        Edit\r\n                                    </button> */}\r\n                                    <FaRegEdit\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button className=\"delete-button\" onClick={() => handleDeleteItem(item.item_id)}>\r\n                                        Delete\r\n                                    </button> */}\r\n                                    <FaTrash\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', color: 'red' }}\r\n                                        onClick={() => handleItemDelete(item.item_id)}\r\n                                    />\r\n                                    <ConfirmDeleteModal\r\n                                        show={showItemDeleteModal}\r\n                                        onClose={() => setShowItemDeleteModal(false)}\r\n                                        onConfirm={confirmItemDelete}\r\n                                        title=\"Delete this Item\"\r\n                                        message=\"Are you sure you want to delete this Item? This action cannot be undone.\"\r\n                                    />\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[item.item_id] || false}\r\n                                    onChange={(checked) => handleItemToggle(item.item_id, checked)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <p className=\"no-items-message\">No items available</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ManageMenuWithBoundary: React.FC = () => (\r\n    <ErrorBoundary>\r\n        <ManageMenu />\r\n    </ErrorBoundary>\r\n);\r\n\r\nexport default ManageMenuWithBoundary;\r\n\r\n{\r\n    /* <Row>\r\n<Col md={6}>\r\n    <Form.Group>\r\n        <Form.Label>Item Order Type</Form.Label>\r\n        <div>\r\n            {['delivery', 'pick_up', 'dine_in', 'online'].map((type) => (\r\n                <Form.Check\r\n                    key={type}\r\n                    type=\"checkbox\"\r\n                    label={type.replace('_', ' ').toUpperCase()}\r\n                    name=\"available_order_type\"\r\n                    value={type}\r\n                    checked={formData.available_order_type.includes(type)}\r\n                    onChange={(e) => {\r\n                        const { value, checked } = e.target;\r\n                        const updatedOrderTypes = checked\r\n                            ? [...formData.available_order_type, value]\r\n                            : formData.available_order_type.filter((t) => t !== value);\r\n\r\n                        handleChange({\r\n                            target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                        } as any);\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n        {errors.available_order_type && (\r\n            <small className=\"text-danger\">{errors.available_order_type}</small>\r\n        )}\r\n    </Form.Group>\r\n</Col>\r\n</Row> */\r\n}\r\n","import React from 'react';\r\nimport './ManageMenu'; // Add styles for the switch\r\n\r\ninterface ToggleSwitchProps {\r\n    checked: boolean;\r\n    onChange?: (checked: boolean) => void; // ✅ Make onChange optional\r\n    label?: string;\r\n}\r\n\r\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange, label }) => {\r\n    return (\r\n        <label className=\"toggle-switch\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                onChange={(e) => onChange?.(e.target.checked)} // ✅ Use optional chaining\r\n            />\r\n            <span className=\"slider\"></span>\r\n            {label && <span className=\"switch-label\">{label}</span>}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["show","onClose","onConfirm","title","message","onHide","centered","closeButton","variant","onClick","id","useParams","useState","selectedBusiness","setSelectedBusiness","selectedBusinessId","setSelectedBusinessId","setMessage","useRedux","dispatch","businesses","appSelector","state","business","console","log","navigate","useNavigate","editedBusinessLogoFile","setEditedBusinessLogoFile","toggleStates","setToggleStates","isEditing","setIsEditing","editedBusiness","setEditedBusiness","businessDelete","setBusinessDelete","showDeleteModal","setShowDeleteModal","useEffect","find","business_id","resetBusiness","businessList","user","getUserFromLocalStorage","token","setAuthorization","handleSaveChanges","payload","formData","FormData","append","business_name","business_contact","business_address","gst_no","cuisine","updateBusinessList","business_logo","setTimeout","handleCancelEdit","confirmDelete","deleteBusinessList","handleLogoChange","event","file","target","files","logoPreviewUrl","URL","createObjectURL","prev","className","length","map","type","accept","onChange","src","alt","width","style","cursor","value","e","checked","is_active","businessUpdateIsActive","padding","fontSize","marginLeft","size","marginRight","businessToUpdate","handleEditClick","color","colSpan","bordered","outlets","outlet","outlet_name","outlet_type","outlet_address","outlet_gst_no","currency","outlet_id","ErrorBoundary","hasError","error","errorInfo","this","props","children","React","ManageMenu","useLocation","categories","category","selectedCategoryId","setSelectedCategoryId","categoryDelete","setCategoryDelete","showCategoryDeleteModal","setShowCategoryDeleteModal","itemDelete","setItemDelete","showItemDeleteModal","setShowItemDeleteModal","categoryItemList","category_id","initialToggleStates","forEach","items","item","item_id","confirmItemDelete","deleteItem","confirmCategoryDelete","deleteCategory","filteredItems","filter","flatMap","logo_image","category_name","stopPropagation","ToggleSwitch","categoryUpdateIsActive","item_name","price","handleRecipe","itemUpdateIsActive","label","toFnRef","ref","current","refA","refB","useMemo","a","b","mergeRefs","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","CardImg","bsPrefix","as","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","Table","striped","borderless","hover","responsive","decoratedBsPrefix","classes","table","responsiveClass","rHyphen","pascalCase","str","toUpperCase","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix","p"],"sourceRoot":""}