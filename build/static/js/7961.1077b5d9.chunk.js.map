{"version":3,"file":"static/js/7961.1077b5d9.chunk.js","mappings":"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","sources":["components/ConfirmDeleteItem.tsx","pages/apps/Business/RegisterNewOutlet.tsx","pages/apps/Business/RegisterNewBusinessUser.tsx","pages/apps/MenuManagement/RegisterNewIngredient.tsx","pages/apps/Business/BusinessDetails.tsx","components/ErrorBoundary.tsx","pages/apps/MenuManagement/ManageMenu.tsx","pages/apps/MenuManagement/ToggleSwitch.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/Table.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface ConfirmDeleteModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n    title?: string;\r\n    message?: string;\r\n}\r\n\r\nconst ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({\r\n    show,\r\n    onClose,\r\n    onConfirm,\r\n    title = 'Confirm Deletion',\r\n    message = 'Are you sure you want to delete this item?',\r\n}) => {\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={onConfirm}>\r\n                    Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmDeleteModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { businessList, languageList } from '../../../redux/business/actions';\r\nimport { RootState } from '../../../redux/store';\r\nimport { registerOutlet } from '../../../redux/business/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\ninterface RegisterOutletModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    businessId: string;\r\n}\r\n\r\nconst RegisterOutletModal: React.FC<RegisterOutletModalProps> = ({ show, onClose, businessId }) => {\r\n    const [outletName, setOutletName] = useState('');\r\n    const [outletType, setOutletType] = useState('');\r\n    const [outletAddress, setOutletAddress] = useState('');\r\n    const [gstNo, setGstNo] = useState('');\r\n    const [languageId, setLanguageId] = useState('');\r\n    const [currency, setCurrency] = useState('INR');\r\n    const [isPrimaryOutlet, setIsPrimaryOutlet] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [outletNameError, setOutletNameError] = useState('');\r\n    const [outletTypeError, setOutletTypeError] = useState('');\r\n    const [outletAddressError, setOutletAddressError] = useState('');\r\n    const [outletGstNumberError, setOutletGstNumberError] = useState('');\r\n    const [languageIdError, setLanguageIdError] = useState('');\r\n    const [currencyError, setCurrencyError] = useState('');\r\n\r\n    const { languages } = useSelector((state: RootState) => state.language) as {\r\n        languages: { id: string; name: string }[];\r\n        loading: boolean;\r\n        error: string | null;\r\n    };\r\n\r\n    const outletTypes = ['coco', 'cofo', 'fofo', 'foco'];\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!languages.length) {\r\n            dispatch(languageList());\r\n            console.log('Language list:', languages);\r\n        }\r\n    }, [dispatch, languages]);\r\n\r\n    useEffect(() => {\r\n        if (!show) {\r\n            // Reset form fields when modal closes\r\n            setOutletName('');\r\n            setOutletType('');\r\n            setOutletAddress('');\r\n            setGstNo('');\r\n            setLanguageId('');\r\n            setCurrency('INR');\r\n            setIsPrimaryOutlet(false);\r\n            setErrorMessage('');\r\n            setOutletNameError('');\r\n            setOutletTypeError('');\r\n            setOutletAddressError('');\r\n            setOutletGstNumberError('');\r\n            setLanguageIdError('');\r\n            setCurrencyError('');\r\n        }\r\n    }, [show]);\r\n\r\n    const handleSubmit = () => {\r\n        let valid = true;\r\n\r\n        if (!outletName.trim()) {\r\n            setOutletNameError('Outlet Name is Required');\r\n            valid = false;\r\n        } else {\r\n            setOutletNameError('');\r\n        }\r\n        if (!outletType.trim()) {\r\n            setOutletTypeError('Outlet Type is Required');\r\n            valid = false;\r\n        } else {\r\n            setOutletTypeError('');\r\n        }\r\n        if (!outletAddress.trim()) {\r\n            setOutletAddressError('Outlet Address is Required');\r\n            valid = false;\r\n        } else {\r\n            setOutletAddressError('');\r\n        }\r\n        if (!gstNo.trim()) {\r\n            setOutletGstNumberError('Outlet GstNumber is Required');\r\n            valid = false;\r\n        } else {\r\n            setOutletGstNumberError('');\r\n        }\r\n        if (!languageId.trim()) {\r\n            setLanguageIdError('LanguageId is Required');\r\n            valid = false;\r\n        } else {\r\n            setLanguageIdError('');\r\n        }\r\n        if (!currency.trim()) {\r\n            setCurrencyError('Currency is Required');\r\n            valid = false;\r\n        } else {\r\n            setCurrencyError('');\r\n        }\r\n        if (!languageId) {\r\n            setErrorMessage('Please select a language.');\r\n            return;\r\n        }\r\n\r\n        const newOutlet = {\r\n            outlet_name: outletName,\r\n            outlet_type: outletType,\r\n            is_primary_outlet: isPrimaryOutlet,\r\n            gst_no: gstNo,\r\n            language_id: languageId,\r\n            business_id: businessId,\r\n            outlet_address: outletAddress,\r\n            currency: currency,\r\n        };\r\n\r\n        dispatch(registerOutlet(newOutlet));\r\n        setTimeout(() => {\r\n            dispatch(businessList()); // ✅ Refresh list AFTER store updates\r\n\r\n            setOutletName('');\r\n            setOutletType('');\r\n            setOutletAddress('');\r\n            setGstNo('');\r\n            setLanguageId('');\r\n            setCurrency('INR');\r\n            setIsPrimaryOutlet(false);\r\n            setErrorMessage('');\r\n\r\n            onClose(); // ✅ Close modal AFTER update\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Register New Outlet</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"outletName\" className=\"mb-3\">\r\n                        <Form.Label>Outlet Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={outletName}\r\n                            onChange={(e) => setOutletName(e.target.value)}\r\n                            isInvalid={!!outletNameError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{outletNameError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"outletType\" className=\"mb-3\">\r\n                        <Form.Label>Outlet Type</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            name=\"outlet_type\"\r\n                            value={outletType}\r\n                            onChange={(e) => setOutletType(e.target.value)}\r\n                            required\r\n                            isInvalid={!!outletTypeError}>\r\n                            <option value=\"\">Select Outlet Type</option>\r\n                            {outletTypes.map((type, idx) => (\r\n                                <option key={idx} value={type}>\r\n                                    {type}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">{outletTypeError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"outletAddress\" className=\"mb-3\">\r\n                        <Form.Label>Address</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={outletAddress}\r\n                            onChange={(e) => setOutletAddress(e.target.value)}\r\n                            isInvalid={!!outletAddressError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{outletAddressError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"gstNo\" className=\"mb-3\">\r\n                        <Form.Label>GST Number</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={gstNo}\r\n                            onChange={(e) => setGstNo(e.target.value)}\r\n                            isInvalid={!!outletGstNumberError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{outletGstNumberError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"currency\" className=\"mb-3\">\r\n                        <Form.Label>Currency</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={currency}\r\n                            onChange={(e) => setCurrency(e.target.value)}\r\n                            isInvalid={!!currencyError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{currencyError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"isPrimaryOutlet\" className=\"mb-3\">\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Set as primary outlet\"\r\n                            checked={isPrimaryOutlet}\r\n                            onChange={() => setIsPrimaryOutlet(!isPrimaryOutlet)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"languageId\" className=\"mb-3\">\r\n                        <Form.Label>Language</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            value={languageId}\r\n                            onChange={(e) => setLanguageId(e.target.value)}\r\n                            required\r\n                            isInvalid={!!languageIdError}>\r\n                            <option value=\"\">Select Language</option>\r\n                            {languages.map((language) => (\r\n                                <option key={language.id} value={language.id}>\r\n                                    {language.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">{languageIdError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleSubmit}>\r\n                    Register Outlet\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RegisterOutletModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { businessList, languageList } from '../../../redux/business/actions';\r\nimport { registerBusinessUser } from '../../../redux/business/actions';\r\n\r\ninterface RegisterBusinessUserModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    businessId: string;\r\n}\r\n\r\nconst RegisterBusinessUserModal: React.FC<RegisterBusinessUserModalProps> = ({ show, onClose, businessId }) => {\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [firstNameError, setFirstNameError] = useState('');\r\n    const [lastNameError, setLastNameError] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [phoneNumberError, setPhoneNumberError] = useState('');\r\n    const [addressError, setAddressError] = useState('');\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!show) {\r\n            // Reset form fields when modal closes\r\n            setFirstName('');\r\n            setLastName('');\r\n            setEmail('');\r\n            setPhoneNumber('');\r\n            setAddress('');\r\n            setFirstNameError('');\r\n            setLastNameError('');\r\n            setEmailError('');\r\n            setPhoneNumberError('');\r\n            setAddressError('');\r\n        }\r\n    }, [show]);\r\n\r\n    const handleSubmit = () => {\r\n        let valid = true;\r\n\r\n        if (!firstName.trim()) {\r\n            setFirstNameError('First Name is Required');\r\n            valid = false;\r\n        } else {\r\n            setFirstNameError('');\r\n        }\r\n        if (!lastName.trim()) {\r\n            setLastNameError('Last Name is Required');\r\n            valid = false;\r\n        } else {\r\n            setLastNameError('');\r\n        }\r\n        if (!email.trim()) {\r\n            setEmailError('Email is Required');\r\n            valid = false;\r\n        } else {\r\n            setEmailError('');\r\n        }\r\n        if (!phoneNumber.trim()) {\r\n            setPhoneNumberError('Phone Number is Required');\r\n            valid = false;\r\n        } else {\r\n            setPhoneNumberError('');\r\n        }\r\n        const newBusinessUser = {\r\n            business_id: businessId,\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n            phone_number: phoneNumber,\r\n            email: email,\r\n            address: address,\r\n        };\r\n\r\n        dispatch(registerBusinessUser(newBusinessUser));\r\n        setTimeout(() => {\r\n            dispatch(businessList());\r\n\r\n            setFirstName('');\r\n            setLastName('');\r\n            setEmail('');\r\n            setPhoneNumber('');\r\n            setAddress('');\r\n\r\n            onClose();\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Register New Business Owner</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"firstName\">\r\n                        <Form.Label>First Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={firstName}\r\n                            onChange={(e) => setFirstName(e.target.value)}\r\n                            isInvalid={!!firstNameError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{firstNameError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"lastName\">\r\n                        <Form.Label>Last Name</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={lastName}\r\n                            onChange={(e) => setLastName(e.target.value)}\r\n                            isInvalid={!!lastNameError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{lastNameError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"email\">\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control type=\"text\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"phoneNumber\">\r\n                        <Form.Label>Phone Number</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={phoneNumber}\r\n                            onChange={(e) => setPhoneNumber(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"address\">\r\n                        <Form.Label>Address</Form.Label>\r\n                        <Form.Control type=\"text\" value={address} onChange={(e) => setAddress(e.target.value)} />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Close\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleSubmit}>\r\n                    Register Business Owner\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RegisterBusinessUserModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { recipeIngredientAdd } from '../../../redux/actions';\r\n\r\ninterface RegisterIngredientModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    business_id: string;\r\n}\r\n\r\nconst RegisterIngredientModal: React.FC<RegisterIngredientModalProps> = ({ show, onClose, business_id }) => {\r\n    const [ingredient_name, setName] = useState('');\r\n    const [unit, setUnit] = useState('');\r\n    const [ingredientNameError, setIngredientNameError] = useState('');\r\n    const [unitError, setUnitError] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!show) {\r\n            setName('');\r\n            setUnit('');\r\n            setIngredientNameError('');\r\n            setUnitError('');\r\n        }\r\n    }, [show]);\r\n\r\n    const handleSubmit = () => {\r\n        let valid = true;\r\n\r\n        if (!ingredient_name.trim()) {\r\n            setIngredientNameError('Ingredient name is required.');\r\n            valid = false;\r\n        } else {\r\n            setIngredientNameError('');\r\n        }\r\n\r\n        if (!unit.trim()) {\r\n            setUnitError('Unit is required.');\r\n            valid = false;\r\n        } else {\r\n            setUnitError('');\r\n        }\r\n\r\n        if (!valid) return;\r\n\r\n        dispatch(recipeIngredientAdd(ingredient_name, business_id, unit));\r\n\r\n        setName('');\r\n        setUnit('');\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Register New Ingredient</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"ingredientName\" className=\"mb-3\">\r\n                        <Form.Label>\r\n                            Ingredient Name <span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"e.g., Tomato, Cheese\"\r\n                            value={ingredient_name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                            isInvalid={!!ingredientNameError}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">{ingredientNameError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"ingredientUnit\" className=\"mb-3\">\r\n                        <Form.Label>\r\n                            Unit <span className=\"text-danger\">*</span>\r\n                        </Form.Label>\r\n                        <Form.Select value={unit} onChange={(e) => setUnit(e.target.value)} isInvalid={!!unitError}>\r\n                            <option value=\"\">-- Select Unit --</option>\r\n                            <option value=\"gm\">gm</option>\r\n                            <option value=\"kg\">kg</option>\r\n                            <option value=\"ml\">ml</option>\r\n                            <option value=\"l\">l</option>\r\n                        </Form.Select>\r\n                        <Form.Control.Feedback type=\"invalid\">{unitError}</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"outline-secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleSubmit}>\r\n                    Add Ingredient\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RegisterIngredientModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, Table, Form, Button } from 'react-bootstrap';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport {\r\n    resetBusiness,\r\n    businessList,\r\n    deleteOutlet,\r\n    updateOutlet,\r\n    deleteBusinessUser,\r\n    updateBusinessUser,\r\n    outletUpdateIsActive,\r\n    businessDetails,\r\n} from '../../../redux/business/actions';\r\nimport { useRedux } from '../../../hooks';\r\nimport { RootState } from '../../../redux/store';\r\nimport { languageList } from '../../../redux/business/actions';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport RegisterOutletModal from './RegisterNewOutlet';\r\nimport RegisterBusinessUserModal from './RegisterNewBusinessUser';\r\n// import { categoryItemList } from '../../../helpers/api/auth';\r\nimport { FaHamburger } from 'react-icons/fa';\r\nimport ToggleSwitch from '../MenuManagement/ToggleSwitch';\r\nimport RegisterIngredientModal from '../MenuManagement/RegisterNewIngredient';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    outlet_type: string;\r\n    is_primary_outlet: boolean;\r\n    outlet_address: string;\r\n    outlet_gst_no: string;\r\n    business_id: string;\r\n    currency: string;\r\n    language_id: string;\r\n    url: string;\r\n    is_active: boolean;\r\n}\r\n\r\ninterface BusinessUser {\r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n    phone_number: string;\r\n    address: string;\r\n    user_id: string;\r\n    business_id: string;\r\n}\r\n\r\ninterface Business {\r\n    business_id: string;\r\n    business_name: string;\r\n    business_logo: string;\r\n    business_address: string;\r\n    business_contact: string;\r\n    cuisine: string;\r\n    gst_no: string;\r\n    outlets: Outlet[];\r\n    business_users: BusinessUser[];\r\n    is_active: boolean;\r\n    user_id: string;\r\n}\r\n\r\ninterface UpdateOutlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    outlet_type: string;\r\n    outlet_address: string;\r\n    gst_no: string;\r\n    business_id: string;\r\n    language_id: string;\r\n}\r\n\r\nconst BusinessDetails: React.FC = () => {\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const { id } = useParams<{ id: string }>(); // Extracting 'id' from URL params\r\n    const [selectedBusiness = appSelector((state: RootState) => state.business.businessDetails), setSelectedBusiness] =\r\n        useState<Business | null>(null);\r\n    const location = useLocation();\r\n    const id = location.state?.business_id;\r\n\r\n    const businesses = appSelector((state: RootState) => state.business.businesses || []);\r\n    const navigate = useNavigate();\r\n    const [showOutletModal, setShowOutletModal] = useState(false);\r\n    const [showIngredientModal, setShowIngredientModal] = useState(false);\r\n    const [showBusinessUserModal, setShowBusinessUserModal] = useState(false);\r\n    const [message, setMessage] = useState<string>('');\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isOutletEditing, setIsOutletEditing] = useState<boolean>(false); // Separate state for editing\r\n    const [isBusinessUserEditing, setIsBusinessUserEditing] = useState<boolean>(false);\r\n    const [editedOutlet, setEditedOutlet] = useState<Outlet | null>(null); // Store\r\n    const [editedBusinessUser, setEditedBusinessUser] = useState<BusinessUser | null>(null);\r\n    const [selectedOutlet, setSelectedOutlet] = useState<Outlet | null>(null);\r\n    const [selectedBusinessUser, setSelectedBusinessUser] = useState<BusinessUser | null>(null);\r\n    const { languages, loading, error } = useSelector((state: RootState) => state.language) as {\r\n        languages: { id: string; name: string }[];\r\n        loading: boolean;\r\n        error: string | null;\r\n    };\r\n    // const [deleteOutletModal, setDeleteOutletModal] = useState<string | null>(null);\r\n    const [deleteOutletModal, setDeleteOutletModal] = useState<{ outlet_id: string; business_id: string } | null>(null);\r\n\r\n    const [showDeleteOutletModal, setShowDeleteOutletModal] = useState(false);\r\n\r\n    const [deleteBusinessUserModal, setDeleteBusinessUserModal] = useState<{\r\n        user_id: string;\r\n        business_id: string;\r\n    } | null>(null);\r\n\r\n    const [showDeleteBusinessUserModal, setShowDeleteBusinessUserModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('Dispatching actions for business list');\r\n        dispatch(resetBusiness());\r\n        // dispatch(businessList());\r\n        dispatch(businessDetails(id));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (!languages.length) {\r\n            dispatch(languageList());\r\n        }\r\n    }, [dispatch, languages.length]);\r\n\r\n    useEffect(() => {\r\n        console.log('Business ID from URL:', id); // Log the 'id' variable from useParams\r\n        console.log('Available businesses:', businesses); // Log the businesses array\r\n\r\n        if (id) {\r\n            // Ensure that 'id' is a string and matches the format of business.business_id\r\n            const business = businesses.find((business: Business) => business.business_id === id);\r\n\r\n            console.log('business res: ', business);\r\n\r\n            if (business) {\r\n                setSelectedBusiness(business);\r\n            } else {\r\n                console.log('Business not found in the list!');\r\n            }\r\n        }\r\n    }, [id, businesses]);\r\n\r\n    // const selectedBusiness = appSelector((state: RootState) => state.business.businessDetails);\r\n\r\n    console.log('Selected Business:', selectedBusiness);\r\n    console.log(\r\n        'Redux State:',\r\n        appSelector((state) => state.business.businessDetails)\r\n    );\r\n\r\n    if (!businesses.length) {\r\n        return <div>Loading business details...</div>;\r\n    }\r\n\r\n    if (!selectedBusiness) {\r\n        return <div>Business not found!</div>;\r\n    }\r\n\r\n    const handleManageMenu = (business_id: string) => {\r\n        navigate(`/apps/manage-menu`, { state: { business_id: business_id } });\r\n        // console.log('Dispatching action:', categoryItemList(business_id));\r\n        // dispatch(categoryItemList(business_id));\r\n    };\r\n\r\n    const handleRecipe = () => {\r\n        navigate(`/apps/recipe`);\r\n    };\r\n    const handleAddIngredient = () => {\r\n        if (!showIngredientModal) {\r\n            setShowIngredientModal(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseIngredientModal = () => {\r\n        console.log('Closing modal');\r\n        setShowIngredientModal(false); // Hide the modal when clicked\r\n    };\r\n\r\n    const handleOutletMenu = (business_id: string, outlet_id: string) => {\r\n        navigate(`/apps/outlet-menu`, { state: { business_id: business_id, outlet_id: outlet_id } });\r\n    };\r\n\r\n    const handleDeleteOutlet = (outlet_id: string, business_id: string) => {\r\n        const confirmDeleteOutlet = window.confirm('Are you sure you want to delete this Outlet?');\r\n        if (confirmDeleteOutlet) {\r\n            console.log('businessId here OUTLET >>>>>> ', business_id);\r\n            dispatch(deleteOutlet(outlet_id, business_id));\r\n            setMessage('Outlet deleted successfully');\r\n            // setTimeout(() => {\r\n            //     setMessage('');\r\n            //     dispatch(deleteOutlet(outlet_id, business_id));\r\n            // });\r\n        }\r\n    };\r\n\r\n    const handleDeleteOutletClick = (outlet_id: string, business_id: string) => {\r\n        setDeleteOutletModal({ outlet_id, business_id });\r\n        setShowDeleteOutletModal(true);\r\n    };\r\n\r\n    const confirmOutletDelete = () => {\r\n        if (deleteOutletModal) {\r\n            dispatch(deleteOutlet(deleteOutletModal.outlet_id, deleteOutletModal.business_id));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(businessDetails(id));\r\n        }, 500);\r\n        setShowDeleteOutletModal(false);\r\n    };\r\n\r\n    const handleDeleteBusinessUser = (user_id: string, business_id: string) => {\r\n        const confirmDeleteBusinessUser = window.confirm('Are you sure you want to delete this Outlet?');\r\n        if (confirmDeleteBusinessUser) {\r\n            console.log('userId here >>>>>> ', user_id);\r\n            console.log('businessId here >>>>>> ', business_id);\r\n            dispatch(deleteBusinessUser(user_id, business_id));\r\n            setMessage('BusinessUser deleted successfully');\r\n            // setTimeout(() => {\r\n            //     setMessage('');\r\n            //     dispatch(deleteOutlet(outlet_id, business_id));\r\n            // });\r\n        }\r\n    };\r\n\r\n    const handleDeleteBusinessUserClick = (user_id: string, business_id: string) => {\r\n        setDeleteBusinessUserModal({ user_id, business_id });\r\n        setShowDeleteBusinessUserModal(true);\r\n    };\r\n\r\n    const confirmBusinessUserDelete = () => {\r\n        if (deleteBusinessUserModal) {\r\n            dispatch(deleteBusinessUser(deleteBusinessUserModal.user_id, deleteBusinessUserModal.business_id));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(businessDetails(id));\r\n        }, 500);\r\n        setShowDeleteBusinessUserModal(false);\r\n    };\r\n\r\n    const handleRegisterNewOutlet = () => {\r\n        if (!showOutletModal) {\r\n            // Only toggle if the modal isn't already open\r\n            setShowOutletModal(true);\r\n        }\r\n    };\r\n\r\n    const handleRegisterNewBusinessUser = () => {\r\n        if (!showBusinessUserModal) {\r\n            // Only toggle if the modal isn't already open\r\n            setShowBusinessUserModal(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseOutletModal = () => {\r\n        console.log('Closing modal');\r\n        setShowOutletModal(false); // Hide the modal when clicked\r\n    };\r\n\r\n    const handleCloseBusinessUserModal = () => {\r\n        console.log('Closing modal');\r\n        setShowBusinessUserModal(false); // Hide the modal when clicked\r\n    };\r\n\r\n    const handleEditOutletClick = (\r\n        outlet_id: string,\r\n        outlet_name: string,\r\n        outlet_type: string,\r\n        outlet_address: string,\r\n        outlet_gst_no: string,\r\n        business_id: string,\r\n        language_id: string\r\n    ) => {\r\n        const outletToUpdate = selectedBusiness.outlets.find((outlet: Outlet) => outlet.outlet_id === outlet_id);\r\n        if (!outletToUpdate) {\r\n            setMessage('Outlet not found');\r\n            return;\r\n        }\r\n        console.log('Edit Button clicked for Outlet:', outletToUpdate);\r\n        setIsOutletEditing(true);\r\n        setEditedOutlet({ ...outletToUpdate, business_id: selectedBusiness.business_id });\r\n        setSelectedOutlet({ ...outletToUpdate });\r\n    };\r\n\r\n    const handleOutletUpdateToggle = (outlet_id: string, is_active: boolean) => {\r\n        console.log('handleOutletUpdateToggle called with:', outlet_id, is_active);\r\n\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [outlet_id]: is_active,\r\n        }));\r\n\r\n        dispatch(outletUpdateIsActive(outlet_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(businessList());\r\n        }, 500);\r\n    };\r\n\r\n    const handleEditBusinessUserClick = (\r\n        first_name: string,\r\n        last_name: string,\r\n        email: string,\r\n        phone_number: string,\r\n        address: string,\r\n        user_id: string\r\n    ) => {\r\n        const businessUserToUpdate = selectedBusiness.business_users.find(\r\n            (business_users: BusinessUser) => business_users.user_id === user_id\r\n        );\r\n        if (!businessUserToUpdate) {\r\n            setMessage('BusinessUser not found');\r\n            return;\r\n        }\r\n        console.log('Edit Button clicked for BusinessUser:', businessUserToUpdate);\r\n        setIsBusinessUserEditing(true);\r\n        setEditedBusinessUser({ ...businessUserToUpdate });\r\n        setSelectedBusinessUser({ ...businessUserToUpdate });\r\n    };\r\n\r\n    const handleSaveOutletChanges = () => {\r\n        if (editedOutlet) {\r\n            const payload: UpdateOutlet = {\r\n                outlet_id: editedOutlet.outlet_id,\r\n                outlet_name: editedOutlet.outlet_name,\r\n                outlet_type: editedOutlet.outlet_type,\r\n                outlet_address: editedOutlet.outlet_address,\r\n                gst_no: editedOutlet.outlet_gst_no,\r\n                business_id: editedOutlet.business_id || selectedBusiness.business_id,\r\n                language_id: editedOutlet.language_id,\r\n            };\r\n\r\n            console.log('Payload ready for submission:', payload);\r\n            dispatch(updateOutlet(payload));\r\n\r\n            setIsOutletEditing(false); // Exit editing mode\r\n            setMessage('Outlet details updated successfully.');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(businessList());\r\n            }, 500);\r\n            setSelectedOutlet(editedOutlet);\r\n        }\r\n    };\r\n\r\n    const handleCancelOutletEdit = () => {\r\n        setIsOutletEditing(false); // Cancel editing mode\r\n        setEditedOutlet(null); // Reset the edited business\r\n    };\r\n\r\n    const handleSaveBusinessUserChanges = () => {\r\n        console.log('Business', editedBusinessUser);\r\n        if (editedBusinessUser) {\r\n            const payload: BusinessUser = {\r\n                business_id: editedBusinessUser.business_id,\r\n                user_id: editedBusinessUser.user_id,\r\n                first_name: editedBusinessUser.first_name,\r\n                last_name: editedBusinessUser.last_name,\r\n                email: editedBusinessUser.email,\r\n                phone_number: editedBusinessUser.phone_number,\r\n                address: editedBusinessUser.address,\r\n            };\r\n\r\n            console.log('Payload ready for submission:', payload);\r\n            dispatch(updateBusinessUser(payload));\r\n\r\n            setIsBusinessUserEditing(false); // Exit editing mode\r\n            setMessage('BusinessUser details updated successfully.');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(businessList());\r\n            }, 500);\r\n            setSelectedBusinessUser(editedBusinessUser);\r\n        }\r\n    };\r\n\r\n    const handleCancelBusinessUserEdit = () => {\r\n        setIsBusinessUserEditing(false); // Cancel editing mode\r\n        setEditedBusinessUser(null); // Reset the edited business\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {selectedBusiness ? (\r\n                <Card className=\"mb-3\">\r\n                    <Card.Body>\r\n                        <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <img\r\n                                    src={selectedBusiness.business_logo}\r\n                                    alt={`${selectedBusiness.business_name} Logo`}\r\n                                    style={{ width: '80px', height: '80px', borderRadius: '50%', marginRight: '20px' }}\r\n                                />\r\n                                <h3 className=\"header-title\">{selectedBusiness.business_name}</h3>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <Button className=\"me-2\" onClick={handleAddIngredient}>\r\n                                    + Add Ingredient\r\n                                </Button>\r\n                                <RegisterIngredientModal\r\n                                    show={showIngredientModal}\r\n                                    onClose={handleCloseIngredientModal}\r\n                                    business_id={selectedBusiness.business_id}\r\n                                />\r\n                                <Button className=\"me-2\" onClick={() => handleManageMenu(selectedBusiness.business_id)}>\r\n                                    Manage Menu\r\n                                </Button>\r\n                                {/* <Button variant=\"outline-primary\" className=\"me-2\">\r\n                                    <FaRegEdit size={20} />\r\n                                </Button>\r\n                                <Button variant=\"outline-danger\">\r\n                                    <FaTrash size={20} />\r\n                                </Button> */}\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <p>\r\n                                <strong>Contact:</strong> {selectedBusiness.business_contact}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Address:</strong> {selectedBusiness.business_address}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Cuisine:</strong> {selectedBusiness.cuisine}\r\n                            </p>\r\n                            <p>\r\n                                <strong>GST Number:</strong> {selectedBusiness.gst_no}\r\n                            </p>\r\n                            <p>\r\n                                <strong>Active Status:</strong> {selectedBusiness.is_active ? 'Active' : 'Inactive'}\r\n                            </p>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            ) : (\r\n                <p>Loading business details...</p>\r\n            )}\r\n\r\n            <Card>\r\n                <Card.Body>\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <h4 className=\"header-title\">{selectedBusiness.business_name} - Outlets:</h4>\r\n                        <Button onClick={handleRegisterNewOutlet}>Register New Outlet</Button>\r\n                        <RegisterOutletModal\r\n                            show={showOutletModal}\r\n                            onClose={handleCloseOutletModal}\r\n                            businessId={selectedBusiness.business_id}\r\n                        />\r\n                    </div>\r\n                    <div className=\"table-responsive\">\r\n                        <Table className=\"mb-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Type</th>\r\n                                    <th>Address</th>\r\n                                    <th>GST Number</th>\r\n                                    <th>Language</th>\r\n                                    <th>Currency</th>\r\n                                    <th>Menu</th>\r\n                                    <th>Is Active?</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {selectedBusiness?.outlets?.length > 0 ? (\r\n                                    selectedBusiness.outlets.map((outlet: Outlet) => (\r\n                                        <tr key={outlet.outlet_id}>\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedOutlet?.outlet_name || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev ? { ...prev, outlet_name: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    outlet.outlet_name\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <Form.Select\r\n                                                        value={editedOutlet?.outlet_type || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev ? { ...prev, outlet_type: e.target.value } : null\r\n                                                            )\r\n                                                        }>\r\n                                                        <option value=\"\">Select Outlet Type</option>\r\n                                                        <option value=\"coco\">coco</option>\r\n                                                        <option value=\"cofo\">cofo</option>\r\n                                                        <option value=\"foco\">foco</option>\r\n                                                        <option value=\"fofo\">fofo</option>\r\n                                                    </Form.Select>\r\n                                                ) : (\r\n                                                    outlet.outlet_type\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedOutlet?.outlet_address || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev\r\n                                                                    ? { ...prev, outlet_address: e.target.value }\r\n                                                                    : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    outlet.outlet_address\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedOutlet?.outlet_gst_no || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev ? { ...prev, outlet_gst_no: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    outlet.outlet_gst_no\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <Form.Select\r\n                                                        value={editedOutlet?.language_id || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev ? { ...prev, language_id: e.target.value } : null\r\n                                                            )\r\n                                                        }>\r\n                                                        <option value=\"\">Select Language</option>\r\n                                                        {languages.map((language) => (\r\n                                                            <option key={language.id} value={language.id}>\r\n                                                                {language.name}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </Form.Select>\r\n                                                ) : (\r\n                                                    // Check if language is found, fallback to 'N/A'\r\n                                                    languages.find((lang) => lang.id === outlet.language_id)?.name ||\r\n                                                    'N/A'\r\n                                                )}\r\n                                            </td>\r\n\r\n                                            {/* <td>\r\n                                                {isEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedOutlet?.currency || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedOutlet((prev) =>\r\n                                                                prev ? { ...prev, currency: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    outlet.currency\r\n                                                )}\r\n                                            </td> */}\r\n                                            <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    // Show currency value as plain text when editing\r\n                                                    <span>{outlet.currency}</span>\r\n                                                ) : (\r\n                                                    // Display currency in view mode\r\n                                                    outlet.currency\r\n                                                )}\r\n                                            </td>\r\n\r\n                                            <td>\r\n                                                <FaHamburger\r\n                                                    onClick={() =>\r\n                                                        handleOutletMenu(selectedBusiness.business_id, outlet.outlet_id)\r\n                                                    }\r\n                                                    size={20}\r\n                                                    style={{ cursor: 'pointer' }}\r\n                                                />\r\n                                            </td>\r\n\r\n                                            {/* <td>\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    // Show the \"Is Active\" status as plain text (non-editable)\r\n                                                    <span>{outlet.is_active}</span>\r\n                                                ) : (\r\n                                                    <Form.Check type=\"switch\" />\r\n                                                )}\r\n                                            </td> */}\r\n                                            <td>\r\n                                                <ToggleSwitch\r\n                                                    checked={toggleStates[outlet.outlet_id] ?? outlet.is_active}\r\n                                                    onChange={(checked) =>\r\n                                                        handleOutletUpdateToggle(outlet.outlet_id, checked)\r\n                                                    }\r\n                                                />\r\n                                            </td>\r\n                                            <td className=\"d-flex align-items-center\">\r\n                                                {isOutletEditing && selectedOutlet?.outlet_id === outlet.outlet_id ? (\r\n                                                    <>\r\n                                                        <Button\r\n                                                            variant=\"success\"\r\n                                                            style={{ padding: '5px 10px', fontSize: '14px' }}\r\n                                                            onClick={handleSaveOutletChanges}>\r\n                                                            Save\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            variant=\"secondary\"\r\n                                                            style={{\r\n                                                                padding: '5px 10px',\r\n                                                                marginLeft: '5px',\r\n                                                                fontSize: '14px',\r\n                                                            }}\r\n                                                            onClick={handleCancelOutletEdit}>\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <FaRegEdit\r\n                                                            size={20}\r\n                                                            style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                                            onClick={() =>\r\n                                                                handleEditOutletClick(\r\n                                                                    outlet.outlet_id,\r\n                                                                    outlet.outlet_name,\r\n                                                                    outlet.outlet_type,\r\n                                                                    outlet.outlet_address,\r\n                                                                    outlet.outlet_gst_no,\r\n                                                                    selectedBusiness.business_id,\r\n                                                                    outlet.language_id\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                        <FaTrash\r\n                                                            size={20}\r\n                                                            style={{ cursor: 'pointer', color: 'red' }}\r\n                                                            onClick={() =>\r\n                                                                handleDeleteOutletClick(\r\n                                                                    outlet.outlet_id,\r\n                                                                    selectedBusiness.business_id\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                        <ConfirmDeleteModal\r\n                                                            show={showDeleteOutletModal}\r\n                                                            onClose={() => setShowDeleteOutletModal(false)}\r\n                                                            onConfirm={confirmOutletDelete}\r\n                                                            title=\"Delete this Outlet\"\r\n                                                            message=\"Are you sure you want to delete this Outlet? This action cannot be undone.\"\r\n                                                        />\r\n                                                    </>\r\n                                                )}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td colSpan={7}>No outlets found.</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n\r\n            <Card>\r\n                <Card.Body>\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <h4 className=\"header-title\">{selectedBusiness.business_name} - Business Owners:</h4>\r\n                        <Button onClick={handleRegisterNewBusinessUser}>Register New Business Owner</Button>\r\n                        <RegisterBusinessUserModal\r\n                            show={showBusinessUserModal}\r\n                            onClose={handleCloseBusinessUserModal}\r\n                            businessId={selectedBusiness.business_id}\r\n                        />\r\n                    </div>\r\n                    <div className=\"table-responsive\">\r\n                        <Table className=\"mb-0\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>First Name</th>\r\n                                    <th>Last Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Phone Number</th>\r\n                                    <th>Address</th>\r\n                                    <th>Action</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {selectedBusiness.business_users.length > 0 ? (\r\n                                    selectedBusiness.business_users.map((business_users: BusinessUser) => (\r\n                                        <tr key={business_users.user_id}>\r\n                                            {/* {console.log('user_id >>>>>>>>>>>', business_users.user_id)} */}\r\n                                            <td>\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusinessUser?.first_name || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusinessUser((prev) =>\r\n                                                                prev ? { ...prev, first_name: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business_users.first_name\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusinessUser?.last_name || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusinessUser((prev) =>\r\n                                                                prev ? { ...prev, last_name: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business_users.last_name\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusinessUser?.email || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusinessUser((prev) =>\r\n                                                                prev ? { ...prev, email: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business_users.email\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusinessUser?.phone_number || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusinessUser((prev) =>\r\n                                                                prev ? { ...prev, phone_number: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business_users.phone_number\r\n                                                )}\r\n                                            </td>\r\n                                            <td>\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={editedBusinessUser?.address || ''}\r\n                                                        onChange={(e) =>\r\n                                                            setEditedBusinessUser((prev) =>\r\n                                                                prev ? { ...prev, address: e.target.value } : null\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                ) : (\r\n                                                    business_users.address\r\n                                                )}\r\n                                            </td>\r\n\r\n                                            <td className=\"d-flex align-items-center\">\r\n                                                {isBusinessUserEditing &&\r\n                                                selectedBusinessUser?.user_id === business_users.user_id ? (\r\n                                                    <>\r\n                                                        <Button\r\n                                                            variant=\"success\"\r\n                                                            style={{ padding: '5px 10px', fontSize: '14px' }}\r\n                                                            onClick={handleSaveBusinessUserChanges}>\r\n                                                            Save\r\n                                                        </Button>\r\n                                                        <Button\r\n                                                            variant=\"secondary\"\r\n                                                            style={{\r\n                                                                padding: '5px 10px',\r\n                                                                marginLeft: '5px',\r\n                                                                fontSize: '14px',\r\n                                                            }}\r\n                                                            onClick={handleCancelBusinessUserEdit}>\r\n                                                            Cancel\r\n                                                        </Button>\r\n                                                    </>\r\n                                                ) : (\r\n                                                    <>\r\n                                                        <FaRegEdit\r\n                                                            size={20}\r\n                                                            style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                                            onClick={() =>\r\n                                                                handleEditBusinessUserClick(\r\n                                                                    business_users.first_name,\r\n                                                                    business_users.last_name,\r\n                                                                    business_users.email,\r\n                                                                    business_users.phone_number,\r\n                                                                    business_users.address,\r\n                                                                    business_users.user_id\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                        <FaTrash\r\n                                                            size={20}\r\n                                                            style={{ cursor: 'pointer', color: 'red' }}\r\n                                                            onClick={() =>\r\n                                                                handleDeleteBusinessUserClick(\r\n                                                                    business_users.user_id,\r\n                                                                    selectedBusiness.business_id\r\n                                                                )\r\n                                                            }\r\n                                                        />\r\n                                                        <ConfirmDeleteModal\r\n                                                            show={showDeleteBusinessUserModal}\r\n                                                            onClose={() => setShowDeleteBusinessUserModal(false)}\r\n                                                            onConfirm={confirmBusinessUserDelete}\r\n                                                            title=\"Delete this BusinessUser\"\r\n                                                            message=\"Are you sure you want to delete this BusinessUser? This action cannot be undone.\"\r\n                                                        />\r\n                                                    </>\r\n                                                )}\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))\r\n                                ) : (\r\n                                    <tr>\r\n                                        <td colSpan={7}>No outlets found.</td>\r\n                                    </tr>\r\n                                )}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BusinessDetails;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError() {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.error('Error caught by Error Boundary:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport ErrorBoundary from '../../../components/ErrorBoundary';\r\nimport { categoryItemList, categoryUpdateIsActive } from '../../../redux/menuManagementCategory/actions';\r\nimport { deleteItem, updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { deleteCategory } from '../../../redux/menuManagementCategory/actions';\r\nimport RegisterCategory from './RegisterCategory';\r\nimport { useRedux } from '../../../hooks';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { RootState } from '../../../redux/store';\r\nimport './ManageMenu.css';\r\nimport EditCategory from './EditCategory';\r\nimport ToggleSwitch from './ToggleSwitch';\r\nimport { itemUpdateIsActive } from '../../../redux/menuManagementItem/actions';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface CategoryItem {\r\n    business_id: string;\r\n    category_id: string;\r\n    is_active: boolean;\r\n    category_name: string;\r\n    category_names: { [key: string]: string };\r\n    logo_image: string;\r\n    items: Array<{\r\n        category_id: string;\r\n        item_id: string;\r\n        item_name: string;\r\n        price: number;\r\n        is_active: boolean;\r\n        dietary: string;\r\n        logo_image: string;\r\n        available_order_type: string[];\r\n    }>;\r\n}\r\n\r\nconst ManageMenu: React.FC = () => {\r\n    // const { business_id } = useParams<{ business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const [showCategoryRegistrationModal, setShowCategoryRegistrationModal] = useState(false);\r\n    // const [showCategoryUpdateModal, setShowCategoryUpdateModal] = useState(false);\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [editItem, setEditItem] = useState<CategoryItem['items'][number] | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\r\n    const [categoryDelete, setCategoryDelete] = useState<string | null>(null);\r\n    const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);\r\n    const [itemDelete, setItemDelete] = useState<string | null>(null);\r\n    const [showItemDeleteModal, setShowItemDeleteModal] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            dispatch(categoryItemList(business_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    useEffect(() => {\r\n        if (categories.length > 0 && !selectedCategoryId) {\r\n            setSelectedCategoryId(categories[0].category_id);\r\n        }\r\n    }, [categories, selectedCategoryId]);\r\n    useEffect(() => {\r\n        if (categories.length > 0) {\r\n            const initialToggleStates: { [key: string]: boolean } = {};\r\n            categories.forEach((category: CategoryItem) => {\r\n                initialToggleStates[category.category_id] = category.is_active;\r\n                // Update toggle states for each item inside the category\r\n                category.items.forEach((item) => {\r\n                    initialToggleStates[item.item_id] = item.is_active;\r\n                });\r\n            });\r\n            setToggleStates(initialToggleStates);\r\n        }\r\n    }, [categories]); // Ensures sync when categories are updated\r\n\r\n    const handleCategoryClick = (category_id: string) => {\r\n        console.log('Category Clicked:', category_id); // Debugging log\r\n        // setSelectedCategoryId(category_id === selectedCategoryId ? null : category_id);\r\n        setSelectedCategoryId(category_id);\r\n    };\r\n\r\n    const handleCategoryToggle = (category_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [category_id]: is_active,\r\n        }));\r\n        dispatch(categoryUpdateIsActive(category_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n        // setSelectedBusinessUser(editedBusinessUser);\r\n    };\r\n\r\n    const handleItemToggle = (item_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [item_id]: is_active,\r\n        }));\r\n\r\n        // Dispatch action to update the item status\r\n        dispatch(itemUpdateIsActive(item_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n    };\r\n    const handleRecipe = (business_id: string, item_id: string) => {\r\n        navigate('/apps/recipe', {\r\n            state: { business_id: business_id, item_id: item_id },\r\n        });\r\n    };\r\n\r\n    // const handleCategoryRegister = () => {\r\n    //     console.log('Category Register Clicked');\r\n\r\n    //     if (!showCategoryRegistrationModal) {\r\n    //         setShowCategoryRegistrationModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCategoryUpdate = () => {\r\n    //     console.log('Category Update Clicked');\r\n\r\n    //     if (!showCategoryUpdateModal) {\r\n    //         setShowCategoryUpdateModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCloseCategoryRegistrationModal = () => {\r\n    //     console.log('Category Register Closed');\r\n    //     setShowCategoryRegistrationModal(false);\r\n    // };\r\n\r\n    // const handleCloseCategoryUpdateModal = () => {\r\n    //     console.log('Category Update Clicked');\r\n    //     setShowCategoryUpdateModal(false);\r\n    // };\r\n\r\n    const handleDeleteItem = (item_id: string) => {\r\n        const confirmDeleteitem = window.confirm('Are you sure you want to delete this Item?');\r\n        if (confirmDeleteitem) {\r\n            dispatch(deleteItem(item_id));\r\n            setMessage('Item deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n    const handleItemDelete = (item_id: string) => {\r\n        setItemDelete(item_id);\r\n        setShowItemDeleteModal(true);\r\n    };\r\n\r\n    const confirmItemDelete = () => {\r\n        if (itemDelete) {\r\n            dispatch(deleteItem(itemDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowItemDeleteModal(false);\r\n    };\r\n\r\n    const handleDeleteCategory = (category_id: string) => {\r\n        const confirmDeletecategory = window.confirm('Are you sure you want to delete this Category?');\r\n        if (confirmDeletecategory) {\r\n            dispatch(deleteCategory(category_id));\r\n            setMessage('Category deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    const handleCategoryDelete = (category_id: string) => {\r\n        setCategoryDelete(category_id);\r\n        setShowCategoryDeleteModal(true);\r\n    };\r\n\r\n    const confirmCategoryDelete = () => {\r\n        if (categoryDelete) {\r\n            dispatch(deleteCategory(categoryDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowCategoryDeleteModal(false);\r\n    };\r\n\r\n    const handleEditItem = (item_id: string, category_id: string) => {\r\n        navigate(`/apps/edit-item`, {\r\n            state: { business_id: business_id, category_id: selectedCategoryId, item_id: item_id },\r\n        });\r\n        console.log('category_id: ', category_id);\r\n        console.log('selectedCategoryId: ', selectedCategoryId);\r\n        console.log('setSelectedCategoryId: ', setSelectedCategoryId);\r\n    };\r\n\r\n    // const handleSaveChanges = () => {\r\n    //     if (editItem) {\r\n    //         // Create a FormData object\r\n    //         const formData = new FormData();\r\n\r\n    //         // Append each field of the editItem to the FormData\r\n    //         formData.append('item_id', editItem.item_id);\r\n    //         formData.append('item_name', editItem.item_name);\r\n    //         formData.append('price', editItem.price.toString()); // Ensure the price is a string\r\n    //         formData.append('dietary', editItem.dietary);\r\n    //         formData.append('available_order_type', JSON.stringify(editItem.available_order_type)); // Serialize array\r\n\r\n    //         console.log('Dispatching update with FormData payload', formData);\r\n\r\n    //         // Dispatch the updateItem action with the FormData\r\n    //         dispatch(updateItem(formData));\r\n    //     } else {\r\n    //         setMessage('No item to save.');\r\n    //     }\r\n    // };\r\n\r\n    const filteredItems = categories\r\n        .filter((category: CategoryItem) => !selectedCategoryId || category.category_id === selectedCategoryId)\r\n        .flatMap((category: CategoryItem) => category.items);\r\n\r\n    console.log('Filtered Items:', filteredItems); // Debugging log\r\n\r\n    return (\r\n        <div className=\"manage-menu-container\">\r\n            <div className=\"header\">\r\n                <h2>Item List</h2>\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"add-item-button\"\r\n                        onClick={() =>\r\n                            navigate(`/apps/item-register`, {\r\n                                state: { business_id: business_id, category_id: selectedCategoryId },\r\n                            })\r\n                        }>\r\n                        + Add Item\r\n                    </button>\r\n                    {/* <button className=\"add-item-button\" onClick={handleRecipe}>\r\n                        Recipe\r\n                    </button> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"category-tabs\">\r\n                {categories.map((category: CategoryItem) => (\r\n                    <div\r\n                        className={`category-tab ${selectedCategoryId === category.category_id ? 'active' : ''}`}\r\n                        key={category.category_id}\r\n                        onClick={() => handleCategoryClick(category.category_id)}>\r\n                        <img src={category.logo_image} alt={category.category_name} />\r\n                        <p>{category.category_name}</p>\r\n                        <div>\r\n                            <div onClick={(e) => e.stopPropagation()}>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[category.category_id] || false}\r\n                                    onChange={(checked) => handleCategoryToggle(category.category_id, checked)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <FaRegEdit\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                onClick={() =>\r\n                                    navigate(`/apps/category-update`, {\r\n                                        state: {\r\n                                            business_id: business_id,\r\n                                            category_id: selectedCategoryId,\r\n                                        },\r\n                                    })\r\n                                }\r\n                            />\r\n                            {/* {showCategoryUpdateModal && (\r\n                                <EditCategory show={showCategoryUpdateModal} onClose={handleCloseCategoryUpdateModal} />\r\n                            )} */}\r\n\r\n                            <FaTrash\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                onClick={() => handleCategoryDelete(category.category_id)}\r\n                            />\r\n                            <ConfirmDeleteModal\r\n                                show={showCategoryDeleteModal}\r\n                                onClose={() => setShowCategoryDeleteModal(false)}\r\n                                onConfirm={confirmCategoryDelete}\r\n                                title=\"Delete this Category\"\r\n                                message=\"Are you sure you want to delete this Category? This action cannot be undone.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"add-category-button\"\r\n                    onClick={() => navigate(`/apps/category-register`, { state: { business_id: business_id } })}>\r\n                    + Add Category\r\n                </button>\r\n                {/* {showCategoryRegistrationModal && (\r\n                    <RegisterCategory\r\n                        show={showCategoryRegistrationModal}\r\n                        onClose={handleCloseCategoryRegistrationModal}\r\n                    /> */}\r\n            </div>\r\n\r\n            <div className=\"item-list\">\r\n                {filteredItems.length > 0 ? (\r\n                    filteredItems.map((item: CategoryItem['items'][number]) => {\r\n                        return (\r\n                            <div className=\"item-card\" key={item.item_id}>\r\n                                <img src={item.logo_image} alt={item.item_name} className=\"item-image\" />\r\n                                <div className=\"item-details\">\r\n                                    <h3>{item.item_name}</h3>\r\n                                    <p>Price: {item.price}</p>\r\n                                    <p>Total Amount: 0</p>\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    <button\r\n                                        className=\"add-recipe-button\"\r\n                                        onClick={() => handleRecipe(business_id, item.item_id)}>\r\n                                        + Recipe\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button\r\n                                        className=\"edit-button\"\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}>\r\n                                        Edit\r\n                                    </button> */}\r\n                                    <FaRegEdit\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button className=\"delete-button\" onClick={() => handleDeleteItem(item.item_id)}>\r\n                                        Delete\r\n                                    </button> */}\r\n                                    <FaTrash\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', color: 'red' }}\r\n                                        onClick={() => handleItemDelete(item.item_id)}\r\n                                    />\r\n                                    <ConfirmDeleteModal\r\n                                        show={showItemDeleteModal}\r\n                                        onClose={() => setShowItemDeleteModal(false)}\r\n                                        onConfirm={confirmItemDelete}\r\n                                        title=\"Delete this Item\"\r\n                                        message=\"Are you sure you want to delete this Item? This action cannot be undone.\"\r\n                                    />\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[item.item_id] || false}\r\n                                    onChange={(checked) => handleItemToggle(item.item_id, checked)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <p className=\"no-items-message\">No items available</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ManageMenuWithBoundary: React.FC = () => (\r\n    <ErrorBoundary>\r\n        <ManageMenu />\r\n    </ErrorBoundary>\r\n);\r\n\r\nexport default ManageMenuWithBoundary;\r\n\r\n{\r\n    /* <Row>\r\n<Col md={6}>\r\n    <Form.Group>\r\n        <Form.Label>Item Order Type</Form.Label>\r\n        <div>\r\n            {['delivery', 'pick_up', 'dine_in', 'online'].map((type) => (\r\n                <Form.Check\r\n                    key={type}\r\n                    type=\"checkbox\"\r\n                    label={type.replace('_', ' ').toUpperCase()}\r\n                    name=\"available_order_type\"\r\n                    value={type}\r\n                    checked={formData.available_order_type.includes(type)}\r\n                    onChange={(e) => {\r\n                        const { value, checked } = e.target;\r\n                        const updatedOrderTypes = checked\r\n                            ? [...formData.available_order_type, value]\r\n                            : formData.available_order_type.filter((t) => t !== value);\r\n\r\n                        handleChange({\r\n                            target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                        } as any);\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n        {errors.available_order_type && (\r\n            <small className=\"text-danger\">{errors.available_order_type}</small>\r\n        )}\r\n    </Form.Group>\r\n</Col>\r\n</Row> */\r\n}\r\n","import React from 'react';\r\nimport './ManageMenu'; // Add styles for the switch\r\n\r\ninterface ToggleSwitchProps {\r\n    checked: boolean;\r\n    onChange?: (checked: boolean) => void; // ✅ Make onChange optional\r\n    label?: string;\r\n}\r\n\r\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange, label }) => {\r\n    return (\r\n        <label className=\"toggle-switch\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                onChange={(e) => onChange?.(e.target.checked)} // ✅ Use optional chaining\r\n            />\r\n            <span className=\"slider\"></span>\r\n            {label && <span className=\"switch-label\">{label}</span>}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}"],"names":["show","onClose","onConfirm","title","message","onHide","centered","closeButton","variant","onClick","businessId","useState","outletName","setOutletName","outletType","setOutletType","outletAddress","setOutletAddress","gstNo","setGstNo","languageId","setLanguageId","currency","setCurrency","isPrimaryOutlet","setIsPrimaryOutlet","setErrorMessage","outletNameError","setOutletNameError","outletTypeError","setOutletTypeError","outletAddressError","setOutletAddressError","outletGstNumberError","setOutletGstNumberError","languageIdError","setLanguageIdError","currencyError","setCurrencyError","languages","useSelector","state","language","dispatch","useDispatch","useEffect","length","languageList","console","log","Modal","Form","controlId","className","type","value","onChange","e","target","isInvalid","as","name","required","map","idx","label","checked","id","Button","trim","newOutlet","outlet_name","outlet_type","is_primary_outlet","gst_no","language_id","business_id","outlet_address","registerOutlet","setTimeout","businessList","firstName","setFirstName","lastName","setLastName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","firstNameError","setFirstNameError","lastNameError","setLastNameError","setEmailError","setPhoneNumberError","setAddressError","newBusinessUser","first_name","last_name","phone_number","registerBusinessUser","ingredient_name","setName","unit","setUnit","ingredientNameError","setIngredientNameError","unitError","setUnitError","placeholder","valid","recipeIngredientAdd","useRedux","appSelector","selectedBusiness","business","businessDetails","setSelectedBusiness","useLocation","businesses","navigate","useNavigate","showOutletModal","setShowOutletModal","showIngredientModal","setShowIngredientModal","showBusinessUserModal","setShowBusinessUserModal","setMessage","toggleStates","setToggleStates","isOutletEditing","setIsOutletEditing","isBusinessUserEditing","setIsBusinessUserEditing","editedOutlet","setEditedOutlet","editedBusinessUser","setEditedBusinessUser","selectedOutlet","setSelectedOutlet","selectedBusinessUser","setSelectedBusinessUser","loading","error","deleteOutletModal","setDeleteOutletModal","showDeleteOutletModal","setShowDeleteOutletModal","deleteBusinessUserModal","setDeleteBusinessUserModal","showDeleteBusinessUserModal","setShowDeleteBusinessUserModal","resetBusiness","find","confirmOutletDelete","deleteOutlet","outlet_id","confirmBusinessUserDelete","deleteBusinessUser","user_id","handleSaveOutletChanges","payload","outlet_gst_no","updateOutlet","handleCancelOutletEdit","handleSaveBusinessUserChanges","updateBusinessUser","handleCancelBusinessUserEdit","Card","src","business_logo","alt","business_name","style","width","height","borderRadius","marginRight","business_contact","business_address","cuisine","is_active","Table","outlets","outlet","prev","lang","size","cursor","ToggleSwitch","outletUpdateIsActive","padding","fontSize","marginLeft","outletToUpdate","handleEditOutletClick","color","colSpan","business_users","businessUserToUpdate","handleEditBusinessUserClick","ErrorBoundary","hasError","errorInfo","this","props","children","React","ManageMenu","categories","category","selectedCategoryId","setSelectedCategoryId","categoryDelete","setCategoryDelete","showCategoryDeleteModal","setShowCategoryDeleteModal","itemDelete","setItemDelete","showItemDeleteModal","setShowItemDeleteModal","categoryItemList","category_id","initialToggleStates","forEach","items","item","item_id","confirmItemDelete","deleteItem","confirmCategoryDelete","deleteCategory","filteredItems","filter","flatMap","logo_image","category_name","stopPropagation","categoryUpdateIsActive","item_name","price","handleRecipe","itemUpdateIsActive","toFnRef","ref","current","refA","refB","useMemo","a","b","mergeRefs","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","striped","bordered","borderless","hover","responsive","decoratedBsPrefix","classes","table","responsiveClass","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix"],"sourceRoot":""}