{"version":3,"file":"static/js/8938.938b5bc0.chunk.js","mappings":"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","sources":["components/ConfirmDeleteItem.tsx","components/ErrorBoundary.tsx","pages/apps/MenuManagement/ManageMenu.tsx","pages/apps/MenuManagement/ToggleSwitch.tsx","pages/apps/RecipeManagement/RegisterNewRecipe.tsx","pages/apps/RecipeManagement/Recipe.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/Table.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface ConfirmDeleteModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n    title?: string;\r\n    message?: string;\r\n}\r\n\r\nconst ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({\r\n    show,\r\n    onClose,\r\n    onConfirm,\r\n    title = 'Confirm Deletion',\r\n    message = 'Are you sure you want to delete this item?',\r\n}) => {\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={onConfirm}>\r\n                    Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmDeleteModal;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError() {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.error('Error caught by Error Boundary:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport ErrorBoundary from '../../../components/ErrorBoundary';\r\nimport { categoryItemList, categoryUpdateIsActive } from '../../../redux/menuManagementCategory/actions';\r\nimport { deleteItem, updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { deleteCategory } from '../../../redux/menuManagementCategory/actions';\r\nimport RegisterCategory from './RegisterCategory';\r\nimport { useRedux } from '../../../hooks';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { RootState } from '../../../redux/store';\r\nimport './ManageMenu.css';\r\nimport EditCategory from './EditCategory';\r\nimport ToggleSwitch from './ToggleSwitch';\r\nimport { itemUpdateIsActive } from '../../../redux/menuManagementItem/actions';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface CategoryItem {\r\n    business_id: string;\r\n    category_id: string;\r\n    is_active: boolean;\r\n    category_name: string;\r\n    category_names: { [key: string]: string };\r\n    logo_image: string;\r\n    items: Array<{\r\n        category_id: string;\r\n        item_id: string;\r\n        item_name: string;\r\n        price: number;\r\n        is_active: boolean;\r\n        dietary: string;\r\n        logo_image: string;\r\n        available_order_type: string[];\r\n    }>;\r\n}\r\n\r\nconst ManageMenu: React.FC = () => {\r\n    // const { business_id } = useParams<{ business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const [showCategoryRegistrationModal, setShowCategoryRegistrationModal] = useState(false);\r\n    // const [showCategoryUpdateModal, setShowCategoryUpdateModal] = useState(false);\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [editItem, setEditItem] = useState<CategoryItem['items'][number] | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\r\n    const [categoryDelete, setCategoryDelete] = useState<string | null>(null);\r\n    const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);\r\n    const [itemDelete, setItemDelete] = useState<string | null>(null);\r\n    const [showItemDeleteModal, setShowItemDeleteModal] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            dispatch(categoryItemList(business_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    useEffect(() => {\r\n        if (categories.length > 0 && !selectedCategoryId) {\r\n            setSelectedCategoryId(categories[0].category_id);\r\n        }\r\n    }, [categories, selectedCategoryId]);\r\n    useEffect(() => {\r\n        if (categories.length > 0) {\r\n            const initialToggleStates: { [key: string]: boolean } = {};\r\n            categories.forEach((category: CategoryItem) => {\r\n                initialToggleStates[category.category_id] = category.is_active;\r\n                // Update toggle states for each item inside the category\r\n                category.items.forEach((item) => {\r\n                    initialToggleStates[item.item_id] = item.is_active;\r\n                });\r\n            });\r\n            setToggleStates(initialToggleStates);\r\n        }\r\n    }, [categories]); // Ensures sync when categories are updated\r\n\r\n    const handleCategoryClick = (category_id: string) => {\r\n        console.log('Category Clicked:', category_id); // Debugging log\r\n        // setSelectedCategoryId(category_id === selectedCategoryId ? null : category_id);\r\n        setSelectedCategoryId(category_id);\r\n    };\r\n\r\n    const handleCategoryToggle = (category_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [category_id]: is_active,\r\n        }));\r\n        dispatch(categoryUpdateIsActive(category_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n        // setSelectedBusinessUser(editedBusinessUser);\r\n    };\r\n\r\n    const handleItemToggle = (item_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [item_id]: is_active,\r\n        }));\r\n\r\n        // Dispatch action to update the item status\r\n        dispatch(itemUpdateIsActive(item_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n    };\r\n    const handleRecipe = (business_id: string, item_id: string) => {\r\n        navigate('/apps/recipe', {\r\n            state: { business_id: business_id, item_id: item_id },\r\n        });\r\n    };\r\n\r\n    // const handleCategoryRegister = () => {\r\n    //     console.log('Category Register Clicked');\r\n\r\n    //     if (!showCategoryRegistrationModal) {\r\n    //         setShowCategoryRegistrationModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCategoryUpdate = () => {\r\n    //     console.log('Category Update Clicked');\r\n\r\n    //     if (!showCategoryUpdateModal) {\r\n    //         setShowCategoryUpdateModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCloseCategoryRegistrationModal = () => {\r\n    //     console.log('Category Register Closed');\r\n    //     setShowCategoryRegistrationModal(false);\r\n    // };\r\n\r\n    // const handleCloseCategoryUpdateModal = () => {\r\n    //     console.log('Category Update Clicked');\r\n    //     setShowCategoryUpdateModal(false);\r\n    // };\r\n\r\n    const handleDeleteItem = (item_id: string) => {\r\n        const confirmDeleteitem = window.confirm('Are you sure you want to delete this Item?');\r\n        if (confirmDeleteitem) {\r\n            dispatch(deleteItem(item_id));\r\n            setMessage('Item deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n    const handleItemDelete = (item_id: string) => {\r\n        setItemDelete(item_id);\r\n        setShowItemDeleteModal(true);\r\n    };\r\n\r\n    const confirmItemDelete = () => {\r\n        if (itemDelete) {\r\n            dispatch(deleteItem(itemDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowItemDeleteModal(false);\r\n    };\r\n\r\n    const handleDeleteCategory = (category_id: string) => {\r\n        const confirmDeletecategory = window.confirm('Are you sure you want to delete this Category?');\r\n        if (confirmDeletecategory) {\r\n            dispatch(deleteCategory(category_id));\r\n            setMessage('Category deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    const handleCategoryDelete = (category_id: string) => {\r\n        setCategoryDelete(category_id);\r\n        setShowCategoryDeleteModal(true);\r\n    };\r\n\r\n    const confirmCategoryDelete = () => {\r\n        if (categoryDelete) {\r\n            dispatch(deleteCategory(categoryDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowCategoryDeleteModal(false);\r\n    };\r\n\r\n    const handleEditItem = (item_id: string, category_id: string) => {\r\n        navigate(`/apps/edit-item`, {\r\n            state: { business_id: business_id, category_id: selectedCategoryId, item_id: item_id },\r\n        });\r\n        console.log('category_id: ', category_id);\r\n        console.log('selectedCategoryId: ', selectedCategoryId);\r\n        console.log('setSelectedCategoryId: ', setSelectedCategoryId);\r\n    };\r\n\r\n    // const handleSaveChanges = () => {\r\n    //     if (editItem) {\r\n    //         // Create a FormData object\r\n    //         const formData = new FormData();\r\n\r\n    //         // Append each field of the editItem to the FormData\r\n    //         formData.append('item_id', editItem.item_id);\r\n    //         formData.append('item_name', editItem.item_name);\r\n    //         formData.append('price', editItem.price.toString()); // Ensure the price is a string\r\n    //         formData.append('dietary', editItem.dietary);\r\n    //         formData.append('available_order_type', JSON.stringify(editItem.available_order_type)); // Serialize array\r\n\r\n    //         console.log('Dispatching update with FormData payload', formData);\r\n\r\n    //         // Dispatch the updateItem action with the FormData\r\n    //         dispatch(updateItem(formData));\r\n    //     } else {\r\n    //         setMessage('No item to save.');\r\n    //     }\r\n    // };\r\n\r\n    const filteredItems = categories\r\n        .filter((category: CategoryItem) => !selectedCategoryId || category.category_id === selectedCategoryId)\r\n        .flatMap((category: CategoryItem) => category.items);\r\n\r\n    console.log('Filtered Items:', filteredItems); // Debugging log\r\n\r\n    return (\r\n        <div className=\"manage-menu-container\">\r\n            <div className=\"header\">\r\n                <h2>Item List</h2>\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"add-item-button\"\r\n                        onClick={() =>\r\n                            navigate(`/apps/item-register`, {\r\n                                state: { business_id: business_id, category_id: selectedCategoryId },\r\n                            })\r\n                        }>\r\n                        + Add Item\r\n                    </button>\r\n                    {/* <button className=\"add-item-button\" onClick={handleRecipe}>\r\n                        Recipe\r\n                    </button> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"category-tabs\">\r\n                {categories.map((category: CategoryItem) => (\r\n                    <div\r\n                        className={`category-tab ${selectedCategoryId === category.category_id ? 'active' : ''}`}\r\n                        key={category.category_id}\r\n                        onClick={() => handleCategoryClick(category.category_id)}>\r\n                        <img src={category.logo_image} alt={category.category_name} />\r\n                        <p>{category.category_name}</p>\r\n                        <div>\r\n                            <div onClick={(e) => e.stopPropagation()}>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[category.category_id] || false}\r\n                                    onChange={(checked) => handleCategoryToggle(category.category_id, checked)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <FaRegEdit\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                onClick={() =>\r\n                                    navigate(`/apps/category-update`, {\r\n                                        state: {\r\n                                            business_id: business_id,\r\n                                            category_id: selectedCategoryId,\r\n                                        },\r\n                                    })\r\n                                }\r\n                            />\r\n                            {/* {showCategoryUpdateModal && (\r\n                                <EditCategory show={showCategoryUpdateModal} onClose={handleCloseCategoryUpdateModal} />\r\n                            )} */}\r\n\r\n                            <FaTrash\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                onClick={() => handleCategoryDelete(category.category_id)}\r\n                            />\r\n                            <ConfirmDeleteModal\r\n                                show={showCategoryDeleteModal}\r\n                                onClose={() => setShowCategoryDeleteModal(false)}\r\n                                onConfirm={confirmCategoryDelete}\r\n                                title=\"Delete this Category\"\r\n                                message=\"Are you sure you want to delete this Category? This action cannot be undone.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"add-category-button\"\r\n                    onClick={() => navigate(`/apps/category-register`, { state: { business_id: business_id } })}>\r\n                    + Add Category\r\n                </button>\r\n                {/* {showCategoryRegistrationModal && (\r\n                    <RegisterCategory\r\n                        show={showCategoryRegistrationModal}\r\n                        onClose={handleCloseCategoryRegistrationModal}\r\n                    /> */}\r\n            </div>\r\n\r\n            <div className=\"item-list\">\r\n                {filteredItems.length > 0 ? (\r\n                    filteredItems.map((item: CategoryItem['items'][number]) => {\r\n                        return (\r\n                            <div className=\"item-card\" key={item.item_id}>\r\n                                <img src={item.logo_image} alt={item.item_name} className=\"item-image\" />\r\n                                <div className=\"item-details\">\r\n                                    <h3>{item.item_name}</h3>\r\n                                    <p>Price: {item.price}</p>\r\n                                    <p>Total Amount: 0</p>\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    <button\r\n                                        className=\"add-recipe-button\"\r\n                                        onClick={() => handleRecipe(business_id, item.item_id)}>\r\n                                        + Recipe\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button\r\n                                        className=\"edit-button\"\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}>\r\n                                        Edit\r\n                                    </button> */}\r\n                                    <FaRegEdit\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button className=\"delete-button\" onClick={() => handleDeleteItem(item.item_id)}>\r\n                                        Delete\r\n                                    </button> */}\r\n                                    <FaTrash\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', color: 'red' }}\r\n                                        onClick={() => handleItemDelete(item.item_id)}\r\n                                    />\r\n                                    <ConfirmDeleteModal\r\n                                        show={showItemDeleteModal}\r\n                                        onClose={() => setShowItemDeleteModal(false)}\r\n                                        onConfirm={confirmItemDelete}\r\n                                        title=\"Delete this Item\"\r\n                                        message=\"Are you sure you want to delete this Item? This action cannot be undone.\"\r\n                                    />\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[item.item_id] || false}\r\n                                    onChange={(checked) => handleItemToggle(item.item_id, checked)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <p className=\"no-items-message\">No items available</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ManageMenuWithBoundary: React.FC = () => (\r\n    <ErrorBoundary>\r\n        <ManageMenu />\r\n    </ErrorBoundary>\r\n);\r\n\r\nexport default ManageMenuWithBoundary;\r\n\r\n{\r\n    /* <Row>\r\n<Col md={6}>\r\n    <Form.Group>\r\n        <Form.Label>Item Order Type</Form.Label>\r\n        <div>\r\n            {['delivery', 'pick_up', 'dine_in', 'online'].map((type) => (\r\n                <Form.Check\r\n                    key={type}\r\n                    type=\"checkbox\"\r\n                    label={type.replace('_', ' ').toUpperCase()}\r\n                    name=\"available_order_type\"\r\n                    value={type}\r\n                    checked={formData.available_order_type.includes(type)}\r\n                    onChange={(e) => {\r\n                        const { value, checked } = e.target;\r\n                        const updatedOrderTypes = checked\r\n                            ? [...formData.available_order_type, value]\r\n                            : formData.available_order_type.filter((t) => t !== value);\r\n\r\n                        handleChange({\r\n                            target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                        } as any);\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n        {errors.available_order_type && (\r\n            <small className=\"text-danger\">{errors.available_order_type}</small>\r\n        )}\r\n    </Form.Group>\r\n</Col>\r\n</Row> */\r\n}\r\n","import React from 'react';\r\nimport './ManageMenu'; // Add styles for the switch\r\n\r\ninterface ToggleSwitchProps {\r\n    checked: boolean;\r\n    onChange?: (checked: boolean) => void; // ✅ Make onChange optional\r\n    label?: string;\r\n}\r\n\r\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange, label }) => {\r\n    return (\r\n        <label className=\"toggle-switch\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                onChange={(e) => onChange?.(e.target.checked)} // ✅ Use optional chaining\r\n            />\r\n            <span className=\"slider\"></span>\r\n            {label && <span className=\"switch-label\">{label}</span>}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { recipeAdd, recipeList, recipeIngredientList } from '../../../redux/actions';\r\nimport { RootState } from '../../../redux/store';\r\n\r\ninterface RegisterNewRecipeModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    business_id: string;\r\n    item_id: string;\r\n}\r\n\r\ninterface Ingredient {\r\n    ingredient_id: string;\r\n    name: string;\r\n}\r\n\r\ninterface SelectedIngredient {\r\n    ingredient_id: string;\r\n    quantity: number;\r\n    unit: string;\r\n}\r\n\r\nconst RegisterNewRecipeModal: React.FC<RegisterNewRecipeModalProps> = ({ show, onClose, business_id, item_id }) => {\r\n    const dispatch = useDispatch();\r\n    const ingredients = useSelector((state: RootState) => state.ingredient.ingredients || []);\r\n\r\n    const [preparationTime, setPreparationTime] = useState('');\r\n    const [cookingTime, setCookingTime] = useState('');\r\n    const [preparationType, setPreparationType] = useState('');\r\n    const [instructions, setInstructions] = useState('');\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [selectedIngredients, setSelectedIngredients] = useState<SelectedIngredient[]>([]);\r\n\r\n    // Fetch ingredients when modal opens\r\n    useEffect(() => {\r\n        if (show) {\r\n            dispatch(recipeIngredientList(business_id));\r\n        }\r\n    }, [show, dispatch, business_id]);\r\n\r\n    // Reset form when modal is closed\r\n    useEffect(() => {\r\n        if (!show) {\r\n            setPreparationTime('');\r\n            setCookingTime('');\r\n            setPreparationType('');\r\n            setInstructions('');\r\n            setIsActive(false);\r\n            setSelectedIngredients([]);\r\n        }\r\n    }, [show]);\r\n\r\n    // Handle multi-select ingredient selection\r\n    const handleIngredientChange = (e: React.ChangeEvent<EventTarget>) => {\r\n        const target = e.target as unknown as HTMLSelectElement; // 👈 Type assertion to HTMLSelectElement\r\n        const selectedIds = Array.from(target.selectedOptions, (option) => option.value);\r\n\r\n        const updatedIngredients = selectedIds.map((id) => ({\r\n            ingredient_id: id,\r\n            quantity: 1,\r\n            unit: 'g',\r\n        }));\r\n\r\n        setSelectedIngredients(updatedIngredients);\r\n    };\r\n\r\n    // Handle quantity change\r\n    const handleQuantityChange = (ingredient_id: string, value: number) => {\r\n        setSelectedIngredients(\r\n            selectedIngredients.map((ing) => (ing.ingredient_id === ingredient_id ? { ...ing, quantity: value } : ing))\r\n        );\r\n    };\r\n\r\n    // Handle unit change\r\n    const handleUnitChange = (ingredient_id: string, value: string) => {\r\n        setSelectedIngredients(\r\n            selectedIngredients.map((ing) => (ing.ingredient_id === ingredient_id ? { ...ing, unit: value } : ing))\r\n        );\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = () => {\r\n        const newRecipe = {\r\n            item_id,\r\n            business_id,\r\n            preparation_time: Number(preparationTime),\r\n            cooking_time: Number(cookingTime),\r\n            preparation_type: preparationType,\r\n            instructions,\r\n            is_active: isActive,\r\n            ingredients: selectedIngredients,\r\n        };\r\n\r\n        dispatch(recipeAdd(newRecipe));\r\n        setTimeout(() => {\r\n            dispatch(recipeList(business_id, item_id));\r\n            onClose();\r\n        }, 500);\r\n    };\r\n\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Register New Recipe</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Label>Preparation Time (minutes)</Form.Label>\r\n                        <Form.Control\r\n                            type=\"number\"\r\n                            value={preparationTime}\r\n                            onChange={(e) => setPreparationTime(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Cooking Time (minutes)</Form.Label>\r\n                        <Form.Control\r\n                            type=\"number\"\r\n                            value={cookingTime}\r\n                            onChange={(e) => setCookingTime(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Preparation Type</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            value={preparationType}\r\n                            onChange={(e) => setPreparationType(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Instructions</Form.Label>\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            value={instructions}\r\n                            onChange={(e) => setInstructions(e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\">\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            label=\"Is Active?\"\r\n                            checked={isActive}\r\n                            onChange={(e) => setIsActive(e.target.checked)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    {/* Multi-Select Ingredient List */}\r\n                    <Form.Group>\r\n                        <Form.Label>Select Ingredients</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            multiple\r\n                            onChange={(e: React.ChangeEvent<EventTarget>) => handleIngredientChange(e)}>\r\n                            {ingredients.map((ingredient: Ingredient) => (\r\n                                <option key={ingredient.ingredient_id} value={ingredient.ingredient_id}>\r\n                                    {ingredient.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    {/* Selected Ingredients List */}\r\n                    <div className=\"mt-3\">\r\n                        {selectedIngredients.map((ing) => (\r\n                            <div key={ing.ingredient_id} className=\"d-flex align-items-center mb-2\">\r\n                                <span className=\"me-3\">\r\n                                    {ingredients.find((i: Ingredient) => i.ingredient_id === ing.ingredient_id)?.name}\r\n                                </span>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    value={ing.quantity}\r\n                                    onChange={(e) => handleQuantityChange(ing.ingredient_id, Number(e.target.value))}\r\n                                    style={{ width: '80px', marginRight: '10px' }}\r\n                                />\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    value={ing.unit}\r\n                                    onChange={(e) => handleUnitChange(ing.ingredient_id, e.target.value)}\r\n                                    style={{ width: '80px' }}\r\n                                />\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    size=\"sm\"\r\n                                    onClick={() =>\r\n                                        setSelectedIngredients(\r\n                                            selectedIngredients.filter((i) => i.ingredient_id !== ing.ingredient_id)\r\n                                        )\r\n                                    }\r\n                                    className=\"ms-2\">\r\n                                    X\r\n                                </Button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={handleSubmit}>\r\n                    Add Recipe\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RegisterNewRecipeModal;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Modal, Button, Form } from 'react-bootstrap';\r\n// import { useDispatch } from 'react-redux';\r\n// import { recipeAdd, recipeList } from '../../../redux/actions';\r\n// import { useNavigate, useLocation } from 'react-router-dom';\r\n\r\n// interface RegisterNewRecipeModalProps {\r\n//     show: boolean;\r\n//     onClose: () => void;\r\n//     business_id: string;\r\n//     item_id: string;\r\n// }\r\n\r\n// interface Ingredient {\r\n//     ingredient_id: string;\r\n//     quantity: number;\r\n//     unit: string;\r\n// }\r\n\r\n// interface AddRecipe {\r\n//     item_id: string;\r\n//     business_id: string;\r\n//     preparation_time: number;\r\n//     cooking_time: number;\r\n//     preparation_type: string;\r\n//     instructions: string;\r\n//     is_active: boolean;\r\n//     ingredients: Ingredient[];\r\n// }\r\n\r\n// const RegisterNewRecipeModal: React.FC<RegisterNewRecipeModalProps> = ({ show, onClose, business_id, item_id }) => {\r\n//     const location = useLocation();\r\n//     // const item_id = location.state?.item_id;\r\n\r\n//     const [preparationTime, setPreparationTime] = useState('');\r\n//     const [cookingTime, setCookingTime] = useState('');\r\n//     const [preparationType, setPreparationType] = useState('');\r\n//     const [instructions, setInstructions] = useState('');\r\n//     const [isActive, setIsActive] = useState(false);\r\n\r\n//     const dispatch = useDispatch();\r\n\r\n//     useEffect(() => {\r\n//         if (!show) {\r\n//             setPreparationTime('');\r\n//             setCookingTime('');\r\n//             setPreparationType('');\r\n//             setInstructions('');\r\n//             setIsActive(false);\r\n//         }\r\n//     }, [show]);\r\n\r\n//     const handleSubmit = () => {\r\n//         const newRecipe: AddRecipe = {\r\n//             item_id: item_id, // Replace with actual item ID\r\n//             business_id: business_id,\r\n//             preparation_time: Number(preparationTime), // Convert string to number\r\n//             cooking_time: Number(cookingTime), // Convert string to number\r\n//             preparation_type: preparationType,\r\n//             instructions: instructions,\r\n//             is_active: isActive,\r\n//             ingredients: [\r\n//                 { ingredient_id: '30a182cd-f875-46fb-95f1-3e6cace51a1b', quantity: 1, unit: 'gm' }, // Corrected\r\n//             ],\r\n//         };\r\n\r\n//         dispatch(recipeAdd(newRecipe));\r\n//         // setTimeout(() => {dispatch(recipeList(business_id));\r\n//         setTimeout(() => {\r\n//             dispatch(recipeList(business_id));\r\n\r\n//             setPreparationTime('');\r\n//             setCookingTime('');\r\n//             setPreparationType('');\r\n//             setInstructions('');\r\n//             setIsActive(false);\r\n\r\n//             onClose();\r\n//         }, 500);\r\n\r\n//         onClose(); // Close modal after submitting\r\n//     };\r\n\r\n//     return (\r\n//         <Modal show={show} onHide={onClose} centered>\r\n//             <Modal.Header closeButton>\r\n//                 <Modal.Title>Register New Recipe</Modal.Title>\r\n//             </Modal.Header>\r\n//             <Modal.Body>\r\n//                 <Form>\r\n//                     <Form.Group>\r\n//                         <Form.Label>Preparation Time (minutes)</Form.Label>\r\n//                         <Form.Control\r\n//                             type=\"number\"\r\n//                             value={preparationTime}\r\n//                             onChange={(e) => setPreparationTime(e.target.value)}\r\n//                         />\r\n//                     </Form.Group>\r\n\r\n//                     <Form.Group>\r\n//                         <Form.Label>Cooking Time (minutes)</Form.Label>\r\n//                         <Form.Control\r\n//                             type=\"number\"\r\n//                             value={cookingTime}\r\n//                             onChange={(e) => setCookingTime(e.target.value)}\r\n//                         />\r\n//                     </Form.Group>\r\n\r\n//                     <Form.Group>\r\n//                         <Form.Label>Preparation Type</Form.Label>\r\n//                         <Form.Control\r\n//                             type=\"text\"\r\n//                             value={preparationType}\r\n//                             onChange={(e) => setPreparationType(e.target.value)}\r\n//                         />\r\n//                     </Form.Group>\r\n\r\n//                     <Form.Group>\r\n//                         <Form.Label>Instructions</Form.Label>\r\n//                         <Form.Control\r\n//                             as=\"textarea\"\r\n//                             value={instructions}\r\n//                             onChange={(e) => setInstructions(e.target.value)}\r\n//                         />\r\n//                     </Form.Group>\r\n\r\n//                     <Form.Group className=\"mb-3\">\r\n//                         <Form.Check\r\n//                             type=\"checkbox\"\r\n//                             label=\"Is Active?\"\r\n//                             checked={isActive}\r\n//                             onChange={(e) => setIsActive(e.target.checked)}\r\n//                         />\r\n//                     </Form.Group>\r\n//                 </Form>\r\n//             </Modal.Body>\r\n//             <Modal.Footer>\r\n//                 <Button variant=\"secondary\" onClick={onClose}>\r\n//                     Cancel\r\n//                 </Button>\r\n//                 <Button variant=\"primary\" onClick={handleSubmit}>\r\n//                     Add Recipe\r\n//                 </Button>\r\n//             </Modal.Footer>\r\n//         </Modal>\r\n//     );\r\n// };\r\n\r\n// export default RegisterNewRecipeModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Card, Table, Button, Modal, Form } from 'react-bootstrap';\r\nimport { useRedux } from '../../../hooks';\r\nimport {\r\n    recipeIngredientList,\r\n    recipeIngredientAdd,\r\n    recipeIngredientDelete,\r\n    recipeList,\r\n    recipeAdd,\r\n    recipeIngredientUpdateStatus,\r\n} from '../../../redux/actions';\r\nimport { RootState } from '../../../redux/store';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport ToggleSwitch from '../MenuManagement/ToggleSwitch';\r\nimport RegisterNewRecipeModal from './RegisterNewRecipe';\r\n\r\ninterface IngredientList {\r\n    business_id: string;\r\n    ingredient_id: string;\r\n    ingredient_name: string;\r\n    is_active: boolean;\r\n}\r\n\r\nconst Recipe = () => {\r\n    const { dispatch, appSelector } = useRedux();\r\n    const location = useLocation();\r\n    const item_id = location.state?.item_id;\r\n    const [showRecipeModal, setShowRecipeModal] = useState(false);\r\n    const ingredients = appSelector((state: RootState) => state.ingredient?.ingredients || []);\r\n    console.log('ingredients>>>>>', ingredients);\r\n\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [message, setMessage] = useState<string>('');\r\n\r\n    const business_id = location.state?.business_id;\r\n\r\n    console.log('business_id', business_id);\r\n    console.log('item_id', item_id);\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            console.log('Dispatching recipeIngredientList and recipeList');\r\n            dispatch(recipeIngredientList(business_id));\r\n            console.log('Dispatching recipeList with business_id:', business_id);\r\n            dispatch(recipeList(business_id, item_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    const handleDeleteIngredient = (ingredient_id: string) => {\r\n        const confirmDeleteIngredient = window.confirm('Are you sure you want to delete this Ingredient?');\r\n        if (confirmDeleteIngredient) {\r\n            console.log('Ingredient ID: ', ingredient_id);\r\n            dispatch(recipeIngredientDelete(ingredient_id));\r\n            setMessage('Ingredient deleted');\r\n        }\r\n    };\r\n\r\n    const ingredientUpdateToggle = (ingredient_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [ingredient_id]: is_active,\r\n        }));\r\n\r\n        dispatch(recipeIngredientUpdateStatus(ingredient_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(recipeIngredientList(business_id));\r\n        }, 500);\r\n    };\r\n\r\n    const handleAddRecipe = () => {\r\n        console.log('RECIPE ADD CLICKED');\r\n        if (!showRecipeModal) {\r\n            setShowRecipeModal(true);\r\n        }\r\n    };\r\n\r\n    const handleCloseRecipeModal = () => {\r\n        console.log('CloseRecipeModal');\r\n        setShowRecipeModal(false);\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Body>\r\n                <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                    <h4 className=\"header-title\">Ingredient List</h4>\r\n                    <Button variant=\"primary\" onClick={handleAddRecipe}>\r\n                        Add New Recipe\r\n                    </Button>\r\n                    <RegisterNewRecipeModal\r\n                        show={showRecipeModal}\r\n                        onClose={handleCloseRecipeModal}\r\n                        business_id={business_id}\r\n                        item_id={item_id}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"table-responsive\">\r\n                    <Table className=\"mb-0\">\r\n                        <thead>\r\n                            <tr>\r\n                                {/* <th>Preparation Time</th>\r\n                                <th>Cooking Time</th>\r\n                                <th>Preparation Type</th>\r\n                                <th>Instructions</th>\r\n                                <th>Is Active?</th>\r\n                                <th>Ingredients</th> */}\r\n\r\n                                <th>Name</th>\r\n                                <th>Is Active?</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {ingredients.length > 0 ? (\r\n                                ingredients.map((ingredient: IngredientList) => (\r\n                                    <tr key={ingredient.ingredient_id}>\r\n                                        <td>{ingredient.ingredient_name}</td>\r\n                                        <td>\r\n                                            {/* <ToggleSwitch checked={ingredient.is_active} /> */}\r\n                                            <ToggleSwitch\r\n                                                checked={toggleStates[ingredient.ingredient_id] ?? ingredient.is_active}\r\n                                                onChange={(checked) =>\r\n                                                    ingredientUpdateToggle(ingredient.ingredient_id, checked)\r\n                                                }\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            <FaRegEdit size={20} style={{ cursor: 'pointer', marginRight: '10px' }} />\r\n                                            <FaTrash\r\n                                                size={20}\r\n                                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                                onClick={() => handleDeleteIngredient(ingredient.ingredient_id)}\r\n                                            />\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                            ) : (\r\n                                <tr>\r\n                                    <td colSpan={3} className=\"text-center\">\r\n                                        No ingredients found\r\n                                    </td>\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Recipe;\r\n","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-striped`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}"],"names":["show","onClose","onConfirm","title","message","onHide","centered","closeButton","variant","onClick","ErrorBoundary","state","hasError","error","errorInfo","console","this","props","children","React","ManageMenu","business_id","useLocation","useRedux","dispatch","appSelector","useState","toggleStates","setToggleStates","setMessage","categories","category","selectedCategoryId","setSelectedCategoryId","categoryDelete","setCategoryDelete","showCategoryDeleteModal","setShowCategoryDeleteModal","itemDelete","setItemDelete","showItemDeleteModal","setShowItemDeleteModal","navigate","useNavigate","useEffect","categoryItemList","length","category_id","initialToggleStates","forEach","is_active","items","item","item_id","confirmItemDelete","deleteItem","setTimeout","confirmCategoryDelete","deleteCategory","filteredItems","filter","flatMap","log","className","map","src","logo_image","alt","category_name","e","stopPropagation","ToggleSwitch","checked","onChange","prev","categoryUpdateIsActive","size","style","cursor","marginRight","color","item_name","price","handleRecipe","itemUpdateIsActive","label","type","target","useDispatch","ingredients","useSelector","ingredient","preparationTime","setPreparationTime","cookingTime","setCookingTime","preparationType","setPreparationType","instructions","setInstructions","isActive","setIsActive","selectedIngredients","setSelectedIngredients","recipeIngredientList","Modal","Form","value","as","multiple","updatedIngredients","Array","from","selectedOptions","option","id","ingredient_id","quantity","unit","handleIngredientChange","name","ing","find","i","Number","width","Button","newRecipe","preparation_time","cooking_time","preparation_type","recipeAdd","recipeList","location","showRecipeModal","setShowRecipeModal","Card","RegisterNewRecipe","Table","ingredient_name","recipeIngredientUpdateStatus","window","confirm","recipeIngredientDelete","colSpan","toFnRef","ref","current","refA","refB","useMemo","a","b","mergeRefs","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","striped","bordered","borderless","hover","responsive","decoratedBsPrefix","classes","table","responsiveClass","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix"],"sourceRoot":""}