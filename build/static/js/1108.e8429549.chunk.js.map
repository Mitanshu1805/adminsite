{"version":3,"file":"static/js/1108.e8429549.chunk.js","mappings":"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","sources":["hooks/useMultistepForm.ts","pages/apps/MenuManagement/EditItemStep1.tsx","pages/apps/MenuManagement/EditItemStep2.tsx","pages/apps/MenuManagement/EditItemStep3.tsx","pages/apps/MenuManagement/EditItem.tsx","../node_modules/react-bootstrap/esm/Alert.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/Fade.js"],"sourcesContent":["import { ReactElement, useState } from 'react';\r\nimport { isLabeledStatement } from 'typescript';\r\n\r\nexport function useMultistepForm(steps: ReactElement[]) {\r\n    const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n\r\n    function next() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i >= steps.length - 1) return i;\r\n            return i + 1;\r\n        });\r\n    }\r\n\r\n    function back() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i <= 0) return i;\r\n            return i - 1;\r\n        });\r\n    }\r\n\r\n    function goTo(index: number) {\r\n        setCurrentStepIndex(index);\r\n    }\r\n\r\n    return {\r\n        currentStepIndex,\r\n        step: steps[currentStepIndex],\r\n        steps,\r\n        isFirstStep: currentStepIndex === 0,\r\n        isLastStep: currentStepIndex === steps.length - 1,\r\n        goTo,\r\n        next,\r\n        back,\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col, Alert } from 'react-bootstrap';\r\n\r\ninterface CategoryItem {\r\n    selectedCategoryId: string;\r\n    item_id: string;\r\n    item_names: {\r\n        hindi: string;\r\n        english: string;\r\n        gujarati: string;\r\n    };\r\n    price: number;\r\n    dietary: string;\r\n    available_order_type: string[];\r\n    online_display_name: string;\r\n    description: string;\r\n    gst_type: string;\r\n    category_id: string;\r\n    business_id: string;\r\n    logo_image?: File;\r\n    swiggy_image?: File;\r\n    banner_image?: File;\r\n    is_loose: boolean;\r\n    quantity_type: string;\r\n    quantity_params: string;\r\n    quantity_value: number;\r\n    outlets: Outlet[];\r\n    outlet_prices: { outlet_id: string; price: number }[];\r\n}\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    price: number;\r\n    // sequence_no: number;\r\n    // disable_until: string | null;\r\n}\r\n\r\ninterface Category {\r\n    category_id: string;\r\n    category_name: string;\r\n    items: CategoryItem[];\r\n}\r\n\r\ninterface EditItemStep1Props {\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    editItem: CategoryItem | null;\r\n    setEditItem: React.Dispatch<React.SetStateAction<CategoryItem | null>>;\r\n    message: string;\r\n    handleInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;\r\n}\r\n\r\nconst EditItemStep1: React.FC<EditItemStep1Props> = ({\r\n    editItem,\r\n    setEditItem,\r\n    handleSubmit,\r\n    message,\r\n    handleInputChange,\r\n}) => {\r\n    if (!editItem) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>, field: keyof CategoryItem) => {\r\n        const file = e.target.files?.[0];\r\n        if (file) {\r\n            setEditItem({\r\n                ...editItem!,\r\n                [field]: file,\r\n            });\r\n        }\r\n    };\r\n\r\n    // const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     const { name, value } = e.target;\r\n\r\n    //     setEditItem((prev) => {\r\n    //         const updateItem = prev\r\n    //             ? {\r\n    //                   ...prev,\r\n    //                   item_names: {\r\n    //                       ...prev.item_names,\r\n    //                       [name]: value,\r\n    //                   },\r\n    //               }\r\n    //             : null;\r\n\r\n    //         return updateItem;\r\n    //     });\r\n    // };\r\n    return (\r\n        <Container className=\"register-item-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Edit Item\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Menu Image</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"file\"\r\n                                    name=\"logo_image\"\r\n                                    onChange={(e) => {\r\n                                        const file = (e.target as HTMLInputElement).files?.[0];\r\n                                        if (file) {\r\n                                            setEditItem({\r\n                                                ...editItem!,\r\n                                                logo_image: file,\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Swiggy Image</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"file\"\r\n                                    name=\"swiggy_image\"\r\n                                    onChange={(e) => {\r\n                                        const file = (e.target as HTMLInputElement).files?.[0];\r\n                                        if (file) {\r\n                                            setEditItem({\r\n                                                ...editItem!,\r\n                                                swiggy_image: file,\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Banner Image</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"file\"\r\n                                    name=\"banner_image\"\r\n                                    onChange={(e) => {\r\n                                        const file = (e.target as HTMLInputElement).files?.[0];\r\n                                        if (file) {\r\n                                            setEditItem({\r\n                                                ...editItem!,\r\n                                                banner_image: file,\r\n                                            });\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Name (English)</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"english\"\r\n                                    value={editItem?.item_names.english || ''}\r\n                                    onChange={handleInputChange}\r\n                                    required\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Name (Hindi)</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"hindi\"\r\n                                    value={editItem?.item_names.hindi}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Name (Gujarati)</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"gujarati\"\r\n                                    value={editItem?.item_names.gujarati}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                label=\"Loose Quantity\"\r\n                                name=\"is_loose\"\r\n                                checked={formData.is_loose}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </Col>\r\n                    </Row> */}\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Label>Online Display Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"online_display_name\"\r\n                                value={editItem?.online_display_name}\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <Form.Label>Item Description</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"description\"\r\n                                value={editItem?.description}\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Check\r\n                                    type=\"checkbox\"\r\n                                    label=\"Loose Quantity\"\r\n                                    name=\"is_loose\"\r\n                                    checked={editItem.is_loose}\r\n                                    onChange={(e) =>\r\n                                        setEditItem({\r\n                                            ...editItem!,\r\n                                            is_loose: e.target.checked,\r\n                                            quantity_type: e.target.checked ? editItem.quantity_type : '', // Reset quantity type if unchecked\r\n                                            quantity_value: e.target.checked ? editItem.quantity_value : 0, // Reset value if unchecked\r\n                                            quantity_params: e.target.checked ? editItem.quantity_params : '', // Reset params if unchecked\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* If Loose Quantity is checked, show Quantity Type and Quantity Details */}\r\n                    {editItem.is_loose && (\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Quantity Type</Form.Label>\r\n                                <Form.Select\r\n                                    name=\"quantity_type\"\r\n                                    value={editItem.quantity_type}\r\n                                    onChange={handleInputChange}>\r\n                                    <option value=\"\">Select Quantity Type</option>\r\n                                    <option value=\"piece\">Piece</option>\r\n                                    <option value=\"weight\">Weight</option>\r\n                                    <option value=\"volume\">Volume</option>\r\n                                </Form.Select>\r\n                            </Col>\r\n\r\n                            {/* Show Quantity Value Input */}\r\n                            {editItem.quantity_type && (\r\n                                <Col md={6}>\r\n                                    <Form.Label>Quantity Value</Form.Label>\r\n                                    <Row>\r\n                                        <Col md={7}>\r\n                                            <Form.Control\r\n                                                type=\"number\"\r\n                                                name=\"quantity_value\"\r\n                                                value={editItem.quantity_value}\r\n                                                onChange={handleInputChange}\r\n                                                min=\"0\"\r\n                                            />\r\n                                        </Col>\r\n                                        {/* Show Unit Selector for Weight & Volume */}\r\n                                        {editItem.quantity_type !== 'piece' && (\r\n                                            <Col md={5}>\r\n                                                <Form.Select\r\n                                                    name=\"quantity_params\"\r\n                                                    value={editItem.quantity_params}\r\n                                                    onChange={handleInputChange}>\r\n                                                    <option value=\"\">Select Unit</option>\r\n                                                    {editItem.quantity_type === 'weight' ? (\r\n                                                        <>\r\n                                                            <option value=\"gm\">gm</option>\r\n                                                            <option value=\"kg\">kg</option>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <option value=\"ml\">ml</option>\r\n                                                            <option value=\"lt\">lt</option>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Form.Select>\r\n                                            </Col>\r\n                                        )}\r\n                                    </Row>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                    )}\r\n\r\n                    {/* {formData.is_loose && (\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Quantity Type</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"quantity_type\"\r\n                                    value={formData.quantity_type}\r\n                                    onChange={handleChange}>\r\n                                    <option value=\"\">Select Quantity Type</option>\r\n                                    <option value=\"piece\">Piece</option>\r\n                                    <option value=\"weight\">Weight</option>\r\n                                    <option value=\"volume\">Volume</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            {formData.quantity_type && (\r\n                                <Col md={6}>\r\n                                    <Form.Label>Quantity Value</Form.Label>\r\n                                    <Row>\r\n                                        <Col md={7}>\r\n                                            <Form.Control\r\n                                                type=\"number\"\r\n                                                name=\"quantity_value\"\r\n                                                value={formData.quantity_value}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </Col>\r\n                                        {formData.quantity_type !== 'piece' && (\r\n                                            <Col md={5}>\r\n                                                <Form.Select\r\n                                                    name=\"quantity_unit\"\r\n                                                    value={formData.quantity_unit}\r\n                                                    onChange={handleChange}>\r\n                                                    <option value=\"\">Select Unit</option>\r\n                                                    {formData.quantity_type === 'weight' ? (\r\n                                                        <>\r\n                                                            <option value=\"gm\">gm</option>\r\n                                                            <option value=\"kg\">kg</option>\r\n                                                        </>\r\n                                                    ) : (\r\n                                                        <>\r\n                                                            <option value=\"ml\">ml</option>\r\n                                                            <option value=\"lt\">lt</option>\r\n                                                        </>\r\n                                                    )}\r\n                                                </Form.Select>\r\n                                            </Col>\r\n                                        )}\r\n                                    </Row>\r\n                                </Col>\r\n                            )}\r\n                        </Row>\r\n                    )} */}\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Label>Dietary Type</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                name=\"dietary\"\r\n                                value={editItem?.dietary}\r\n                                onChange={handleInputChange}>\r\n                                <option value=\"\">Select Dietary Type</option>\r\n                                <option value=\"veg\">Veg</option>\r\n                                <option value=\"non-veg\">Non-Veg</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <Form.Label>GST Type</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                name=\"gst_type\"\r\n                                value={editItem?.gst_type}\r\n                                onChange={handleInputChange}>\r\n                                <option value=\"\">Select GST Type</option>\r\n                                <option value=\"goods\">Goods</option>\r\n                                <option value=\"services\">Services</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EditItemStep1;\r\n\r\n{\r\n    /* <div className=\"edit-item-page\">\r\n            <h2>Edit Item</h2>\r\n            {message && <p>{message}</p>}\r\n            {editItem ? (\r\n                <div>\r\n                    <div>\r\n                        <label>Upload Logo Image</label>\r\n                        {editItem?.logo_image && editItem.logo_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.logo_image)}\r\n                                    alt=\"Logo Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        logo_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Upload Swiggy Image</label>\r\n                        {editItem?.swiggy_image && editItem.swiggy_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.swiggy_image)}\r\n                                    alt=\"Swiggy Image Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        swiggy_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Upload Banner Image</label>\r\n                        {editItem?.banner_image && editItem.banner_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.banner_image)}\r\n                                    alt=\"Banner Image Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        banner_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Item Name (English)</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.english}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, english: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Item Name (Hindi):</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.hindi}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, hindi: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Item Name (Gujarati):</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.gujarati}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, gujarati: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Online Display Name:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.online_display_name}\r\n                            onChange={(e) => setEditItem({ ...editItem, online_display_name: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Price:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={editItem.price}\r\n                            onChange={(e) => setEditItem({ ...editItem, price: parseFloat(e.target.value) })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Description:</label>\r\n                        <input\r\n                            value={editItem.description}\r\n                            onChange={(e) => setEditItem({ ...editItem, description: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Dietary:</label>\r\n                        <select\r\n                            value={editItem.dietary}\r\n                            onChange={(e) => setEditItem({ ...editItem, dietary: e.target.value })}>\r\n                            <option value=\"veg\">Veg</option>\r\n                            <option value=\"non-veg\">Non-Veg</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Available Order Types:</label>\r\n                        <select\r\n                            multiple\r\n                            value={editItem.available_order_type}\r\n                            onChange={(e) => {\r\n                                const selectedOptions = Array.from(e.target.selectedOptions, (option) => option.value);\r\n                                setEditItem({ ...editItem, available_order_type: selectedOptions });\r\n                            }}>\r\n                            <option value=\"dine_in\">Dine In</option>\r\n                            <option value=\"take_away\">Take Away</option>\r\n                            <option value=\"delivery\">Delivery</option>\r\n                            <option value=\"pickup\">Pickup</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>GST Type:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.gst_type}\r\n                            onChange={(e) => setEditItem({ ...editItem, gst_type: e.target.value })}\r\n                        />\r\n                        <select\r\n                            value={editItem.gst_type}\r\n                            onChange={(e) => setEditItem({ ...editItem, gst_type: e.target.value })}>\r\n                            {' '}\r\n                            <option value=\"goods\">Goods</option>\r\n                            <option value=\"services\">Services</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Is Loose:</label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={editItem.is_loose}\r\n                            onChange={(e) => setEditItem({ ...editItem, is_loose: e.target.checked })}\r\n                        />\r\n                    </div>\r\n\r\n                    {editItem.is_loose && (\r\n                        <div>\r\n                            <div>\r\n                                <label>Quantity Type:</label>\r\n                                <select\r\n                                    value={editItem.quantity_type}\r\n                                    onChange={(e) => setEditItem({ ...editItem, quantity_type: e.target.value })}>\r\n                                    <option value=\"piece\">Piece</option>\r\n                                    <option value=\"weight\">Weight</option>\r\n                                    <option value=\"volume\">Volume</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            {editItem.quantity_type === 'piece' && (\r\n                                <div>\r\n                                    <label>Quantity (Piece):</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={editItem.quantity_value}\r\n                                        onChange={(e) =>\r\n                                            setEditItem({ ...editItem, quantity_value: parseFloat(e.target.value) })\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {(editItem.quantity_type === 'weight' || editItem.quantity_type === 'volume') && (\r\n                                <div>\r\n                                    <div>\r\n                                        <label>Quantity Params:</label>\r\n                                        <select\r\n                                            value={editItem.quantity_params}\r\n                                            onChange={(e) =>\r\n                                                setEditItem({ ...editItem, quantity_params: e.target.value })\r\n                                            }>\r\n                                            {editItem.quantity_type === 'weight' && (\r\n                                                <>\r\n                                                    <option value=\"gm\">GM</option>\r\n                                                    <option value=\"kg\">KG</option>\r\n                                                </>\r\n                                            )}\r\n                                            {editItem.quantity_type === 'volume' && (\r\n                                                <>\r\n                                                    <option value=\"m\">M</option>\r\n                                                    <option value=\"lt\">LT</option>\r\n                                                </>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label>Quantity Value:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={editItem.quantity_value}\r\n                                            onChange={(e) =>\r\n                                                setEditItem({ ...editItem, quantity_value: parseFloat(e.target.value) })\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button onClick={handleSubmit}>Save Changes</button>\r\n                </div>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div> */\r\n}\r\n","// import React, { useEffect, useState } from 'react';\r\n// import { useParams, useLocation } from 'react-router-dom';\r\n// import { useRedux } from '../../../hooks';\r\n// import { RootState } from '../../../redux/store';\r\n// import { businessList } from '../../../redux/business/actions';\r\n// import './ManageMenu.css';\r\n// import { categoryItemList } from '../../../redux/actions';\r\n\r\n// interface Outlet {\r\n//     outlet_id: string;\r\n//     outlet_name: string;\r\n//     price: number;\r\n// }\r\n\r\n// interface Business {\r\n//     business_id: string;\r\n//     business_name: string;\r\n//     // outlets: Outlet[];\r\n// }\r\n\r\n// interface Item {\r\n//     item_id: string;\r\n//     item_name: string;\r\n//     // outlets: Outlet[];\r\n// }\r\n\r\n// interface Category {\r\n//     category_id: string;\r\n//     category_name: string;\r\n//     items: Item[];\r\n// }\r\n\r\n// interface EditItemStep2Props {\r\n//     selectedOutlets: Outlet[];\r\n//     setSelectedOutlets: React.Dispatch<React.SetStateAction<Outlet[]>>;\r\n// }\r\n\r\n// const EditItemStep2: React.FC<EditItemStep2Props> = ({ selectedOutlets, setSelectedOutlets }) => {\r\n//     const location = useLocation();\r\n//     const business_id = location.state?.business_id;\r\n//     const item_id = location.state?.item_id;\r\n//     const category_id = location.state?.category_id;\r\n//     const { dispatch, appSelector } = useRedux();\r\n//     // const [selectedOutlets, setSelectedOutlets] = useState<Outlet[]>([]);\r\n//     const businesses = appSelector((state: RootState) => state.business.businesses || []);\r\n//     const [allOutlets, setAllOutlets] = useState<Outlet[]>([]);\r\n\r\n//     const categories = appSelector((state: RootState) => state.category.categories || []);\r\n\r\n//     console.log('Business ID: ', business_id);\r\n//     console.log('Category ID: ', category_id);\r\n//     console.log('Item ID: ', item_id);\r\n//     // useEffect(() => {\r\n//     //     dispatch(businessList()); // Fetch all businesses with their outlets\r\n//     // }, [dispatch]);\r\n//     useEffect(() => {\r\n//         if (business_id) {\r\n//             dispatch(categoryItemList(business_id));\r\n//             dispatch(businessList());\r\n//         }\r\n//     }, [dispatch, business_id]);\r\n\r\n//     useEffect(() => {\r\n//         const business = businesses.find((biz: Business) => biz.business_id === business_id);\r\n//         if (business) {\r\n//             setAllOutlets(business.outlets);\r\n//         }\r\n//     }, [businesses, business_id]);\r\n\r\n//     // Find the matching category\r\n//     const category = categories.find((cat: Category) => cat.category_id === category_id);\r\n\r\n//     // Find the matching item inside the category\r\n//     const item = category?.items?.find((itm: Item) => itm.item_id === item_id);\r\n\r\n//     useEffect(() => {\r\n//         if (item) {\r\n//             // Preselect outlets that are part of item.outlets from allOutlets\r\n//             const preselectedOutlets = allOutlets.filter((outlet) =>\r\n//                 item.outlets.some((itemOutlet: Outlet) => itemOutlet.outlet_id === outlet.outlet_id)\r\n//             );\r\n//             setSelectedOutlets(preselectedOutlets); // Set the selected outlets\r\n//         }\r\n//     }, [item, allOutlets]); // Trigger this effect when item or allOutlets change\r\n\r\n//     const toggleOutletSelection = (outlet: Outlet) => {\r\n//         setSelectedOutlets((prevSelected) =>\r\n//             prevSelected.some((o) => o.outlet_id === outlet.outlet_id)\r\n//                 ? prevSelected.filter((o) => o.outlet_id !== outlet.outlet_id)\r\n//                 : [...prevSelected, outlet]\r\n//         );\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <h3 className=\"title\">Select Outlets</h3>\r\n//             {allOutlets.length > 0 ? (\r\n//                 <div className=\"outlet-list\">\r\n//                     {allOutlets.map((outlet: Outlet) => (\r\n//                         <div\r\n//                             key={outlet.outlet_id}\r\n//                             className={`outlet-item ${\r\n//                                 selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id) ? 'selected' : ''\r\n//                             }`}\r\n//                             onClick={() => toggleOutletSelection(outlet)}>\r\n//                             <input\r\n//                                 type=\"checkbox\"\r\n//                                 checked={selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id)}\r\n//                                 className=\"checkbox\"\r\n//                             />\r\n//                             <span className=\"outlet-name\">{outlet.outlet_name}</span>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             ) : (\r\n//                 <p>No outlets available for this business.</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default EditItemStep2;\r\n\r\n// ok done, now i dont want this, this is just my approach, i want to show the total outlet lists of the particular business and then from that list, i want to preselect the outlets which we have accessed above .\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useRedux } from '../../../hooks';\r\nimport { RootState } from '../../../redux/store';\r\nimport { businessList } from '../../../redux/business/actions';\r\nimport { categoryItemList } from '../../../redux/menuManagementCategory/actions'; // Ensure correct import\r\nimport './ManageMenu.css';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    price: number;\r\n}\r\n\r\ninterface Business {\r\n    business_id: string;\r\n    business_name: string;\r\n    outlets: Outlet[];\r\n}\r\n\r\ninterface Item {\r\n    item_id: string;\r\n    item_name: string;\r\n    outlets: Outlet[];\r\n}\r\n\r\ninterface Category {\r\n    category_id: string;\r\n    category_name: string;\r\n    items: Item[];\r\n    outlets: string[]; // Array of outlet IDs belonging to this category\r\n}\r\n\r\ninterface EditItemStep2Props {\r\n    selectedOutlets: Outlet[];\r\n    setSelectedOutlets: React.Dispatch<React.SetStateAction<Outlet[]>>;\r\n}\r\n\r\nconst EditItemStep2: React.FC<EditItemStep2Props> = ({ selectedOutlets, setSelectedOutlets }) => {\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n    const category_id = location.state?.category_id;\r\n    const item_id = location.state?.item_id;\r\n    const { dispatch, appSelector } = useRedux();\r\n\r\n    // Fetch businesses and categories from Redux\r\n    const businesses = appSelector((state: RootState) => state.business.businesses || []);\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n\r\n    // Find business and category from Redux state\r\n    const business = businesses.find((biz: Business) => biz.business_id === business_id);\r\n    const category = categories.find((cat: Category) => cat.category_id === category_id);\r\n    const item = category?.items.find((itm: Item) => itm.item_id === item_id);\r\n\r\n    // Fetch data if not available\r\n    useEffect(() => {\r\n        if (!category) {\r\n            dispatch(categoryItemList(business_id, category_id));\r\n        }\r\n        if (!business) {\r\n            dispatch(businessList());\r\n        }\r\n    }, [dispatch, business, category, business_id, category_id]);\r\n\r\n    // Filter only category-specific outlets from business outlets\r\n    const categoryOutlets =\r\n        business?.outlets.filter((outlet: Outlet) => category?.outlets.includes(outlet.outlet_id)) || [];\r\n\r\n    // Set preselected outlets from item\r\n    useEffect(() => {\r\n        if (item) {\r\n            const preselectedOutlets = categoryOutlets.filter((outlet: Outlet) =>\r\n                item.outlets.some((itemOutlet: Outlet) => itemOutlet.outlet_id === outlet.outlet_id)\r\n            );\r\n            setSelectedOutlets(preselectedOutlets);\r\n        }\r\n    }, [item, categoryOutlets]);\r\n\r\n    const toggleOutletSelection = (outlet: Outlet) => {\r\n        setSelectedOutlets((prevSelected) =>\r\n            prevSelected.some((o) => o.outlet_id === outlet.outlet_id)\r\n                ? prevSelected.filter((o) => o.outlet_id !== outlet.outlet_id)\r\n                : [...prevSelected, outlet]\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"title\">Select Outlets</h3>\r\n            {categoryOutlets.length > 0 ? (\r\n                <div className=\"outlet-list\">\r\n                    {categoryOutlets.map((outlet: Outlet) => (\r\n                        <div\r\n                            key={outlet.outlet_id}\r\n                            className={`outlet-item ${\r\n                                selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id) ? 'selected' : ''\r\n                            }`}\r\n                            onClick={() => toggleOutletSelection(outlet)}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id)}\r\n                                className=\"checkbox\"\r\n                                readOnly\r\n                            />\r\n                            <span className=\"outlet-name\">{outlet.outlet_name}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <p>No outlets available for this Category.</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditItemStep2;\r\n","import React from 'react';\r\nimport { Card, Row, Col, Form, Container, Button } from 'react-bootstrap';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    price: number;\r\n}\r\n\r\ninterface OutletPrice {\r\n    outlet_id: string;\r\n    price: number;\r\n    outlet_name: string;\r\n}\r\n\r\ninterface CategoryItem {\r\n    selectedCategoryId: string;\r\n    item_id: string;\r\n    item_names: {\r\n        hindi: string;\r\n        english: string;\r\n        gujarati: string;\r\n    };\r\n    price: number;\r\n    dietary: string;\r\n    available_order_type: string[];\r\n    online_display_name: string;\r\n    description: string;\r\n    gst_type: string;\r\n    category_id: string;\r\n    business_id: string;\r\n    logo_image?: File;\r\n    swiggy_image?: File;\r\n    banner_image?: File;\r\n    is_loose: boolean;\r\n    quantity_type: string;\r\n    quantity_params: string;\r\n    quantity_value: number;\r\n    outlets: Outlet[];\r\n    outlet_prices: { outlet_id: string; price: number }[];\r\n}\r\n\r\ninterface EditItemStep3Props {\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    editItem: CategoryItem | null;\r\n    setEditItem: React.Dispatch<React.SetStateAction<CategoryItem | null>>;\r\n    message: string;\r\n    selectedOutlets: Outlet[];\r\n}\r\n\r\nconst EditItemStep3: React.FC<EditItemStep3Props> = ({\r\n    editItem,\r\n    setEditItem,\r\n    handleSubmit,\r\n    message,\r\n    selectedOutlets,\r\n}) => {\r\n    if (!editItem) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    const outletPrices = editItem.outlet_prices ?? [];\r\n\r\n    const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>, outletId: string) => {\r\n        const newPrice = parseFloat(e.target.value);\r\n        if (newPrice < 0 || isNaN(newPrice)) {\r\n            return;\r\n        }\r\n        setEditItem((prev) => {\r\n            if (!prev) return prev;\r\n            const updatedPrices = (prev.outlet_prices ?? []).map((priceEntry) =>\r\n                priceEntry.outlet_id === outletId ? { ...priceEntry, price: newPrice } : priceEntry\r\n            );\r\n            return {\r\n                ...prev,\r\n                outlet_prices: updatedPrices,\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-item-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Outlet List\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Label>Master Price</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    name=\"price\"\r\n                                    value={editItem.price}\r\n                                    onChange={(e) =>\r\n                                        setEditItem((prev) =>\r\n                                            prev ? { ...prev, price: parseFloat(e.target.value) || 0 } : prev\r\n                                        )\r\n                                    }\r\n                                    placeholder=\"Enter Master Price\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} className=\"d-flex align-items-end\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                onClick={() =>\r\n                                    setEditItem((prev) => {\r\n                                        if (!prev) return prev;\r\n                                        const updatedPrices = prev.outlets.map((outlet) => ({\r\n                                            outlet_id: outlet.outlet_id,\r\n                                            price: prev.price,\r\n                                        }));\r\n                                        return {\r\n                                            ...prev,\r\n                                            outlet_prices: updatedPrices,\r\n                                        };\r\n                                    })\r\n                                }>\r\n                                Apply All\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {selectedOutlets.length > 0 ? (\r\n                        selectedOutlets.map((outlet) => {\r\n                            const price = outletPrices.find(\r\n                                (priceEntry) => priceEntry.outlet_id === outlet.outlet_id\r\n                            )?.price;\r\n\r\n                            return (\r\n                                <Card key={outlet.outlet_id} className=\"mb-3 shadow-sm\">\r\n                                    <Card.Body>\r\n                                        <Row>\r\n                                            <Col md={6}>\r\n                                                <h3 className=\"mb-2\">{outlet.outlet_name}</h3>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"number\"\r\n                                                        value={price || ''}\r\n                                                        onChange={(e) =>\r\n                                                            handlePriceChange(\r\n                                                                e as React.ChangeEvent<HTMLInputElement>,\r\n                                                                outlet.outlet_id\r\n                                                            )\r\n                                                        }\r\n                                                        placeholder=\"Enter Outlet Price\"\r\n                                                        className=\"price-input\"\r\n                                                    />\r\n                                                </Form.Group>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <p className=\"text-center text-muted\">No outlets selected.</p>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EditItemStep3;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport { useRedux } from '../../../hooks';\r\nimport { RootState } from '../../../redux/store';\r\nimport { useMultistepForm } from '../../../hooks/useMultistepForm';\r\nimport { updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { categoryItemList } from '../../../redux/actions';\r\nimport EditItemStep1 from './EditItemStep1';\r\nimport EditItemStep2 from './EditItemStep2';\r\nimport EditItemStep3 from './EditItemStep3';\r\nimport { Button, Alert, Container, Card } from 'react-bootstrap';\r\n\r\ninterface CategoryItem {\r\n    selectedCategoryId: string;\r\n    item_id: string;\r\n    item_names: {\r\n        hindi: string;\r\n        english: string;\r\n        gujarati: string;\r\n    };\r\n    price: number;\r\n    dietary: string;\r\n    available_order_type: string[];\r\n    online_display_name: string;\r\n    description: string;\r\n    gst_type: string;\r\n    category_id: string;\r\n    business_id: string;\r\n    logo_image?: File;\r\n    swiggy_image?: File;\r\n    banner_image?: File;\r\n    is_loose: boolean;\r\n    quantity_type: string;\r\n    quantity_params: string;\r\n    quantity_value: number;\r\n    outlets: Outlet[];\r\n    outlet_prices: { outlet_id: string; price: number }[];\r\n}\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n    price: number;\r\n}\r\n\r\ninterface Category {\r\n    category_id: string;\r\n    category_name: string;\r\n    items: CategoryItem[];\r\n}\r\n\r\nconst EditItemPage: React.FC = () => {\r\n    // const { item_id, business_id } = useParams<{ item_id: string; business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n    const item_id = location.state?.item_id;\r\n    const category_id = location.state?.category_id;\r\n    const { dispatch, appSelector } = useRedux();\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [selectedOutlets, setSelectedOutlets] = useState<Outlet[]>([]);\r\n    const [editItem, setEditItem] = useState<CategoryItem | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [successMsg, setSuccess] = useState<string>('');\r\n    const [errorMsg, setError] = useState<string>('');\r\n    const navigate = useNavigate();\r\n    const isEditMode = Boolean(editItem && item_id);\r\n\r\n    useEffect(() => {\r\n        if (!editItem) return;\r\n        console.log('updated ITEM: ', editItem);\r\n    }, [editItem]);\r\n\r\n    // const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n    //     setIsEditing(true);\r\n    //     const { name, value } = e.target;\r\n\r\n    //     setEditItem((prev) => {\r\n    //         if (!prev) return prev; // Prevent errors if state is null\r\n\r\n    //         // If the field belongs to `item_names`, update it inside the object\r\n    //         if (name.startsWith('item_names.')) {\r\n    //             const key = name.replace('item_names.', ''); // Extract field name (e.g., \"english\")\r\n    //             return {\r\n    //                 ...prev,\r\n    //                 item_names: {\r\n    //                     ...prev.item_names,\r\n    //                     [key]: value, // Update only the targeted field\r\n    //                 },\r\n    //             };\r\n    //         }\r\n\r\n    //         // Otherwise, update the field directly\r\n    //         return {\r\n    //             ...prev,\r\n    //             [name]: value,\r\n    //         };\r\n    //     });\r\n    // };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n        setIsEditing(true);\r\n\r\n        const { name, type } = e.target;\r\n        let value: any;\r\n\r\n        if (type === 'file') {\r\n            const input = e.target as HTMLInputElement;\r\n            value = input.files?.[0] || null;\r\n        } else if (e.target instanceof HTMLSelectElement && e.target.multiple) {\r\n            value = Array.from(e.target.selectedOptions, (option) => option.value);\r\n        } else if (type === 'number') {\r\n            value = e.target.value ? Number(e.target.value) : '';\r\n        } else {\r\n            value = e.target.value;\r\n        }\r\n\r\n        // setEditItem((prev) =>\r\n        //     prev\r\n        //         ? {\r\n        //             ...prev,\r\n        //             item_names: {\r\n        //                 ...prev.item_names,\r\n        //                 [name]: value,\r\n        //             },\r\n        //         }\r\n        //         : null\r\n        // );\r\n\r\n        setEditItem((prev) =>\r\n            prev\r\n                ? {\r\n                      ...prev,\r\n                      ...(name in prev.item_names\r\n                          ? { item_names: { ...prev.item_names, [name]: value } } // Update `item_names`\r\n                          : { [name]: value }), // Update other fields\r\n                  }\r\n                : null\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!item_id || editItem || isEditing) return;\r\n\r\n        console.log('Fetching categories from Redux:', categories);\r\n\r\n        if (categories.length === 0) {\r\n            dispatch(categoryItemList(business_id!));\r\n        }\r\n\r\n        const itemToEdit = categories\r\n            .flatMap((category: Category) =>\r\n                category.items.map((item: CategoryItem) => {\r\n                    // console.log('Item:', item);\r\n                    return {\r\n                        ...item,\r\n                        category_id: category.category_id,\r\n                        outlet_prices:\r\n                            item.outlets?.map((outlet: Outlet) => ({\r\n                                outlet_id: outlet.outlet_id,\r\n                                price: outlet.price,\r\n                            })) ?? [],\r\n                    };\r\n                })\r\n            )\r\n            .find((item: CategoryItem) => item.item_id === item_id);\r\n\r\n        if (itemToEdit) {\r\n            console.log('item to EDIT found:', itemToEdit);\r\n\r\n            setEditItem((prev) => {\r\n                const updatedItem = { ...itemToEdit, item_id };\r\n\r\n                console.log('Setting editItem:', updatedItem);\r\n                return updatedItem;\r\n            });\r\n        }\r\n    }, [item_id, categories, dispatch]);\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setTimeout(() => {\r\n            console.log('Submitting category after delay:', editItem);\r\n        }, 100);\r\n\r\n        if (!editItem) {\r\n            setMessage('No item to save.');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('item_name', JSON.stringify(editItem.item_names));\r\n        formData.append('online_display_name', editItem.online_display_name);\r\n        formData.append('price', editItem.price.toString());\r\n        formData.append('description', editItem.description);\r\n        formData.append('dietary', editItem.dietary);\r\n        formData.append('available_order_type', JSON.stringify(editItem.available_order_type));\r\n        formData.append('gst_type', editItem.gst_type);\r\n        formData.append('category_id', editItem.category_id);\r\n        formData.append('item_id', editItem.item_id);\r\n\r\n        if (editItem.logo_image) {\r\n            formData.append('logo_image', editItem.logo_image);\r\n        }\r\n        if (editItem.swiggy_image) {\r\n            formData.append('swiggy_image', editItem.swiggy_image);\r\n        }\r\n        if (editItem.banner_image) {\r\n            formData.append('banner_image', editItem.banner_image);\r\n        }\r\n        formData.append('outlet_prices', JSON.stringify(editItem.outlet_prices));\r\n        formData.append('is_loose', editItem.is_loose.toString());\r\n        formData.append('quantity_type', editItem.quantity_type);\r\n        formData.append('quantity_params', editItem.quantity_params);\r\n        formData.append('quantity_value', editItem.quantity_value.toString());\r\n\r\n        dispatch(updateItem(formData));\r\n\r\n        setTimeout(() => {\r\n            // setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 500);\r\n\r\n        navigate(`/apps/manage-menu`, { state: { business_id: business_id } });\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     console.log('useEffect triggered');\r\n    //     console.log('Categories Data:', categories);\r\n    //     if (!categories.length) return;\r\n    //     if (item_id) {\r\n    //         console.log('Categories Data:', categories);\r\n    //         const itemToEdit = categories\r\n    //             .flatMap((category: Category) =>\r\n    //                 category.items.map((item: CategoryItem) => {\r\n    //                     console.log('Item:', item);\r\n    //                     return {\r\n    //                         ...item,\r\n    //                         category_id: category.category_id,\r\n    //                         outlet_prices:\r\n    //                             item.outlets?.map((outlet: Outlet) => ({\r\n    //                                 outlet_id: outlet.outlet_id,\r\n    //                                 price: outlet.price,\r\n    //                             })) ?? [],\r\n    //                     };\r\n    //                 })\r\n    //             )\r\n    //             .find((item: CategoryItem) => item.item_id === item_id);\r\n\r\n    //         console.log('Item with outlet_prices:', JSON.stringify(itemToEdit, null, 2));\r\n\r\n    //         console.log('Categories Data:', categories);\r\n\r\n    //         if (itemToEdit) {\r\n    //             console.log('Item to Edit:', itemToEdit);\r\n    //             setEditItem(itemToEdit);\r\n    //         } else {\r\n    //             setMessage('Item not found.');\r\n    //         }\r\n    //     }\r\n    // }, [item_id, categories]);\r\n\r\n    // console.log('Selected outlets in parent component:', selectedOutlets);\r\n\r\n    const { steps, currentStepIndex, step, isFirstStep, isLastStep, back, next } = useMultistepForm([\r\n        <EditItemStep1\r\n            handleSubmit={handleSubmit}\r\n            editItem={editItem}\r\n            setEditItem={setEditItem}\r\n            message={message}\r\n            handleInputChange={handleInputChange}\r\n        />,\r\n        <EditItemStep2\r\n            selectedOutlets={selectedOutlets} // ✅ Pass the state\r\n            setSelectedOutlets={setSelectedOutlets}\r\n        />,\r\n        <EditItemStep3\r\n            handleSubmit={handleSubmit}\r\n            editItem={editItem}\r\n            setEditItem={setEditItem}\r\n            message={message}\r\n            selectedOutlets={selectedOutlets}\r\n        />,\r\n    ]);\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        {' '}\r\n                        {/* Single Form here */}\r\n                        <div>\r\n                            Step {currentStepIndex + 1} of {steps.length}\r\n                        </div>\r\n                        {step}\r\n                        <div className=\"d-flex justify-content-center mt-4 gap-3\">\r\n                            {!isFirstStep && (\r\n                                <Button variant=\"secondary\" type=\"button\" onClick={back} className=\"px-4 py-2\">\r\n                                    Back\r\n                                </Button>\r\n                            )}\r\n\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                onClick={(e) => {\r\n                                    console.log('Before clicking next: ', editItem);\r\n                                    if (isLastStep) {\r\n                                        handleSubmit(e);\r\n                                    } else {\r\n                                        next();\r\n                                    }\r\n                                    console.log('After clicking next: ', editItem);\r\n                                }}\r\n                                className=\"px-4 py-2\">\r\n                                {isLastStep ? (isEditMode ? 'Update' : 'Finish') : 'Next'}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default EditItemPage;\r\n\r\n{\r\n    /* <div className=\"edit-item-page\">\r\n            <h2>Edit Item</h2>\r\n            {message && <p>{message}</p>}\r\n            {editItem ? (\r\n                <div>\r\n                    <div>\r\n                        <label>Upload Logo Image</label>\r\n                        {editItem?.logo_image && editItem.logo_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.logo_image)}\r\n                                    alt=\"Logo Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        logo_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Upload Swiggy Image</label>\r\n                        {editItem?.swiggy_image && editItem.swiggy_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.swiggy_image)}\r\n                                    alt=\"Swiggy Image Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        swiggy_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Upload Banner Image</label>\r\n                        {editItem?.banner_image && editItem.banner_image instanceof File && (\r\n                            <div>\r\n                                <img\r\n                                    src={URL.createObjectURL(editItem.banner_image)}\r\n                                    alt=\"Banner Image Preview\"\r\n                                    style={{ width: '100px', height: 'auto', marginBottom: '10px' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                const file = e.target.files?.[0];\r\n                                if (file) {\r\n                                    setEditItem({\r\n                                        ...editItem!,\r\n                                        banner_image: file,\r\n                                    });\r\n                                }\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Item Name (English)</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.english}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, english: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Item Name (Hindi):</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.hindi}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, hindi: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Item Name (Gujarati):</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.item_names.gujarati}\r\n                            onChange={(e) =>\r\n                                setEditItem({\r\n                                    ...editItem,\r\n                                    item_names: { ...editItem.item_names, gujarati: e.target.value },\r\n                                })\r\n                            }\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Online Display Name:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={editItem.online_display_name}\r\n                            onChange={(e) => setEditItem({ ...editItem, online_display_name: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Price:</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            value={editItem.price}\r\n                            onChange={(e) => setEditItem({ ...editItem, price: parseFloat(e.target.value) })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Description:</label>\r\n                        <input\r\n                            value={editItem.description}\r\n                            onChange={(e) => setEditItem({ ...editItem, description: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Dietary:</label>\r\n                        <select\r\n                            value={editItem.dietary}\r\n                            onChange={(e) => setEditItem({ ...editItem, dietary: e.target.value })}>\r\n                            <option value=\"veg\">Veg</option>\r\n                            <option value=\"non-veg\">Non-Veg</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Available Order Types:</label>\r\n                        <select\r\n                            multiple\r\n                            value={editItem.available_order_type}\r\n                            onChange={(e) => {\r\n                                const selectedOptions = Array.from(e.target.selectedOptions, (option) => option.value);\r\n                                setEditItem({ ...editItem, available_order_type: selectedOptions });\r\n                            }}>\r\n                            <option value=\"dine_in\">Dine In</option>\r\n                            <option value=\"take_away\">Take Away</option>\r\n                            <option value=\"delivery\">Delivery</option>\r\n                            <option value=\"pickup\">Pickup</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>GST Type:</label>\r\n                        {/* <input\r\n                            type=\"text\"\r\n                            value={editItem.gst_type}\r\n                            onChange={(e) => setEditItem({ ...editItem, gst_type: e.target.value })}\r\n                        /> s}\r\n                        <select\r\n                            value={editItem.gst_type}\r\n                            onChange={(e) => setEditItem({ ...editItem, gst_type: e.target.value })}>\r\n                            {' '}\r\n                            <option value=\"goods\">Goods</option>\r\n                            <option value=\"services\">Services</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>Is Loose:</label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={editItem.is_loose}\r\n                            onChange={(e) => setEditItem({ ...editItem, is_loose: e.target.checked })}\r\n                        />\r\n                    </div>\r\n\r\n                    {editItem.is_loose && (\r\n                        <div>\r\n                            <div>\r\n                                <label>Quantity Type:</label>\r\n                                <select\r\n                                    value={editItem.quantity_type}\r\n                                    onChange={(e) => setEditItem({ ...editItem, quantity_type: e.target.value })}>\r\n                                    <option value=\"piece\">Piece</option>\r\n                                    <option value=\"weight\">Weight</option>\r\n                                    <option value=\"volume\">Volume</option>\r\n                                </select>\r\n                            </div>\r\n\r\n                            {editItem.quantity_type === 'piece' && (\r\n                                <div>\r\n                                    <label>Quantity (Piece):</label>\r\n                                    <input\r\n                                        type=\"number\"\r\n                                        value={editItem.quantity_value}\r\n                                        onChange={(e) =>\r\n                                            setEditItem({ ...editItem, quantity_value: parseFloat(e.target.value) })\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            )}\r\n\r\n                            {(editItem.quantity_type === 'weight' || editItem.quantity_type === 'volume') && (\r\n                                <>\r\n                                    <div>\r\n                                        <label>Quantity Params:</label>\r\n                                        <select\r\n                                            value={editItem.quantity_params}\r\n                                            onChange={(e) =>\r\n                                                setEditItem({ ...editItem, quantity_params: e.target.value })\r\n                                            }>\r\n                                            {editItem.quantity_type === 'weight' && (\r\n                                                <>\r\n                                                    <option value=\"gm\">GM</option>\r\n                                                    <option value=\"kg\">KG</option>\r\n                                                </>\r\n                                            )}\r\n                                            {editItem.quantity_type === 'volume' && (\r\n                                                <>\r\n                                                    <option value=\"m\">M</option>\r\n                                                    <option value=\"lt\">LT</option>\r\n                                                </>\r\n                                            )}\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <label>Quantity Value:</label>\r\n                                        <input\r\n                                            type=\"number\"\r\n                                            value={editItem.quantity_value}\r\n                                            onChange={(e) =>\r\n                                                setEditItem({ ...editItem, quantity_value: parseFloat(e.target.value) })\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n\r\n                    <button onClick={handleSaveChanges}>Save Changes</button>\r\n                </div>\r\n            ) : (\r\n                <p>Loading...</p>\r\n            )}\r\n        </div> */\r\n}\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nconst AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nconst AlertLink = createWithBsPrefix('alert-link', {\n  Component: Anchor\n});\nconst defaultProps = {\n  variant: 'primary',\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nconst Alert = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    bsPrefix,\n    show,\n    closeLabel,\n    closeVariant,\n    className,\n    children,\n    variant,\n    onClose,\n    dismissible,\n    transition,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  const handleClose = useEventCallback(e => {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  const Transition = transition === true ? Fade : transition;\n\n  const alert = /*#__PURE__*/_jsxs(\"div\", {\n    role: \"alert\",\n    ...(!Transition ? props : undefined),\n    ref: ref,\n    className: classNames(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),\n    children: [dismissible && /*#__PURE__*/_jsx(CloseButton, {\n      onClick: handleClose,\n      \"aria-label\": closeLabel,\n      variant: closeVariant\n    }), children]\n  });\n\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/_jsx(Transition, {\n    unmountOnExit: true,\n    ...props,\n    ref: undefined,\n    in: show,\n    children: alert\n  });\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nexport default Object.assign(Alert, {\n  Link: AlertLink,\n  Heading: AlertHeading\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { ENTERED, ENTERING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst fadeStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst Fade = /*#__PURE__*/React.forwardRef(({\n  className,\n  children,\n  transitionClasses = {},\n  ...props\n}, ref) => {\n  const handleEnter = useCallback((node, isAppearing) => {\n    triggerBrowserReflow(node);\n    props.onEnter == null ? void 0 : props.onEnter(node, isAppearing);\n  }, [props]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    onEnter: handleEnter,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])\n    })\n  });\n});\nFade.defaultProps = defaultProps;\nFade.displayName = 'Fade';\nexport default Fade;"],"names":["useMultistepForm","steps","useState","currentStepIndex","setCurrentStepIndex","step","isFirstStep","isLastStep","length","goTo","index","next","i","back","editItem","setEditItem","handleInputChange","handleSubmit","message","Container","className","Card","as","Row","Col","md","Form","type","name","onChange","e","file","target","files","logo_image","swiggy_image","banner_image","value","item_names","english","required","hindi","gujarati","online_display_name","description","label","checked","is_loose","quantity_type","quantity_value","quantity_params","min","dietary","gst_type","selectedOutlets","setSelectedOutlets","location","useLocation","business_id","state","category_id","item_id","useRedux","dispatch","appSelector","businesses","business","categories","category","find","biz","cat","item","items","itm","useEffect","categoryItemList","businessList","categoryOutlets","outlets","filter","outlet","includes","outlet_id","preselectedOutlets","some","itemOutlet","map","o","onClick","prevSelected","toggleOutletSelection","readOnly","outlet_name","outletPrices","outlet_prices","price","prev","parseFloat","placeholder","Button","variant","updatedPrices","priceEntry","outletId","newPrice","isNaN","handlePriceChange","isEditing","setIsEditing","setMessage","successMsg","errorMsg","navigate","useNavigate","isEditMode","Boolean","console","log","itemToEdit","flatMap","updatedItem","preventDefault","setTimeout","formData","FormData","append","JSON","stringify","toString","available_order_type","updateItem","input","HTMLSelectElement","multiple","Array","from","selectedOptions","option","Number","onSubmit","Alert","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","Anchor","defaultProps","show","transition","Fade","closeLabel","React","uncontrolledProps","ref","useUncontrolled","bsPrefix","closeVariant","children","onClose","dismissible","props","prefix","useBootstrapPrefix","handleClose","useEventCallback","Transition","alert","_jsxs","role","undefined","classNames","_jsx","CloseButton","unmountOnExit","in","Object","assign","Link","Heading","size","active","useButtonProps","tagName","buttonProps","href","disabled","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","DivStyledAsH6","CardBody","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Img","Title","Subtitle","Body","Text","Header","Footer","ImgOverlay","context","propTypes","PropTypes","fadeStyles","ENTERING","ENTERED","transitionClasses","handleEnter","useCallback","node","isAppearing","triggerBrowserReflow","onEnter","TransitionWrapper","addEndListener","transitionEndListener","childRef","status","innerProps","timeout","mountOnEnter","appear"],"sourceRoot":""}