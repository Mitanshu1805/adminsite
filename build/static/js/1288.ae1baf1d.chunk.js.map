{"version":3,"file":"static/js/1288.ae1baf1d.chunk.js","mappings":"mKAwCA,IA7B8D,SAAC,GAMxD,IALHA,EAKE,EALFA,KACAC,EAIE,EAJFA,QACAC,EAGE,EAHFA,UAGE,IAFFC,MAAAA,OAEE,MAFM,mBAEN,MADFC,QAAAA,OACE,MADQ,6CACR,EACF,OACI,UAAC,IAAD,CAAOJ,KAAMA,EAAMK,OAAQJ,EAASK,UAAQ,EAA5C,WACI,SAAC,WAAD,CAAcC,aAAW,EAAzB,UACI,SAAC,UAAD,UAAcJ,OAGlB,SAAC,SAAD,WACI,uBAAIC,OAGR,UAAC,WAAD,YACI,SAAC,IAAD,CAAQI,QAAQ,YAAYC,QAASR,EAArC,qBAGA,SAAC,IAAD,CAAQO,QAAQ,SAASC,QAASP,EAAlC,4B,2FCFhB,IA1B8B,WAC1B,OAAkCQ,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEA,OACI,SAAC,IAAD,CAAKC,UAAU,OAAf,UACI,SAAC,IAAD,CAAKC,GAAI,EAAT,UACI,UAAC,UAAD,YACI,SAAC,UAAD,CAAYC,MAAO,CAAEC,SAAU,SAAUC,WAAY,QAArD,4BACA,iBAAKJ,UAAU,4BAAf,WACI,SAAC,UAAD,CACIK,KAAK,WACLC,QAASR,EACTS,SAAU,kBAAMR,GAAa,IAC7BS,GAAG,kBACHN,MAAO,CAAEO,UAAW,aAAcC,YAAa,UAEnD,SAAC,UAAD,CAAYC,QAAQ,kBAAkBT,MAAO,CAAEC,SAAU,SAAUS,aAAc,KAAjF,gC,gFCjBjB,SAASC,EAAiBC,GAC7B,OAAgDjB,EAAAA,EAAAA,UAAS,GAAzD,eAAOkB,EAAP,KAAyBC,EAAzB,KAoBA,MAAO,CACHD,iBAAAA,EACAE,KAAMH,EAAMC,GACZD,MAAAA,EACAI,YAAkC,IAArBH,EACbI,WAAYJ,IAAqBD,EAAMM,OAAS,EAChDC,KAVJ,SAAcC,GACVN,EAAoBM,IAUpBC,KAzBJ,WACIP,GAAoB,SAACQ,GACjB,OAAIA,GAAKV,EAAMM,OAAS,EAAUI,EAC3BA,EAAI,MAuBfC,KAnBJ,WACIT,GAAoB,SAACQ,GACjB,OAAIA,GAAK,EAAUA,EACZA,EAAI,S,mLCdjBE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GACM,OADNA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACFC,MAAQ,CAAEC,UAAU,GAAZ,EAIP,OAJO,yCAMR,SAAkBC,EAAcC,GAC5BC,QAAQF,MAAM,kCAAmCA,EAAOC,KAC3D,oBAED,WACI,OAAIE,KAAKL,MAAMC,UACJ,kDAGJI,KAAKC,MAAMC,YACrB,uCAdD,WACI,MAAO,CAAEN,UAAU,OACtB,EALCF,CAAsBS,EAAAA,WAoB5B,I,4ECaMC,EAAuB,WAAO,IAAD,EAGzBC,EAAW,WADAC,EAAAA,EAAAA,MACYX,aAAZ,aAAG,EAAgBU,YAEpC,GAAkCE,EAAAA,EAAAA,MAA1BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAGlB,GAAwC5C,EAAAA,EAAAA,UAAqC,IAA7E,eAAO6C,EAAP,KAAqBC,EAArB,KACA,GAAkC9C,EAAAA,EAAAA,WAAS,GAA3C,eACA,GADA,WACkCA,EAAAA,EAAAA,WAAkB,IAApD,eACA,GADA,WACgCA,EAAAA,EAAAA,UAA+C,OAA/E,eACA,GADA,WAC8BA,EAAAA,EAAAA,UAAiB,KAA/C,eAAgB+C,GAAhB,WACMC,EAAaJ,GAAY,SAACd,GAAD,OAAsBA,EAAMmB,SAASD,YAAc,MAClF,GAAoDhD,EAAAA,EAAAA,UAAwB,MAA5E,eAAOkD,EAAP,KAA2BC,EAA3B,KACA,GAA4CnD,EAAAA,EAAAA,UAAwB,MAApE,eAAOoD,EAAP,KAAuBC,EAAvB,KACA,GAA8DrD,EAAAA,EAAAA,WAAS,GAAvE,eAAOsD,EAAP,KAAgCC,EAAhC,KACA,GAAoCvD,EAAAA,EAAAA,UAAwB,MAA5D,eAAOwD,EAAP,KAAmBC,EAAnB,KACA,GAAsDzD,EAAAA,EAAAA,WAAS,GAA/D,eAAO0D,EAAP,KAA4BC,EAA5B,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACFtB,GACAG,GAASoB,EAAAA,EAAAA,IAAiBvB,MAE/B,CAACG,EAAUH,KAEdsB,EAAAA,EAAAA,YAAU,WACFd,EAAWzB,OAAS,IAAM2B,GAC1BC,EAAsBH,EAAW,GAAGgB,eAEzC,CAAChB,EAAYE,KAChBY,EAAAA,EAAAA,YAAU,WACN,GAAId,EAAWzB,OAAS,EAAG,CACvB,IAAM0C,EAAkD,GACxDjB,EAAWkB,SAAQ,SAACjB,GAChBgB,EAAoBhB,EAASe,aAAef,EAASkB,UAErDlB,EAASmB,MAAMF,SAAQ,SAACG,GACpBJ,EAAoBI,EAAKC,SAAWD,EAAKF,gBAGjDrB,EAAgBmB,MAErB,CAACjB,IAEJ,IAkFMuB,EAAoB,WAClBf,GACAb,GAAS6B,EAAAA,EAAAA,IAAWhB,IAExBiB,YAAW,WACP9B,GAASoB,EAAAA,EAAAA,IAAiBvB,MAC3B,KACHmB,GAAuB,IAoBrBe,EAAwB,WACtBtB,GACAT,GAASgC,EAAAA,EAAAA,IAAevB,IAE5BqB,YAAW,WACP9B,GAASoB,EAAAA,EAAAA,IAAiBvB,MAC3B,KACHe,GAA2B,IAiCzBqB,GAAgB5B,EACjB6B,QAAO,SAAC5B,GAAD,OAA6BC,GAAsBD,EAASe,cAAgBd,KACnF4B,SAAQ,SAAC7B,GAAD,OAA4BA,EAASmB,SAIlD,OAFAlC,QAAQ6C,IAAI,kBAAmBH,KAG3B,iBAAKzE,UAAU,wBAAf,WACI,iBAAKA,UAAU,SAAf,WACI,uCACA,gBAAKA,UAAU,eAAf,UACI,mBACIA,UAAU,kBACVJ,QAAS,kBACL6D,EAAS,sBAAuB,CAC5B9B,MAAO,CAAEU,YAAaA,EAAawB,YAAad,MAJ5D,8BAeR,iBAAK/C,UAAU,gBAAf,UACK6C,EAAWgC,KAAI,SAAC/B,GAAD,OACZ,iBACI9C,UAAS,uBAAkB+C,IAAuBD,EAASe,YAAc,SAAW,IAEpFjE,QAAS,kBApLAiE,EAoL0Bf,EAASe,YAnL5D9B,QAAQ6C,IAAI,oBAAqBf,QAEjCb,EAAsBa,GAHE,IAACA,GAiLb,WAII,gBAAKiB,IAAKhC,EAASiC,WAAYC,IAAKlC,EAASmC,iBAC7C,uBAAInC,EAASmC,iBACb,0BACI,gBAAKrF,QAAS,SAACsF,GAAD,OAAOA,EAAEC,mBAAvB,UACI,SAACC,EAAA,EAAD,CACI9E,QAASoC,EAAaI,EAASe,eAAgB,EAC/CtD,SAAU,SAACD,GAAD,OArLZuD,EAqL8Cf,EAASe,YArLlCG,EAqL+C1D,EApL9FqC,GAAgB,SAAC0C,GAAD,eAAC,UACVA,GADS,cAEXxB,EAAcG,OAEnBxB,GAAS8C,EAAAA,EAAAA,IAAuBzB,EAAaG,SAE7CM,YAAW,WACP1B,EAAW,IACXJ,GAASoB,EAAAA,EAAAA,IAAiBvB,MAC3B,KAVsB,IAACwB,EAAqBG,UAyL/B,4BACI,SAAC,MAAD,CACIuB,KAAM,GACNrF,MAAO,CAAEsF,OAAQ,UAAW9E,YAAa,QACzCd,QAAS,kBACL6D,EAAS,wBAAyB,CAC9B9B,MAAO,CACHU,YAAaA,EACbwB,YAAad,SAS7B,SAAC,MAAD,CACIwC,KAAM,GACNrF,MAAO,CAAEsF,OAAQ,UAAWC,MAAO,OACnC7F,QAAS,kBA3GPiE,EA2GkCf,EAASe,YA1GrEX,EAAkBW,QAClBT,GAA2B,GAFF,IAACS,MA6GN,SAAC,IAAD,CACI1E,KAAMgE,EACN/D,QAAS,kBAAMgE,GAA2B,IAC1C/D,UAAWkF,EACXjF,MAAM,uBACNC,QAAQ,sFAvCXuD,EAASe,iBA4CtB,mBACI7D,UAAU,sBACVJ,QAAS,kBAAM6D,EAAS,0BAA2B,CAAE9B,MAAO,CAAEU,YAAaA,MAF/E,gCAYJ,gBAAKrC,UAAU,YAAf,SACKyE,GAAcrD,OAAS,EACpBqD,GAAcI,KAAI,SAACX,GACf,OACI,iBAAKlE,UAAU,YAAf,WACI,gBAAK8E,IAAKZ,EAAKa,WAAYC,IAAKd,EAAKwB,UAAW1F,UAAU,gBAC1D,iBAAKA,UAAU,eAAf,WACI,wBAAKkE,EAAKwB,aACV,mCAAWxB,EAAKyB,UAChB,+CAGJ,gBAAK3F,UAAU,eAAf,UACI,mBACIA,UAAU,oBACVJ,QAAS,kBAxNxB,SAACyC,EAAqB8B,GACvCV,EAAS,eAAgB,CACrB9B,MAAO,CAAEU,YAAaA,EAAa8B,QAASA,KAsNDyB,CAAavD,EAAa6B,EAAKC,UAFlD,yBAMJ,gBAAKnE,UAAU,eAAf,UAMI,SAAC,MAAD,CACIuF,KAAM,GACNrF,MAAO,CAAEsF,OAAQ,UAAW9E,YAAa,QACzCd,QAAS,kBAhJrBuE,EAgJ0CD,EAAKC,QAhJ9BN,EAgJuCK,EAAKL,YA/IjFJ,EAAS,kBAAmB,CACxB9B,MAAO,CAAEU,YAAaA,EAAawB,YAAad,EAAoBoB,QAASA,KAEjFpC,QAAQ6C,IAAI,gBAAiBf,GAC7B9B,QAAQ6C,IAAI,uBAAwB7B,QACpChB,QAAQ6C,IAAI,0BAA2B5B,GANpB,IAACmB,EAAiBN,QAoJb,iBAAK7D,UAAU,eAAf,WAII,SAAC,MAAD,CACIuF,KAAM,GACNrF,MAAO,CAAEsF,OAAQ,UAAWC,MAAO,OACnC7F,QAAS,kBArMnBuE,EAqM0CD,EAAKC,QApMrEb,EAAca,QACdX,GAAuB,GAFF,IAACW,MAuMM,SAAC,IAAD,CACIhF,KAAMoE,EACNnE,QAAS,kBAAMoE,GAAuB,IACtCnE,UAAW+E,EACX9E,MAAM,mBACNC,QAAQ,iFAGhB,SAAC6F,EAAA,EAAD,CACI9E,QAASoC,EAAawB,EAAKC,WAAY,EACvC5D,SAAU,SAACD,GAAD,OA1QhB6D,EA0Q8CD,EAAKC,QA1QlCH,EA0Q2C1D,EAzQlFqC,GAAgB,SAAC0C,GAAD,eAAC,UACVA,GADS,cAEXlB,EAAUH,OAIfxB,GAASqD,EAAAA,EAAAA,IAAmB1B,EAASH,SAErCM,YAAW,WACP1B,EAAW,IACXJ,GAASoB,EAAAA,EAAAA,IAAiBvB,MAC3B,KAZkB,IAAC8B,EAAiBH,OA2NaE,EAAKC,aAqD7C,cAAGnE,UAAU,mBAAb,sCAapB,EANyC,kBACrC,SAAC,EAAD,WACI,SAAC,EAAD,Q,4RCiBR,EAzW0D,SAAC,GAUpD,IATH8F,EASE,EATFA,SAGAC,GAME,EARFC,SAQE,EAPFC,WAOE,EANFF,cACAG,EAKE,EALFA,iBACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,cACAC,EACE,EADFA,OA2BMC,EAA6B,SAACrB,GAChC,MAAwBA,EAAEsB,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdX,EAAa,CACTS,OAAQ,CAAEC,KAAAA,EAAMC,MAAAA,MAIxB,OACI,SAACC,EAAA,EAAD,CAAW3G,UAAU,0BAArB,UACI,UAAC4G,EAAA,EAAD,CAAM5G,UAAU,YAAhB,WACI,SAAC4G,EAAA,SAAD,CAAaC,GAAG,KAAK7G,UAAU,cAA/B,4BAGA,UAAC4G,EAAA,OAAD,YACI,UAACE,EAAA,EAAD,CAAK9G,UAAU,OAAf,WAEI,SAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,0BACA,SAACA,EAAA,UAAD,CAAc3G,KAAK,OAAOoG,KAAK,aAAalG,SAAU2F,IACrDC,IAAe,gBAAKrB,IAAKqB,EAAanB,IAAI,eAAeiC,MAAM,cAKxE,SAACF,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,4BACA,SAACA,EAAA,UAAD,CAAc3G,KAAK,OAAOoG,KAAK,eAAelG,SAAU2F,IACvDE,IAAiB,gBAAKtB,IAAKsB,EAAepB,IAAI,iBAAiBiC,MAAM,cAK9E,SAACF,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,4BACA,SAACA,EAAA,UAAD,CAAc3G,KAAK,OAAOoG,KAAK,eAAelG,SAAU2F,IACvDG,IAAiB,gBAAKvB,IAAKuB,EAAerB,IAAI,iBAAiBiC,MAAM,iBAKlF,UAACH,EAAA,EAAD,CAAK9G,UAAU,OAAf,WACI,SAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,UAACA,EAAA,QAAD,mCACwB,iBAAMhH,UAAU,cAAhB,mBAExB,SAACgH,EAAA,UAAD,CACI3G,KAAK,OACLoG,KAAK,oBACLS,UAAQ,EACRR,MAAOZ,EAASJ,UAAUyB,QAC1B5G,SAAUwF,EACVqB,YAAY,+BAEfd,EAAOZ,YAAa,kBAAO1F,UAAU,cAAjB,SAAgCsG,EAAOZ,kBAGpE,SAACqB,EAAA,EAAD,WACI,UAACC,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,iCACA,SAACA,EAAA,UAAD,CACI3G,KAAK,OACLoG,KAAK,kBACLC,MAAOZ,EAASJ,UAAU2B,MAC1B9G,SAAUwF,EACVqB,YAAY,mCAIxB,SAACL,EAAA,EAAD,WACI,UAACC,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,oCACA,SAACA,EAAA,UAAD,CACI3G,KAAK,OACLoG,KAAK,qBACLC,MAAOZ,EAASJ,UAAU4B,SAC1B/G,SAAUwF,EACVqB,YAAY,yCAS5B,SAACN,EAAA,EAAD,CAAK9G,UAAU,OAAf,UACI,UAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,8BACA,SAACA,EAAA,QAAD,CACI3G,KAAK,WACLoG,KAAK,WACLc,MAAM,oBACNjH,QAASwF,EAAS0B,SAClBjH,SAvHM,SAAC2E,GAC/B,IAAQ5E,EAAY4E,EAAEsB,OAAdlG,QAERyF,EAAa,CACTS,OAAQ,CAAEC,KAAM,WAAYC,MAAOpG,KAIlCA,IACDyF,EAAa,CAAES,OAAQ,CAAEC,KAAM,gBAAiBC,MAAO,MACvDX,EAAa,CAAES,OAAQ,CAAEC,KAAM,kBAAmBC,MAAO,MACzDX,EAAa,CAAES,OAAQ,CAAEC,KAAM,iBAAkBC,MAAO,eAkH/CZ,EAAS0B,WACN,UAACV,EAAA,EAAD,CAAK9G,UAAU,OAAf,WACI,UAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,6BACA,UAACA,EAAA,UAAD,CACIH,GAAG,SACHJ,KAAK,gBACLC,MAAOZ,EAAS2B,cAChBlH,SAAUwF,EAJd,WAKI,mBAAQW,MAAM,GAAd,mCACA,mBAAQA,MAAM,QAAd,oBACA,mBAAQA,MAAM,SAAd,qBACA,mBAAQA,MAAM,SAAd,0BAKoB,WAA3BZ,EAAS2B,gBACN,+BACI,UAACV,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,8BACA,UAACF,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,SAAC+G,EAAA,UAAD,CACI3G,KAAK,SACLoG,KAAK,iBACLC,MAAOZ,EAAS4B,eAChBnH,SAAUwF,EACVqB,YAAY,sBAGpB,SAACL,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,SAAD,CACIP,KAAK,kBACLC,MAAOZ,EAAS6B,gBAChBpH,SAAUgG,EAHd,WAII,mBAAQG,MAAM,GAAd,0BACA,mBAAQA,MAAM,KAAd,iBACA,mBAAQA,MAAM,KAAd,6BAQI,UAA3BZ,EAAS2B,gBACN,+BACI,UAACV,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,8BACA,SAACF,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,SAAC+G,EAAA,UAAD,CACI3G,KAAK,SACLoG,KAAK,iBACLC,MAAOZ,EAAS4B,eAChBnH,SAAUwF,EACVqB,YAAY,4BAQR,WAA3BtB,EAAS2B,gBACN,+BACI,UAACV,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,8BACA,UAACF,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,SAAC+G,EAAA,UAAD,CACI3G,KAAK,SACLoG,KAAK,iBACLC,MAAOZ,EAAS4B,eAChBnH,SAAUwF,EACVqB,YAAY,sBAGpB,SAACL,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,SAAD,CACIP,KAAK,kBACLC,MAAOZ,EAAS6B,gBAChBpH,SAAUgG,EAHd,WAII,mBAAQG,MAAM,GAAd,0BACA,mBAAQA,MAAM,IAAd,iBACA,mBAAQA,MAAM,KAAd,iCAUhC,UAACI,EAAA,EAAD,CAAK9G,UAAU,OAAf,WACI,UAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,mCACA,SAACA,EAAA,UAAD,CACI3G,KAAK,OACLoG,KAAK,sBACLC,MAAOZ,EAAS8B,oBAChBrH,SAAUwF,EACVqB,YAAY,kCAGpB,UAACL,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,gCACA,SAACA,EAAA,UAAD,CACI3G,KAAK,OACLoG,KAAK,cACLC,MAAOZ,EAAS+B,YAChBtH,SAAUwF,EACVqB,YAAY,kCAIxB,UAACN,EAAA,EAAD,CAAK9G,UAAU,OAAf,WACI,UAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,SAAC+G,EAAA,QAAD,4BACA,UAACA,EAAA,UAAD,CACIH,GAAG,SACHJ,KAAK,UACLC,MAAOZ,EAASgC,QAChBvH,SAAUwF,EACVmB,UAAQ,EALZ,WAMI,mBAAQR,MAAM,GAAd,kCACA,mBAAQA,MAAM,MAAd,kBACA,mBAAQA,MAAM,UAAd,wBAEHJ,EAAOwB,UAAW,kBAAO9H,UAAU,cAAjB,SAAgCsG,EAAOwB,cAE9D,SAACf,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,6BACA,UAACA,EAAA,UAAD,CACIH,GAAG,SACHJ,KAAK,WACLC,MAAOZ,EAASiC,SAChBxH,SAAUwF,EAJd,WAKI,mBAAQW,MAAM,GAAd,8BACA,mBAAQA,MAAM,QAAd,oBACA,mBAAQA,MAAM,WAAd,kCAKhB,SAACI,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,CAAK9G,GAAI,EAAT,WACI,UAAC+G,EAAA,QAAD,YACI,UAACA,EAAA,QAAD,+BACoB,iBAAMhH,UAAU,cAAhB,kBAEnB,CAAC,WAAY,UAAW,UAAW,UAAU6E,KAAI,SAACmD,GAAD,OAC9C,SAAChB,EAAA,QAAD,CAEI3G,KAAK,WACLkH,MAAOS,EAAOC,QAAQ,IAAK,KAAKC,cAChCzB,KAAK,uBACLC,MAAOsB,EACP1H,QACI6H,MAAMC,QAAQtC,EAASuC,uBACvBvC,EAASuC,qBAAqBC,SAASN,GAE3CzH,SAAU,SAAC2E,GACP,MAA2BA,EAAEsB,OAArBE,EAAR,EAAQA,MACJ6B,EADJ,EAAejI,QACgB,mBAEjBwF,EAASuC,sBAAwB,IAAI3D,QACrC,SAACrE,GAAD,MAA0B,KAAhBA,EAAKmI,WAHE,CAKrB9B,KAEHZ,EAASuC,sBAAwB,IAAI3D,QAClC,SAACrE,GAAD,OAAUA,IAASqG,GAAyB,KAAhBrG,EAAKmI,UAG3CzG,QAAQ6C,IAAI,iCAAkC2D,GAE9CxC,EAAa,CACTS,OAAQ,CAAEC,KAAM,uBAAwBC,MAAO6B,OAzBlDP,SA+BhB1B,EAAO+B,uBACJ,kBAAOrI,UAAU,cAAjB,SAAgCsG,EAAO+B,qC,qDCtLvE,EAxJ4D,SAAC,GAA6C,IAAD,IAA1CI,EAA0C,EAA1CA,gBAAiBC,EAAyB,EAAzBA,mBACtEC,GAAWrG,EAAAA,EAAAA,MACXD,EAAW,UAAGsG,EAAShH,aAAZ,aAAG,EAAgBU,YAC9BwB,EAAW,UAAG8E,EAAShH,aAAZ,aAAG,EAAgBkC,YACpC,GAAkCtB,EAAAA,EAAAA,MAA1BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAClB,GAAkC5C,EAAAA,EAAAA,WAAS,GAA3C,eAGM+I,GAHN,UAGmBnG,GAAY,SAACd,GAAD,OAAsBA,EAAMkH,SAASD,YAAc,OAC5E/F,EAAaJ,GAAY,SAACd,GAAD,OAAsBA,EAAMmB,SAASD,YAAc,MAG5EgG,EAAWD,EAAWE,MAAK,SAACC,GAAD,OAAmBA,EAAI1G,cAAgBA,KAClES,EAAWD,EAAWiG,MAAK,SAACE,GAAD,OAAmBA,EAAInF,cAAgBA,KAiBxE,IAfAF,EAAAA,EAAAA,YAAU,WACDkF,GACDrG,GAASyG,EAAAA,EAAAA,OAERnG,GACDN,GAASoB,EAAAA,EAAAA,IAAiBvB,EAAawB,MAE5C,CAACrB,EAAUqG,EAAU/F,EAAUT,EAAawB,KAE/CF,EAAAA,EAAAA,YAAU,WACN5B,QAAQ6C,IAAI,qBAAsBiE,GAClC9G,QAAQ6C,IAAI,qBAAsB9B,KACnC,CAAC+F,EAAU/F,KAGT+F,IAAa/F,EACd,OAAO,cAAG9C,UAAU,UAAb,6BAIX,IAAMkJ,EAAkBL,EAASM,QAAQzE,QAAO,SAAC0E,GAAD,OAAoBtG,EAASqG,QAAQb,SAASc,EAAOC,cA4DrG,OACI,SAAC1C,EAAA,EAAD,CAAW3G,UAAU,0BAArB,UACI,UAAC4G,EAAA,EAAD,CAAM5G,UAAU,YAAhB,WACI,SAAC4G,EAAA,SAAD,CAAaC,GAAG,KAAK7G,UAAU,cAA/B,6BAGA,UAAC4G,EAAA,OAAD,YACI,SAAC0C,EAAA,EAAD,KAEA,SAACxC,EAAA,EAAD,CAAK9G,UAAU,OAAf,UACI,UAAC+G,EAAA,EAAD,YACI,SAACC,EAAA,QAAD,CAAY9G,MAAO,CAAEC,SAAU,SAAUC,WAAY,QAArD,0BACA,mBAAQR,QA/DP,SAAC2J,GACtBA,EAAMC,iBACFf,EAAgBrH,SAAW8H,EAAgB9H,OAC3CsH,EAAmB,IAEnBA,EAAmBQ,IA0DgClJ,UAAU,8BAA7C,SACKyI,EAAgBrH,SAAW8H,EAAgB9H,OAAS,eAAiB,oBAKjF8H,EAAgB9H,OAAS,GACtB,SAAC0F,EAAA,EAAD,UACKoC,EAAgBrE,KAAI,SAACuE,GAClB,IAAMtJ,EAAY2I,EAAgBgB,MAAK,SAACC,GAAD,OAAOA,EAAEL,YAAcD,EAAOC,aACrE,OACI,SAACtC,EAAA,EAAD,CAAK9G,GAAI,GAA2BD,UAAU,iBAA9C,UACI,iBACIA,UAAU,gCACVE,MAAO,CAAEsF,OAAQ,UAAWrF,SAAU,UAF1C,WAGI,SAAC6G,EAAA,QAAD,CACI3G,KAAK,WACLC,QAASR,EACTS,SAAU,SAAC2E,GACPA,EAAEC,kBAzFpB,SAACiE,GAC3BV,GAAmB,SAACrD,GAEhB,OADmBA,EAAKoE,MAAK,SAACC,GAAD,OAAOA,EAAEL,YAAcD,EAAOC,aACvChE,EAAKX,QAAO,SAACgF,GAAD,OAAOA,EAAEL,YAAcD,EAAOC,aAA7C,kBAA8DhE,GAA9D,CAAoE+D,OAuF7CO,CAAsBP,IAE1B5I,GAAE,0BAAqB4I,EAAOC,WAC9BrJ,UAAU,OACVE,MAAO,CAAEO,UAAW,iBAExB,kBACIE,QAAO,0BAAqByI,EAAOC,WACnCnJ,MAAO,CAAEsF,OAAQ,WAFrB,SAGK4D,EAAOQ,kBAlBFR,EAAOC,iBA0BrC,cAAGrJ,UAAU,yBAAb,8DC1DxB,EA3F4D,SAAC,GAMtD,IALHyI,EAKE,EALFA,gBACA3C,EAIE,EAJFA,SACA+D,EAGE,EAHFA,kBACA9D,EAEE,EAFFA,aACA+D,EACE,EADFA,YAgBA,OACI,SAACnD,EAAA,EAAD,CAAW3G,UAAU,0BAArB,UACI,UAAC4G,EAAA,EAAD,CAAM5G,UAAU,YAAhB,WACI,SAAC4G,EAAA,SAAD,CAAaC,GAAG,KAAK7G,UAAU,cAA/B,0BAGA,UAAC4G,EAAA,OAAD,YACI,UAACE,EAAA,EAAD,CAAK9G,UAAU,OAAf,WACI,SAAC+G,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,UAAC+G,EAAA,QAAD,YACI,SAACA,EAAA,QAAD,4BACA,SAACA,EAAA,UAAD,CACI3G,KAAK,SACLoG,KAAK,QACLC,MAAOZ,EAASH,MAChBpF,SAAUwF,EACVqB,YAAY,6BAIxB,SAACL,EAAA,EAAD,CAAK9G,GAAI,EAAGD,UAAU,yBAAtB,UACI,SAAC+J,EAAA,EAAD,CAAQpK,QAAQ,UAAUC,QAlCzB,WACrB,IAAMoK,EAAcC,WAAWnE,EAASH,OACnCuE,MAAMF,IACPF,GAAY,SAACK,GAAD,eAAC,UACNA,GADK,IAERC,cAAe3B,EAAgB5D,KAAI,SAACuE,GAAD,MAAa,CAC5CC,UAAWD,EAAOC,UAClB1D,MAAOqE,YA2BC,4BAMPvB,EAAgBrH,OAAS,EACtBqH,EAAgB5D,KAAI,SAACuE,GAAY,IAAD,EACtBzD,EAAK,UAAGG,EAASsE,cAActB,MACjC,SAACuB,GAAD,OAAgBA,EAAWhB,YAAcD,EAAOC,oBADzC,aAAG,EAEX1D,MAEH,OACI,SAACiB,EAAA,EAAD,CAA6B5G,UAAU,iBAAvC,UACI,SAAC4G,EAAA,OAAD,WACI,UAACE,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,eAAID,UAAU,OAAd,SAAsBoJ,EAAOQ,iBAEjC,SAAC7C,EAAA,EAAD,CAAK9G,GAAI,EAAT,UACI,SAAC+G,EAAA,QAAD,WACI,SAACA,EAAA,UAAD,CACI3G,KAAK,SACLqG,MAAOf,GAAS,GAChBpF,SAAU,SAAC2E,GAAD,OACN2E,EACI3E,EACAkE,EAAOC,YAGfjC,YAAY,qBACZpH,UAAU,0BAlBvBoJ,EAAOC,eA4B1B,cAAGrJ,UAAU,yBAAb,2CCgYxB,EAtbkC,WAAO,IAAD,MAC9BwC,GAAW8H,EAAAA,EAAAA,MAEjB,GAAgCzK,EAAAA,EAAAA,UAAS,CACrC6F,UAAW,CAAE2B,MAAO,GAAIF,QAAS,GAAIG,SAAU,IAC/CM,oBAAqB,GACrBjC,MAAO,KACPkC,YAAa,GACbC,QAAS,MACTO,qBAAsB,CAAC,IAEvBN,SAAU,OACVlE,YAAa,GACbxB,YAAa,GACb0C,WAAY,KACZwF,aAAc,KACdC,aAAc,KACdJ,cAAe,CAAC,CAAEf,UAAW,GAAI1D,MAAO,IACxC6B,UAAU,EACVC,cAAe,OACfE,gBAAiB,OACjBD,eAAgB,SAlBpB,eAAO5B,EAAP,KAAiBgE,EAAjB,KAuBA,GAAsCjK,EAAAA,EAAAA,UAAwB,MAA9D,eAAOsG,EAAP,KAAoBsE,EAApB,KACA,GAA0C5K,EAAAA,EAAAA,UAAwB,MAAlE,eAAOuG,EAAP,KAAsBsE,EAAtB,KACA,GAA0C7K,EAAAA,EAAAA,UAAwB,MAAlE,eAAOwG,EAAP,KAAsBsE,EAAtB,KACA,GAAgD9K,EAAAA,EAAAA,UAAkC,MAAlF,eAAO+K,EAAP,KACA,GADA,MAC8C/K,EAAAA,EAAAA,UAAmB,KAAjE,eAAO4I,EAAP,KAAwBC,EAAxB,KAGMC,GAAWrG,EAAAA,EAAAA,MACXD,EAAW,UAAGsG,EAAShH,aAAZ,aAAG,EAAgBU,YAC9BU,EAAkB,UAAG4F,EAAShH,aAAZ,aAAG,EAAgBkC,YACrCM,EAAO,UAAGwE,EAAShH,aAAZ,aAAG,EAAgBwC,QAC1B0G,EAAaC,QAAQ3G,GACrBV,GAAWC,EAAAA,EAAAA,MACjB,GAA4B7D,EAAAA,EAAAA,UAAiC,IAA7D,eAAOyG,GAAP,KAAeyE,GAAf,KAEA,IAA6BlL,EAAAA,EAAAA,UAAiB,IAA9C,iBAAOmG,GAAP,MAAiBgF,GAAjB,MACA,IAAiCnL,EAAAA,EAAAA,UAAiB,IAAlD,iBAAOoG,GAAP,MAAmBgF,GAAnB,OAEAtH,EAAAA,EAAAA,YAAU,WACFtB,GAAeU,GACf+G,GAAY,SAACK,GAAD,eAAC,UACNA,GADK,IAER9H,YAAAA,EACAwB,YAAad,SAGtB,CAACV,EAAaU,IAEjB,IAoGMgD,GAAe,SAACb,GAClB,MAA8BA,EAAEsB,OAAxBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAd,EAAqBrG,KAErByJ,GAAY,SAACoB,GAET,GAAIzE,EAAK0E,WAAW,cAAe,CAC/B,IAAMC,EAAQ3E,EAAK4E,MAAM,KAAK,GAC9B,OAAO,kBACAH,GADP,IAEIxF,WAAU,kBACHwF,EAAUxF,WADR,cAEJ0F,EAAQ1E,MAMrB,GAAIxB,EAAEsB,kBAAkB8E,mBAAqBpG,EAAEsB,OAAO+E,SAAU,CAC5D,IAAMC,EAAiBrD,MAAMsD,KAAKvG,EAAEsB,OAAOkF,iBAAiB7G,KAAI,SAACmD,GAAD,OAAYA,EAAOtB,SACnF,OAAO,kBACAwE,GADP,cAEKzE,EAAO+E,IAKhB,OAAO,kBACAN,GADP,cAEKzE,EAAOC,SAapB/C,EAAAA,EAAAA,YAAU,WACN5B,QAAQ6C,IAAI,qBAAsBgG,KACnC,CAACA,KAEJjH,EAAAA,EAAAA,YAAU,WACN5B,QAAQ6C,IAAI,eAAgBvC,GAC5BN,QAAQ6C,IAAI,eAAgB7B,GAExBV,GACAyH,GAAY,SAACK,GAAD,eAAC,UACNA,GADK,IAER9H,YAAAA,SAGT,CAACA,IAEJ,IA2CMsJ,GAAoB7F,EAASsE,cAAc1F,QAAO,SAACiB,GAAD,MAA+B,KAApBA,EAAM0D,WAAoC,IAAhB1D,EAAMA,SAG7FiG,GAAY,mCAAG,WAAO1G,GAAP,0EACjBA,EAAEsE,iBACFzH,QAAQ6C,IAAI,iCAAkCiH,KAAKC,UAAUhG,EAAU,KAAM,IAC7E/D,QAAQ6C,IAAI,iBAAkBkB,IAMxBiG,EAAiB,IAAIC,UACZC,OAAO,YAAaJ,KAAKC,UAAUhG,EAASJ,YAC3DqG,EAAeE,OAAO,sBAAuBnG,EAAS8B,qBACtDmE,EAAeE,OAAO,QAASnG,EAASH,OACxCoG,EAAeE,OAAO,cAAenG,EAAS+B,aAC9CkE,EAAeE,OAAO,UAAWnG,EAASgC,SAC1CiE,EAAeE,OAAO,uBAAwBJ,KAAKC,UAAUhG,EAASuC,uBAEtE0D,EAAeE,OAAO,WAAYnG,EAASiC,UAC3CgE,EAAeE,OAAO,cAAenG,EAASjC,aAC9CkI,EAAeE,OAAO,cAAenG,EAASzD,aAC1CyD,EAASf,YACTgH,EAAeE,OAAO,aAAcnG,EAASf,YAE7Ce,EAASyE,cACTwB,EAAeE,OAAO,eAAgBnG,EAASyE,cAE/CzE,EAAS0E,cACTuB,EAAeE,OAAO,eAAgBnG,EAAS0E,cAE/CmB,GAAkBvK,OAAS,GAC3B2K,EAAeE,OAAO,gBAAiBJ,KAAKC,UAAUH,KAO1DI,EAAeE,OAAO,WAAYnG,EAAS0B,SAAS0E,YACpDH,EAAeE,OAAO,gBAAiBnG,EAAS2B,eAChDsE,EAAeE,OAAO,kBAAmBnG,EAAS6B,iBAClDoE,EAAeE,OAAO,iBAAkBnG,EAAS4B,gBAEjDqE,EAAehI,SAAQ,SAAC2C,EAAOyF,GAC3BpK,QAAQ6C,IAAR,UAAeuH,EAAf,KAAuBzF,MA3CV,WA+CTmE,EA/CS,iBAgDT9I,QAAQ6C,IAAI,0BACZpC,GAAS4J,EAAAA,EAAAA,IAAWL,IAjDX,+BAmDThK,QAAQ6C,IAAI,8BAnDH,UAoDHpC,GAAS6J,EAAAA,EAAAA,IAAaN,IApDnB,QAqDThK,QAAQ6C,IAAI,2BArDH,QAwDbqG,GAAW,iCACXxH,EAAS,qBACTuH,GAAS,IACTlB,EAAY,CACRpE,UAAW,CAAE2B,MAAO,GAAIF,QAAS,GAAIG,SAAU,IAC/CM,oBAAqB,GACrBjC,MAAO,GACPkC,YAAa,GACbC,QAAS,GACTO,qBAAsB,CAAC,IACvBN,SAAU,GACVlE,YAAa,GACbxB,YAAa,GACb0C,WAAY,KACZwF,aAAc,KACdC,aAAc,KACdJ,cAAe,CAAC,CAAEf,UAAW,GAAI1D,MAAO,IACxC6B,UAAU,EACVC,cAAe,OACfE,gBAAiB,OACjBD,eAAgB,KAEpB+C,EAAe,MACfC,EAAiB,MACjBC,EAAiB,MAhFJ,mDAkFbK,GAAS,6CACTC,GAAW,IAnFE,2DAAH,sDAyFlB,IAA+EpK,EAAAA,EAAAA,GAAiB,EAC5F,SAAC,EAAD,CACIiF,SAAUA,EACVE,SAAUA,GACVC,WAAYA,GACZF,aAAcA,GACdG,iBA7IiB,SAAChB,GAA4C,IAAD,EAC3DoH,EAAI,UAAGpH,EAAEsB,OAAO+F,aAAZ,aAAG,EAAiB,GACtB9F,EAASvB,EAAEsB,OAAXC,KAER,GAAI6F,EAAM,CAEN,IAAME,EAAaC,IAAIC,gBAAgBJ,GAC1B,eAAT7F,GAAuBgE,EAAe+B,GAC7B,iBAAT/F,GAAyBiE,EAAiB8B,GACjC,iBAAT/F,GAAyBkE,EAAiB6B,GAE9C1C,GAAY,SAACK,GAAD,eAAC,UACNA,GADK,cAEP1D,EAAO6F,SAiIZV,aAAcA,GACdzF,YAAaA,EACbC,cAAeA,EACfC,cAAeA,EACfC,OAAQA,MAEZ,SAAC,EAAD,CAAmBmC,gBAAiBA,EAAiBC,mBAAoBA,KAMzE,SAAC,EAAD,CACI5C,SAAUA,EACV+D,kBAxIkB,SAAC3E,EAAwCmE,GAC/D,IAAMsD,EAAe1C,WAAW/E,EAAEsB,OAAOE,OAEzC,KAAIwD,MAAMyC,IAAiBA,GAAgB,GAA3C,CAIA,IAAMC,GAAmB,OAAO9G,EAASsE,eACnCyC,EAAcD,EAAoBE,WAAU,SAACzC,GAAD,OAAgBA,EAAWhB,YAAcA,MAEtE,IAAjBwD,EACAD,EAAoBC,GAAalH,MAAQgH,EAEzCC,EAAoBG,KAAK,CAAE1D,UAAAA,EAAW1D,MAAOgH,IAIjD7C,GAAY,kBACLhE,GADI,IAEPsE,cAAewC,OAsHfnE,gBAAiBA,EACjBI,SAAU+B,EACV7E,aAAcA,GACd+D,YAAaA,MAzBbhJ,GAAR,GAAQA,MAAOC,GAAf,GAAeA,iBAAkBE,GAAjC,GAAiCA,KAAMC,GAAvC,GAAuCA,YAAaC,GAApD,GAAoDA,WAAYM,GAAhE,GAAgEA,KAAMF,GAAtE,GAAsEA,KA6BtE,OACI,SAACoF,EAAA,EAAD,CAAW3G,UAAU,8BAArB,UACI,SAAC4G,EAAA,EAAD,CAAM5G,UAAU,YAAhB,UACI,UAAC4G,EAAA,OAAD,YACI,kBAAMoG,SAAUpB,GAAhB,UACK,KAED,mCACU7K,GAAmB,EAD7B,OACoCD,GAAMM,UAEzCH,IACD,iBAAKjB,UAAU,2CAAf,WACMkB,KACE,SAAC6I,EAAA,EAAD,CAAQpK,QAAQ,YAAYU,KAAK,SAAST,QAAS6B,GAAMzB,UAAU,YAAnE,mBAIJ,SAAC+J,EAAA,EAAD,CACIpK,QAAQ,UACRC,QAAS,SAACsF,IA3QV,WACxBnD,QAAQ6C,IAAI,8BAA+BkB,EAASuC,sBAEpD,IAAI4E,EAAoC,GAqBxC,OAnByB,IAArBlM,KACK+E,EAASJ,UAAUyB,QAAQqB,SAC5ByE,EAAUvH,UAAY,0BAIrByC,MAAMC,QAAQtC,EAASuC,uBACiC,IAAzDvC,EAASuC,qBAAqB3D,OAAOoG,SAAS1J,SAE9CW,QAAQ6C,IAAI,0DACZqI,EAAU5E,qBAAuB,2BAGhCvC,EAASgC,UAASmF,EAAUnF,QAAU,6BAG/C/F,QAAQ6C,IAAI,+BAAgC0B,IAE5CyE,GAAUkC,GAC+B,IAAlCC,OAAOC,KAAKF,GAAW7L,QAoPGgM,KAEDtH,EAAS0B,WAAa1B,EAAS2B,eAC/BqC,GAAY,SAACoB,GAAD,eAAC,UACNA,GADK,IAER1D,UAAU,OAGd1B,EAAS2B,gBAAkB3B,EAAS4B,gBACpCoC,GAAY,SAACoB,GAAD,eAAC,UACNA,GADK,IAER1D,UAAU,OAIdrG,GACAyK,GAAa1G,GAEb3D,OAGRvB,UAAU,YAxBd,SAyBKmB,GAAc0J,EAAa,SAAW,SAAY,eAK9D7E,KACG,SAACqH,EAAA,EAAD,CAAO1N,QAAQ,SAASK,UAAU,OAAlC,SACKgG,KAGRC,KACG,SAACoH,EAAA,EAAD,CAAO1N,QAAQ,UAAUK,UAAU,OAAnC,SACKiG,c,uDC9c7B,IAdkD,SAAC,GAAkC,IAAhC3F,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,SAAUgH,EAAY,EAAZA,MACpE,OACI,mBAAOvH,UAAU,gBAAjB,WACI,kBACIK,KAAK,WACLC,QAASA,EACTC,SAAU,SAAC2E,GAAD,cAAO3E,QAAP,IAAOA,OAAP,EAAOA,EAAW2E,EAAEsB,OAAOlG,aAEzC,iBAAMN,UAAU,WACfuH,IAAS,iBAAMvH,UAAU,eAAhB,SAAgCuH,S,wSCNhD+F,GAAgBC,EAAAA,EAAAA,GAAiB,MACvCD,EAAcE,YAAc,gBAC5B,IAAMC,GAAeC,EAAAA,EAAAA,GAAmB,gBAAiB,CACvDC,UAAWL,IAEPM,GAAYF,EAAAA,EAAAA,GAAmB,aAAc,CACjDC,UAAWE,EAAAA,IAEPC,EAAe,CACnBnO,QAAS,UACTR,MAAM,EACN4O,WAAYC,EAAAA,EACZC,WAAY,eAERZ,EAAqBlL,EAAAA,YAAiB,SAAC+L,EAAmBC,GAC9D,OAYIC,EAAAA,EAAAA,IAAgBF,EAAmB,CACrC/O,KAAM,YAZNkP,EADF,EACEA,SACAlP,EAFF,EAEEA,KACA8O,EAHF,EAGEA,WACAK,EAJF,EAIEA,aACAtO,EALF,EAKEA,UACAkC,EANF,EAMEA,SACAvC,EAPF,EAOEA,QACAP,EARF,EAQEA,QACAmP,EATF,EASEA,YACAR,EAVF,EAUEA,WACG9L,GAXL,YAeMuM,GAASC,EAAAA,EAAAA,IAAmBJ,EAAU,SACtCK,GAAcC,EAAAA,EAAAA,IAAiB,SAAAzJ,GAC/B9F,GACFA,GAAQ,EAAO8F,MAGb0J,GAA4B,IAAfb,EAAsBC,EAAAA,EAAOD,EAE1Cc,GAAqBC,EAAAA,EAAAA,MAAM,OAAD,QAAC,QAC/BC,KAAM,SACDH,OAAqBI,EAAR/M,GAFY,IAG9BkM,IAAKA,EACLnO,UAAWiP,GAAAA,CAAWjP,EAAWwO,EAAQ7O,GAAW,GAAJ,OAAO6O,EAAP,YAAiB7O,GAAW4O,GAAe,GAAJ,OAAOC,EAAP,iBACvFtM,SAAU,CAACqM,IAA4BW,EAAAA,EAAAA,KAAKC,EAAAA,EAAa,CACvDvP,QAAS8O,EACT,aAAcT,EACdtO,QAAS2O,IACPpM,MAGN,OAAK0M,GACeM,EAAAA,EAAAA,KAAKN,GAAD,QAAC,QACvBQ,eAAe,GACZnN,GAFmB,IAGtBkM,SAAKa,EACLK,GAAIlQ,EACJ+C,SAAU2M,KANY1P,EAAO0P,EAAQ,QASzCxB,EAAMG,YAAc,QACpBH,EAAMS,aAAeA,EACrB,IAAeZ,OAAOoC,OAAOjC,EAAO,CAClCkC,KAAM3B,EACN4B,QAAS/B,K,mMCvELgC,EAAuBtN,EAAAA,YAC7B,WAMGgM,GAAQ,IALTE,EAKS,EALTA,SACArO,EAIS,EAJTA,UACAL,EAGS,EAHTA,QAGS,IAFTkH,GAAI8G,OAEK,MAFO,MAEP,EADN1L,GACM,YACHuM,GAASC,EAAAA,EAAAA,IAAmBJ,EAAU,YAC5C,OAAoBa,EAAAA,EAAAA,KAAKvB,GAAD,QACtBQ,IAAKA,EACLnO,UAAWiP,GAAAA,CAAWtP,EAAU,GAAH,OAAM6O,EAAN,YAAgB7O,GAAY6O,EAAQxO,IAC9DiC,OAGPwN,EAAQjC,YAAc,UACtB,Q,2CCdMkC,EAA0BvN,EAAAA,YAAiB,WAM9CgM,GAAQ,IALTE,EAKS,EALTA,SACArO,EAIS,EAJTA,UAIS,IAFT6G,GAAI8G,OAEK,MAFO,MAEP,EADN1L,GACM,YACHuM,GAASC,EAAAA,EAAAA,IAAmBJ,EAAU,eACtCsB,GAAeC,EAAAA,EAAAA,UAAQ,iBAAO,CAClCC,mBAAoBrB,KAClB,CAACA,IACL,OAAoBU,EAAAA,EAAAA,KAAKY,EAAAA,EAAAA,SAA4B,CACnDpJ,MAAOiJ,EACPzN,UAAuBgN,EAAAA,EAAAA,KAAKvB,GAAD,QAAC,QAC1BQ,IAAKA,GACFlM,GAFsB,IAGzBjC,UAAWiP,GAAAA,CAAWjP,EAAWwO,WAIvCkB,EAAWlC,YAAc,aACzB,Q,uECnBMuC,GAAgBxC,EAAAA,EAAAA,GAAiB,MACjCyC,GAAgBzC,EAAAA,EAAAA,GAAiB,MACjC0C,GAAWvC,EAAAA,EAAAA,GAAmB,aAC9BwC,GAAYxC,EAAAA,EAAAA,GAAmB,aAAc,CACjDC,UAAWoC,IAEPI,GAAezC,EAAAA,EAAAA,GAAmB,gBAAiB,CACvDC,UAAWqC,IAEPI,GAAW1C,EAAAA,EAAAA,GAAmB,YAAa,CAC/CC,UAAW,MAEP0C,GAAW3C,EAAAA,EAAAA,GAAmB,YAAa,CAC/CC,UAAW,MAEP2C,GAAa5C,EAAAA,EAAAA,GAAmB,eAChC6C,GAAiB7C,EAAAA,EAAAA,GAAmB,oBAIpC9G,EAAoBzE,EAAAA,YAAiB,WAWxCgM,GAAQ,IAVTE,EAUS,EAVTA,SACArO,EASS,EATTA,UACAwQ,EAQS,EARTA,GACAC,EAOS,EAPTA,KACAC,EAMS,EANTA,OACAC,EAKS,EALTA,KACAzO,EAIS,EAJTA,SAIS,IAFT2E,GAAI8G,OAEK,MAFO,MAEP,EADN1L,GACM,YACHuM,GAASC,EAAAA,EAAAA,IAAmBJ,EAAU,QAC5C,OAAoBa,EAAAA,EAAAA,KAAKvB,GAAD,QAAC,QACvBQ,IAAKA,GACFlM,GAFmB,IAGtBjC,UAAWiP,GAAAA,CAAWjP,EAAWwO,EAAQgC,GAAM,MAAJ,OAAUA,GAAMC,GAAQ,QAAJ,OAAYA,GAAQC,GAAU,UAAJ,OAAcA,IACvGxO,SAAUyO,GAAoBzB,EAAAA,EAAAA,KAAKe,EAAU,CAC3C/N,SAAUA,IACPA,QAGT0E,EAAK4G,YAAc,OACnB5G,EAAKkH,aA1BgB,CACnB6C,MAAM,GA0BR,MAAezD,OAAOoC,OAAO1I,EAAM,CACjCgK,IAAKnB,EACLoB,MAAOX,EACPY,SAAUX,EACVY,KAAMd,EACNV,KAAMa,EACNY,KAAMX,EACNY,OAAQvB,EACRwB,OAAQZ,EACRa,WAAYZ,K,0BC5DRa,E,SAAuBjP,cAAoB,MACjDiP,EAAQ5D,YAAc,oBACtB,O","sources":["components/ConfirmDeleteItem.tsx","components/MasterOutletComponent.tsx","hooks/useMultistepForm.ts","components/ErrorBoundary.tsx","pages/apps/MenuManagement/ManageMenu.tsx","pages/apps/MenuManagement/RegisterItemStep1.tsx","pages/apps/MenuManagement/RegisterItemStep2.tsx","pages/apps/MenuManagement/RegisterItemStep3.tsx","pages/apps/MenuManagement/RegisterNewItem.tsx","pages/apps/MenuManagement/ToggleSwitch.tsx","../node_modules/react-bootstrap/esm/Alert.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface ConfirmDeleteModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n    title?: string;\r\n    message?: string;\r\n}\r\n\r\nconst ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({\r\n    show,\r\n    onClose,\r\n    onConfirm,\r\n    title = 'Confirm Deletion',\r\n    message = 'Are you sure you want to delete this item?',\r\n}) => {\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={onConfirm}>\r\n                    Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmDeleteModal;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col, Alert } from 'react-bootstrap';\r\n\r\nconst MasterOutletComponent = () => {\r\n    const [isChecked, setIsChecked] = useState(true);\r\n\r\n    return (\r\n        <Row className=\"mb-4\">\r\n            <Col md={6}>\r\n                <Form.Group>\r\n                    <Form.Label style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>Master Outlet</Form.Label>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Form.Check\r\n                            type=\"checkbox\"\r\n                            checked={isChecked}\r\n                            onChange={() => setIsChecked(true)}\r\n                            id=\"master-checkbox\"\r\n                            style={{ transform: 'scale(1.2)', marginRight: '8px' }} // Slightly bigger checkbox & spacing\r\n                        />\r\n                        <Form.Label htmlFor=\"master-checkbox\" style={{ fontSize: '1.3rem', marginBottom: '0' }}>\r\n                            Master\r\n                        </Form.Label>\r\n                    </div>\r\n                </Form.Group>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default MasterOutletComponent;\r\n","import { ReactElement, useState } from 'react';\r\nimport { isLabeledStatement } from 'typescript';\r\n\r\nexport function useMultistepForm(steps: ReactElement[]) {\r\n    const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n\r\n    function next() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i >= steps.length - 1) return i;\r\n            return i + 1;\r\n        });\r\n    }\r\n\r\n    function back() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i <= 0) return i;\r\n            return i - 1;\r\n        });\r\n    }\r\n\r\n    function goTo(index: number) {\r\n        setCurrentStepIndex(index);\r\n    }\r\n\r\n    return {\r\n        currentStepIndex,\r\n        step: steps[currentStepIndex],\r\n        steps,\r\n        isFirstStep: currentStepIndex === 0,\r\n        isLastStep: currentStepIndex === steps.length - 1,\r\n        goTo,\r\n        next,\r\n        back,\r\n    };\r\n}\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError() {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.error('Error caught by Error Boundary:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport ErrorBoundary from '../../../components/ErrorBoundary';\r\nimport { categoryItemList, categoryUpdateIsActive } from '../../../redux/menuManagementCategory/actions';\r\nimport { deleteItem, updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { deleteCategory } from '../../../redux/menuManagementCategory/actions';\r\nimport RegisterCategory from './RegisterCategory';\r\nimport { useRedux } from '../../../hooks';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { RootState } from '../../../redux/store';\r\nimport './ManageMenu.css';\r\nimport EditCategory from './EditCategory';\r\nimport ToggleSwitch from './ToggleSwitch';\r\nimport { itemUpdateIsActive } from '../../../redux/menuManagementItem/actions';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface CategoryItem {\r\n    business_id: string;\r\n    category_id: string;\r\n    is_active: boolean;\r\n    category_name: string;\r\n    category_names: { [key: string]: string };\r\n    logo_image: string;\r\n    items: Array<{\r\n        category_id: string;\r\n        item_id: string;\r\n        item_name: string;\r\n        price: number;\r\n        is_active: boolean;\r\n        dietary: string;\r\n        logo_image: string;\r\n        available_order_type: string[];\r\n    }>;\r\n}\r\n\r\nconst ManageMenu: React.FC = () => {\r\n    // const { business_id } = useParams<{ business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const [showCategoryRegistrationModal, setShowCategoryRegistrationModal] = useState(false);\r\n    // const [showCategoryUpdateModal, setShowCategoryUpdateModal] = useState(false);\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [editItem, setEditItem] = useState<CategoryItem['items'][number] | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\r\n    const [categoryDelete, setCategoryDelete] = useState<string | null>(null);\r\n    const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);\r\n    const [itemDelete, setItemDelete] = useState<string | null>(null);\r\n    const [showItemDeleteModal, setShowItemDeleteModal] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            dispatch(categoryItemList(business_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    useEffect(() => {\r\n        if (categories.length > 0 && !selectedCategoryId) {\r\n            setSelectedCategoryId(categories[0].category_id);\r\n        }\r\n    }, [categories, selectedCategoryId]);\r\n    useEffect(() => {\r\n        if (categories.length > 0) {\r\n            const initialToggleStates: { [key: string]: boolean } = {};\r\n            categories.forEach((category: CategoryItem) => {\r\n                initialToggleStates[category.category_id] = category.is_active;\r\n                // Update toggle states for each item inside the category\r\n                category.items.forEach((item) => {\r\n                    initialToggleStates[item.item_id] = item.is_active;\r\n                });\r\n            });\r\n            setToggleStates(initialToggleStates);\r\n        }\r\n    }, [categories]); // Ensures sync when categories are updated\r\n\r\n    const handleCategoryClick = (category_id: string) => {\r\n        console.log('Category Clicked:', category_id); // Debugging log\r\n        // setSelectedCategoryId(category_id === selectedCategoryId ? null : category_id);\r\n        setSelectedCategoryId(category_id);\r\n    };\r\n\r\n    const handleCategoryToggle = (category_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [category_id]: is_active,\r\n        }));\r\n        dispatch(categoryUpdateIsActive(category_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n        // setSelectedBusinessUser(editedBusinessUser);\r\n    };\r\n\r\n    const handleItemToggle = (item_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [item_id]: is_active,\r\n        }));\r\n\r\n        // Dispatch action to update the item status\r\n        dispatch(itemUpdateIsActive(item_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n    };\r\n    const handleRecipe = (business_id: string, item_id: string) => {\r\n        navigate('/apps/recipe', {\r\n            state: { business_id: business_id, item_id: item_id },\r\n        });\r\n    };\r\n\r\n    // const handleCategoryRegister = () => {\r\n    //     console.log('Category Register Clicked');\r\n\r\n    //     if (!showCategoryRegistrationModal) {\r\n    //         setShowCategoryRegistrationModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCategoryUpdate = () => {\r\n    //     console.log('Category Update Clicked');\r\n\r\n    //     if (!showCategoryUpdateModal) {\r\n    //         setShowCategoryUpdateModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCloseCategoryRegistrationModal = () => {\r\n    //     console.log('Category Register Closed');\r\n    //     setShowCategoryRegistrationModal(false);\r\n    // };\r\n\r\n    // const handleCloseCategoryUpdateModal = () => {\r\n    //     console.log('Category Update Clicked');\r\n    //     setShowCategoryUpdateModal(false);\r\n    // };\r\n\r\n    const handleDeleteItem = (item_id: string) => {\r\n        const confirmDeleteitem = window.confirm('Are you sure you want to delete this Item?');\r\n        if (confirmDeleteitem) {\r\n            dispatch(deleteItem(item_id));\r\n            setMessage('Item deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n    const handleItemDelete = (item_id: string) => {\r\n        setItemDelete(item_id);\r\n        setShowItemDeleteModal(true);\r\n    };\r\n\r\n    const confirmItemDelete = () => {\r\n        if (itemDelete) {\r\n            dispatch(deleteItem(itemDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowItemDeleteModal(false);\r\n    };\r\n\r\n    const handleDeleteCategory = (category_id: string) => {\r\n        const confirmDeletecategory = window.confirm('Are you sure you want to delete this Category?');\r\n        if (confirmDeletecategory) {\r\n            dispatch(deleteCategory(category_id));\r\n            setMessage('Category deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    const handleCategoryDelete = (category_id: string) => {\r\n        setCategoryDelete(category_id);\r\n        setShowCategoryDeleteModal(true);\r\n    };\r\n\r\n    const confirmCategoryDelete = () => {\r\n        if (categoryDelete) {\r\n            dispatch(deleteCategory(categoryDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowCategoryDeleteModal(false);\r\n    };\r\n\r\n    const handleEditItem = (item_id: string, category_id: string) => {\r\n        navigate(`/apps/edit-item`, {\r\n            state: { business_id: business_id, category_id: selectedCategoryId, item_id: item_id },\r\n        });\r\n        console.log('category_id: ', category_id);\r\n        console.log('selectedCategoryId: ', selectedCategoryId);\r\n        console.log('setSelectedCategoryId: ', setSelectedCategoryId);\r\n    };\r\n\r\n    // const handleSaveChanges = () => {\r\n    //     if (editItem) {\r\n    //         // Create a FormData object\r\n    //         const formData = new FormData();\r\n\r\n    //         // Append each field of the editItem to the FormData\r\n    //         formData.append('item_id', editItem.item_id);\r\n    //         formData.append('item_name', editItem.item_name);\r\n    //         formData.append('price', editItem.price.toString()); // Ensure the price is a string\r\n    //         formData.append('dietary', editItem.dietary);\r\n    //         formData.append('available_order_type', JSON.stringify(editItem.available_order_type)); // Serialize array\r\n\r\n    //         console.log('Dispatching update with FormData payload', formData);\r\n\r\n    //         // Dispatch the updateItem action with the FormData\r\n    //         dispatch(updateItem(formData));\r\n    //     } else {\r\n    //         setMessage('No item to save.');\r\n    //     }\r\n    // };\r\n\r\n    const filteredItems = categories\r\n        .filter((category: CategoryItem) => !selectedCategoryId || category.category_id === selectedCategoryId)\r\n        .flatMap((category: CategoryItem) => category.items);\r\n\r\n    console.log('Filtered Items:', filteredItems); // Debugging log\r\n\r\n    return (\r\n        <div className=\"manage-menu-container\">\r\n            <div className=\"header\">\r\n                <h2>Item List</h2>\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"add-item-button\"\r\n                        onClick={() =>\r\n                            navigate(`/apps/item-register`, {\r\n                                state: { business_id: business_id, category_id: selectedCategoryId },\r\n                            })\r\n                        }>\r\n                        + Add Item\r\n                    </button>\r\n                    {/* <button className=\"add-item-button\" onClick={handleRecipe}>\r\n                        Recipe\r\n                    </button> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"category-tabs\">\r\n                {categories.map((category: CategoryItem) => (\r\n                    <div\r\n                        className={`category-tab ${selectedCategoryId === category.category_id ? 'active' : ''}`}\r\n                        key={category.category_id}\r\n                        onClick={() => handleCategoryClick(category.category_id)}>\r\n                        <img src={category.logo_image} alt={category.category_name} />\r\n                        <p>{category.category_name}</p>\r\n                        <div>\r\n                            <div onClick={(e) => e.stopPropagation()}>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[category.category_id] || false}\r\n                                    onChange={(checked) => handleCategoryToggle(category.category_id, checked)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <FaRegEdit\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                onClick={() =>\r\n                                    navigate(`/apps/category-update`, {\r\n                                        state: {\r\n                                            business_id: business_id,\r\n                                            category_id: selectedCategoryId,\r\n                                        },\r\n                                    })\r\n                                }\r\n                            />\r\n                            {/* {showCategoryUpdateModal && (\r\n                                <EditCategory show={showCategoryUpdateModal} onClose={handleCloseCategoryUpdateModal} />\r\n                            )} */}\r\n\r\n                            <FaTrash\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                onClick={() => handleCategoryDelete(category.category_id)}\r\n                            />\r\n                            <ConfirmDeleteModal\r\n                                show={showCategoryDeleteModal}\r\n                                onClose={() => setShowCategoryDeleteModal(false)}\r\n                                onConfirm={confirmCategoryDelete}\r\n                                title=\"Delete this Category\"\r\n                                message=\"Are you sure you want to delete this Category? This action cannot be undone.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"add-category-button\"\r\n                    onClick={() => navigate(`/apps/category-register`, { state: { business_id: business_id } })}>\r\n                    + Add Category\r\n                </button>\r\n                {/* {showCategoryRegistrationModal && (\r\n                    <RegisterCategory\r\n                        show={showCategoryRegistrationModal}\r\n                        onClose={handleCloseCategoryRegistrationModal}\r\n                    /> */}\r\n            </div>\r\n\r\n            <div className=\"item-list\">\r\n                {filteredItems.length > 0 ? (\r\n                    filteredItems.map((item: CategoryItem['items'][number]) => {\r\n                        return (\r\n                            <div className=\"item-card\" key={item.item_id}>\r\n                                <img src={item.logo_image} alt={item.item_name} className=\"item-image\" />\r\n                                <div className=\"item-details\">\r\n                                    <h3>{item.item_name}</h3>\r\n                                    <p>Price: {item.price}</p>\r\n                                    <p>Total Amount: 0</p>\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    <button\r\n                                        className=\"add-recipe-button\"\r\n                                        onClick={() => handleRecipe(business_id, item.item_id)}>\r\n                                        + Recipe\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button\r\n                                        className=\"edit-button\"\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}>\r\n                                        Edit\r\n                                    </button> */}\r\n                                    <FaRegEdit\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button className=\"delete-button\" onClick={() => handleDeleteItem(item.item_id)}>\r\n                                        Delete\r\n                                    </button> */}\r\n                                    <FaTrash\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', color: 'red' }}\r\n                                        onClick={() => handleItemDelete(item.item_id)}\r\n                                    />\r\n                                    <ConfirmDeleteModal\r\n                                        show={showItemDeleteModal}\r\n                                        onClose={() => setShowItemDeleteModal(false)}\r\n                                        onConfirm={confirmItemDelete}\r\n                                        title=\"Delete this Item\"\r\n                                        message=\"Are you sure you want to delete this Item? This action cannot be undone.\"\r\n                                    />\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[item.item_id] || false}\r\n                                    onChange={(checked) => handleItemToggle(item.item_id, checked)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <p className=\"no-items-message\">No items available</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ManageMenuWithBoundary: React.FC = () => (\r\n    <ErrorBoundary>\r\n        <ManageMenu />\r\n    </ErrorBoundary>\r\n);\r\n\r\nexport default ManageMenuWithBoundary;\r\n\r\n{\r\n    /* <Row>\r\n<Col md={6}>\r\n    <Form.Group>\r\n        <Form.Label>Item Order Type</Form.Label>\r\n        <div>\r\n            {['delivery', 'pick_up', 'dine_in', 'online'].map((type) => (\r\n                <Form.Check\r\n                    key={type}\r\n                    type=\"checkbox\"\r\n                    label={type.replace('_', ' ').toUpperCase()}\r\n                    name=\"available_order_type\"\r\n                    value={type}\r\n                    checked={formData.available_order_type.includes(type)}\r\n                    onChange={(e) => {\r\n                        const { value, checked } = e.target;\r\n                        const updatedOrderTypes = checked\r\n                            ? [...formData.available_order_type, value]\r\n                            : formData.available_order_type.filter((t) => t !== value);\r\n\r\n                        handleChange({\r\n                            target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                        } as any);\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n        {errors.available_order_type && (\r\n            <small className=\"text-danger\">{errors.available_order_type}</small>\r\n        )}\r\n    </Form.Group>\r\n</Col>\r\n</Row> */\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col, Alert } from 'react-bootstrap';\r\n\r\nexport interface RegisterItemOneProps {\r\n    formData: {\r\n        item_name: {\r\n            hindi: string;\r\n            english: string;\r\n            gujarati: string;\r\n        };\r\n        online_display_name: string;\r\n        price: string;\r\n        description: string;\r\n        dietary: string;\r\n        available_order_type: string[];\r\n        gst_type: string;\r\n        category_id: string;\r\n        business_id: string;\r\n        logo_image: File | null;\r\n        swiggy_image: File | null;\r\n        banner_image: File | null;\r\n        is_loose: boolean;\r\n        quantity_type: string;\r\n        quantity_params: string;\r\n        quantity_value: string;\r\n    };\r\n    errorMsg: string;\r\n    successMsg: string;\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n\r\n    handleFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    logoPreview: string | null;\r\n    swiggyPreview: string | null;\r\n    bannerPreview: string | null;\r\n    errors: Record<string, string>;\r\n}\r\n\r\nconst RegisterItemStep1: React.FC<RegisterItemOneProps> = ({\r\n    formData,\r\n    errorMsg,\r\n    successMsg,\r\n    handleChange,\r\n    handleFileChange,\r\n    logoPreview,\r\n    swiggyPreview,\r\n    bannerPreview,\r\n    errors,\r\n}) => {\r\n    // const [quantityType, setQuantityType] = useState(formData.quantity_type || ''); // State for Quantity Type\r\n    // const [quantityParams, setQuantityParams] = useState(formData.quantity_params || ''); // State for Quantity Params\r\n\r\n    const handleLooseQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { checked } = e.target;\r\n\r\n        handleChange({\r\n            target: { name: 'is_loose', value: checked },\r\n        } as any); // Ensure boolean value is passed\r\n\r\n        // Reset quantity fields when 'is_loose' is unchecked\r\n        if (!checked) {\r\n            handleChange({ target: { name: 'quantity_type', value: '' } } as any);\r\n            handleChange({ target: { name: 'quantity_params', value: '' } } as any);\r\n            handleChange({ target: { name: 'quantity_value', value: '' } } as any);\r\n        }\r\n    };\r\n\r\n    const handleQuantityValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        handleChange({\r\n            target: { name, value },\r\n        } as any); // Adjust to match the input change format\r\n    };\r\n\r\n    const handleQuantityParamsChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const { name, value } = e.target;\r\n        handleChange({\r\n            target: { name, value },\r\n        } as any);\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-item-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Register Item\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Row className=\"mb-3\">\r\n                        {/* Menu Image */}\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Menu Image</Form.Label>\r\n                                <Form.Control type=\"file\" name=\"logo_image\" onChange={handleFileChange} />\r\n                                {logoPreview && <img src={logoPreview} alt=\"Menu Preview\" width=\"100\" />}\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        {/* Swiggy Image */}\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Swiggy Image</Form.Label>\r\n                                <Form.Control type=\"file\" name=\"swiggy_image\" onChange={handleFileChange} />\r\n                                {swiggyPreview && <img src={swiggyPreview} alt=\"Swiggy Preview\" width=\"100\" />}\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        {/* Banner Image */}\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>Banner Image</Form.Label>\r\n                                <Form.Control type=\"file\" name=\"banner_image\" onChange={handleFileChange} />\r\n                                {bannerPreview && <img src={bannerPreview} alt=\"Banner Preview\" width=\"100\" />}\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={4}>\r\n                            <Form.Group>\r\n                                <Form.Label>\r\n                                    Item Name (English) <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"item_name.english\"\r\n                                    required\r\n                                    value={formData.item_name.english}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter Item Name in English\"\r\n                                />\r\n                                {errors.item_name && <small className=\"text-danger\">{errors.item_name}</small>}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Name (Hindi)</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"item_name.hindi\"\r\n                                    value={formData.item_name.hindi}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter Item Name in Hindi\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Name (Gujarati)</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"item_name.gujarati\"\r\n                                    value={formData.item_name.gujarati}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter Item Name in Gujarati\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        {/* ok so now i have another thing to add in 1st step of multistep form : Loose Quantity . If we\r\n                        select it, then Quantity type appears in the form having options Piece, Weight, Voume. If we\r\n                        select Piece then just enter Quantity but if me select Weight then Quantity params appear which\r\n                        gives the option GM, KG. And for Volume, we get the option M, LT. */}\r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Label>Loose Quantity</Form.Label>\r\n                            <Form.Check\r\n                                type=\"checkbox\"\r\n                                name=\"is_loose\"\r\n                                label=\"Is Loose Quantity\"\r\n                                checked={formData.is_loose}\r\n                                onChange={handleLooseQuantityChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* Handle Quantity Type */}\r\n                    {formData.is_loose && (\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Quantity Type</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"quantity_type\"\r\n                                    value={formData.quantity_type}\r\n                                    onChange={handleChange}>\r\n                                    <option value=\"\">Select Quantity Type</option>\r\n                                    <option value=\"piece\">Piece</option>\r\n                                    <option value=\"weight\">Weight</option>\r\n                                    <option value=\"volume\">Volume</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n\r\n                            {/* Depending on Quantity Type, show options for Piece, Weight, or Volume */}\r\n                            {formData.quantity_type === 'weight' && (\r\n                                <>\r\n                                    <Col md={6}>\r\n                                        <Form.Label>Quantity Value</Form.Label>\r\n                                        <Row>\r\n                                            <Col md={7}>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    name=\"quantity_value\"\r\n                                                    value={formData.quantity_value}\r\n                                                    onChange={handleChange}\r\n                                                    placeholder=\"Enter Quantity\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md={5}>\r\n                                                <Form.Select\r\n                                                    name=\"quantity_params\"\r\n                                                    value={formData.quantity_params}\r\n                                                    onChange={handleQuantityParamsChange}>\r\n                                                    <option value=\"\">Select Unit</option>\r\n                                                    <option value=\"gm\">gm</option>\r\n                                                    <option value=\"kg\">kg</option>\r\n                                                </Form.Select>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </>\r\n                            )}\r\n\r\n                            {formData.quantity_type === 'piece' && (\r\n                                <>\r\n                                    <Col md={6}>\r\n                                        <Form.Label>Quantity Value</Form.Label>\r\n                                        <Row>\r\n                                            <Col md={8}>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    name=\"quantity_value\"\r\n                                                    value={formData.quantity_value}\r\n                                                    onChange={handleChange}\r\n                                                    placeholder=\"Enter Quantity\"\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </>\r\n                            )}\r\n\r\n                            {formData.quantity_type === 'volume' && (\r\n                                <>\r\n                                    <Col md={6}>\r\n                                        <Form.Label>Quantity Value</Form.Label>\r\n                                        <Row>\r\n                                            <Col md={7}>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    name=\"quantity_value\"\r\n                                                    value={formData.quantity_value}\r\n                                                    onChange={handleChange}\r\n                                                    placeholder=\"Enter Quantity\"\r\n                                                />\r\n                                            </Col>\r\n                                            <Col md={5}>\r\n                                                <Form.Select\r\n                                                    name=\"quantity_params\"\r\n                                                    value={formData.quantity_params}\r\n                                                    onChange={handleQuantityParamsChange}>\r\n                                                    <option value=\"\">Select Unit</option>\r\n                                                    <option value=\"m\">ml</option>\r\n                                                    <option value=\"lt\">lt</option>\r\n                                                </Form.Select>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </>\r\n                            )}\r\n                        </Row>\r\n                    )}\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Label>Online Display Name</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"online_display_name\"\r\n                                value={formData.online_display_name}\r\n                                onChange={handleChange}\r\n                                placeholder=\"Enter Online Display Name\"\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <Form.Label>Item Description</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"description\"\r\n                                value={formData.description}\r\n                                onChange={handleChange}\r\n                                placeholder=\"Enter Item Description\"\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Label>Item Dietary</Form.Label>\r\n                            <Form.Control\r\n                                as=\"select\"\r\n                                name=\"dietary\"\r\n                                value={formData.dietary}\r\n                                onChange={handleChange}\r\n                                required>\r\n                                <option value=\"\">Select Dietary Type</option>\r\n                                <option value=\"veg\">veg</option>\r\n                                <option value=\"non-veg\">non-veg</option>\r\n                            </Form.Control>\r\n                            {errors.dietary && <small className=\"text-danger\">{errors.dietary}</small>}\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Label>Item GST Type</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"gst_type\"\r\n                                    value={formData.gst_type}\r\n                                    onChange={handleChange}>\r\n                                    <option value=\"\">Select GST Type</option>\r\n                                    <option value=\"goods\">Goods</option>\r\n                                    <option value=\"services\">Services</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Label>\r\n                                    Item Order Type <span className=\"text-danger\">*</span>\r\n                                </Form.Label>\r\n                                {['delivery', 'pick_up', 'dine_in', 'online'].map((option) => (\r\n                                    <Form.Check\r\n                                        key={option}\r\n                                        type=\"checkbox\"\r\n                                        label={option.replace('_', ' ').toUpperCase()}\r\n                                        name=\"available_order_type\"\r\n                                        value={option}\r\n                                        checked={\r\n                                            Array.isArray(formData.available_order_type) &&\r\n                                            formData.available_order_type.includes(option)\r\n                                        }\r\n                                        onChange={(e) => {\r\n                                            const { value, checked } = e.target;\r\n                                            let updatedOrderTypes = checked\r\n                                                ? [\r\n                                                      ...(formData.available_order_type || []).filter(\r\n                                                          (type) => type.trim() !== ''\r\n                                                      ),\r\n                                                      value,\r\n                                                  ] // Remove empty values before adding\r\n                                                : (formData.available_order_type || []).filter(\r\n                                                      (type) => type !== value && type.trim() !== ''\r\n                                                  ); // Ensure empty values are removed\r\n\r\n                                            console.log('Updated Order Types (Cleaned):', updatedOrderTypes); // Debugging\r\n\r\n                                            handleChange({\r\n                                                target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                                            } as unknown as React.ChangeEvent<HTMLInputElement>);\r\n                                        }}\r\n                                    />\r\n                                ))}\r\n                            </Form.Group>\r\n                            {errors.available_order_type && (\r\n                                <small className=\"text-danger\">{errors.available_order_type}</small>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* <Row>\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Label>Item Order Type</Form.Label>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    name=\"available_order_type\"\r\n                                    multiple\r\n                                    value={formData.available_order_type}\r\n                                    onChange={handleChange}\r\n                                    // required\r\n                                >\r\n                                    <option value=\"delivery\">Delivery</option>\r\n                                    <option value=\"pick_up\">Pick-up</option>\r\n                                    <option value=\"dine_in\">Dine-in</option>\r\n                                    <option value=\"online\">Online</option>\r\n                                </Form.Control>\r\n                                {errors.available_order_type && (\r\n                                    <small className=\"text-danger\">{errors.available_order_type}</small>\r\n                                )}\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row> */}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterItemStep1;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col, Alert } from 'react-bootstrap';\r\nimport { useRedux } from '../../../hooks';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { RootState } from '../../../redux/store';\r\nimport { businessList } from '../../../redux/business/actions';\r\nimport { categoryItemList } from '../../../redux/menuManagementCategory/actions';\r\nimport './ManageMenu'; // Importing CSS\r\nimport MasterOutletComponent from '../../../components/MasterOutletComponent';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n}\r\ninterface Business {\r\n    business_id: string;\r\n    business_name: string;\r\n    outlets: Outlet[];\r\n}\r\n\r\ninterface Category {\r\n    category_id: string;\r\n    category_name: string;\r\n    outlets: string[]; // Array of outlet IDs\r\n}\r\n\r\ninterface RegisterItemStep2Props {\r\n    selectedOutlets: Outlet[];\r\n    setSelectedOutlets: React.Dispatch<React.SetStateAction<Outlet[]>>;\r\n}\r\n\r\nconst RegisterItemStep2: React.FC<RegisterItemStep2Props> = ({ selectedOutlets, setSelectedOutlets }) => {\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n    const category_id = location.state?.category_id;\r\n    const { dispatch, appSelector } = useRedux();\r\n    const [isChecked, setIsChecked] = useState(true);\r\n\r\n    // Fetch businesses and categories from Redux\r\n    const businesses = appSelector((state: RootState) => state.business.businesses || []);\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n\r\n    // Find the business and category from the Redux state\r\n    const business = businesses.find((biz: Business) => biz.business_id === business_id);\r\n    const category = categories.find((cat: Category) => cat.category_id === category_id);\r\n\r\n    useEffect(() => {\r\n        if (!business) {\r\n            dispatch(businessList());\r\n        }\r\n        if (!category) {\r\n            dispatch(categoryItemList(business_id, category_id));\r\n        }\r\n    }, [dispatch, business, category, business_id, category_id]);\r\n\r\n    useEffect(() => {\r\n        console.log('Business Response:', business);\r\n        console.log('Category Response:', category);\r\n    }, [business, category]);\r\n\r\n    // Ensure data exists before rendering\r\n    if (!business || !category) {\r\n        return <p className=\"loading\">Loading data...</p>;\r\n    }\r\n\r\n    // Filter business outlets based on category outlet IDs\r\n    const filteredOutlets = business.outlets.filter((outlet: Outlet) => category.outlets.includes(outlet.outlet_id));\r\n\r\n    const toggleOutletSelection = (outlet: Outlet) => {\r\n        setSelectedOutlets((prev) => {\r\n            const isSelected = prev.some((o) => o.outlet_id === outlet.outlet_id);\r\n            return isSelected ? prev.filter((o) => o.outlet_id !== outlet.outlet_id) : [...prev, outlet];\r\n        });\r\n    };\r\n\r\n    const selectAllOutlets = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        event.preventDefault();\r\n        if (selectedOutlets.length === filteredOutlets.length) {\r\n            setSelectedOutlets([]); // Deselect all\r\n        } else {\r\n            setSelectedOutlets(filteredOutlets); // Select all\r\n        }\r\n    };\r\n\r\n    // return (\r\n    //     <div className=\"step2-container\">\r\n    //         <div className=\"header\">\r\n    //             <h3 className=\"title\">Master Outlet</h3>\r\n    //             {/* <button onClick={selectAllOutlets} className=\"active-all-btn\">\r\n    //                 Select All\r\n    //             </button> */}\r\n    //         </div>\r\n    //         <div className=\"outlet-item\">\r\n    //             <input type=\"checkbox\" checked={isChecked} onChange={() => setIsChecked(true)} className=\"checkbox\" />\r\n    //             <span className=\"outlet-name\">Master Outlet</span>\r\n    //         </div>\r\n\r\n    //         <div className=\"header\">\r\n    //             <h3 className=\"title\">Outlet Name</h3>\r\n    //             <button onClick={selectAllOutlets} className=\"active-all-btn\">\r\n    //                 Select All\r\n    //             </button>\r\n    //         </div>\r\n\r\n    //         {filteredOutlets.length > 0 ? (\r\n    //             <div className=\"outlet-list\">\r\n    //                 {filteredOutlets.map((outlet: Outlet) => (\r\n    //                     <div\r\n    //                         key={outlet.outlet_id}\r\n    //                         className=\"outlet-item\"\r\n    //                         onClick={() => toggleOutletSelection(outlet)}>\r\n    //                         <input\r\n    //                             type=\"checkbox\"\r\n    //                             checked={selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id)}\r\n    //                             readOnly\r\n    //                             className=\"checkbox\"\r\n    //                         />\r\n    //                         <span className=\"outlet-name\">{outlet.outlet_name}</span>\r\n    //                     </div>\r\n    //                 ))}\r\n    //             </div>\r\n    //         ) : (\r\n    //             <p className=\"no-outlets\">No outlets available for this Category.</p>\r\n    //         )}\r\n    //     </div>\r\n    // );\r\n    return (\r\n        <Container className=\"register-item-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Select Outlets\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <MasterOutletComponent />\r\n\r\n                    <Row className=\"mb-4\">\r\n                        <Col>\r\n                            <Form.Label style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>Outlet Name</Form.Label>\r\n                            <button onClick={selectAllOutlets} className=\"btn btn-primary btn-sm ms-2\">\r\n                                {selectedOutlets.length === filteredOutlets.length ? 'Deselect All' : 'Select All'}\r\n                            </button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {filteredOutlets.length > 0 ? (\r\n                        <Row>\r\n                            {filteredOutlets.map((outlet: Outlet) => {\r\n                                const isChecked = selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id);\r\n                                return (\r\n                                    <Col md={12} key={outlet.outlet_id} className=\"mb-3 shadow-sm\">\r\n                                        <div\r\n                                            className=\"d-flex align-items-center p-2\"\r\n                                            style={{ cursor: 'pointer', fontSize: '1.2rem' }}>\r\n                                            <Form.Check\r\n                                                type=\"checkbox\"\r\n                                                checked={isChecked}\r\n                                                onChange={(e) => {\r\n                                                    e.stopPropagation(); // Prevent parent div click\r\n                                                    toggleOutletSelection(outlet);\r\n                                                }}\r\n                                                id={`outlet-checkbox-${outlet.outlet_id}`}\r\n                                                className=\"me-3\"\r\n                                                style={{ transform: 'scale(1.5)' }}\r\n                                            />\r\n                                            <label\r\n                                                htmlFor={`outlet-checkbox-${outlet.outlet_id}`}\r\n                                                style={{ cursor: 'pointer' }}>\r\n                                                {outlet.outlet_name}\r\n                                            </label>\r\n                                        </div>\r\n                                    </Col>\r\n                                );\r\n                            })}\r\n                        </Row>\r\n                    ) : (\r\n                        <p className=\"text-muted text-center\">No outlets available for this Category.</p>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterItemStep2;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useRedux } from '../../../hooks';\r\n// import { useParams, useLocation } from 'react-router-dom';\r\n// import { RootState } from '../../../redux/store';\r\n// import { businessList } from '../../../redux/business/actions';\r\n// import { categoryItemList } from '../../../redux/menuManagementCategory/actions';\r\n// import './ManageMenu'; // Importing CSS\r\n\r\n// interface Outlet {\r\n//     outlet_id: string;\r\n//     outlet_name: string;\r\n// }\r\n// interface Business {\r\n//     business_id: string;\r\n//     business_name: string;\r\n//     outlets: Outlet[];\r\n// }\r\n\r\n// interface Item {\r\n//     item_id: string;\r\n//     item_name: string;\r\n//     // outlets: Outlet[];\r\n// }\r\n\r\n// interface Category {\r\n//     category_id: string;\r\n//     category_name: string;\r\n//     items: Item[];\r\n// }\r\n\r\n// interface RegisterItemStep2Props {\r\n//     selectedOutlets: Outlet[];\r\n//     setSelectedOutlets: React.Dispatch<React.SetStateAction<Outlet[]>>;\r\n// }\r\n\r\n// const RegisterItemStep2: React.FC<RegisterItemStep2Props> = ({ selectedOutlets, setSelectedOutlets }) => {\r\n//     // const { business_id } = useParams<{ business_id: string }>();\r\n//     const location = useLocation();\r\n//     const business_id = location.state?.business_id;\r\n//     const category_id = location.state?.category_id;\r\n//     const { dispatch, appSelector } = useRedux();\r\n//     const businesses = appSelector((state: RootState) => state.business.businesses || []);\r\n//     const categories = appSelector((state: RootState) => state.category.categories || []);\r\n\r\n//     useEffect(() => {\r\n//         const response = dispatch(businessList());\r\n//         const categoryResponse = dispatch(categoryItemList(business_id, category_id));\r\n\r\n//         // console.log('Business Response: ', response);\r\n//         // console.log('Category Response: ', categoryResponse);\r\n//     }, [dispatch]);\r\n\r\n//     const business = businesses.find((biz: Business) => biz.business_id === business_id);\r\n//     console.log('Business Response: ', business);\r\n//     const category = categories.find((cat: Category) => cat.category_id === category_id);\r\n//     console.log('Category Response: ', category);\r\n\r\n//     const toggleOutletSelection = (outlet: Outlet) => {\r\n//         setSelectedOutlets((prev: Outlet[]) => {\r\n//             const isSelected = prev.some((o) => o.outlet_id === outlet.outlet_id);\r\n//             return isSelected ? prev.filter((o) => o.outlet_id !== outlet.outlet_id) : [...prev, outlet];\r\n//         });\r\n//     };\r\n\r\n//     const selectAllOutlets = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n//         event.preventDefault();\r\n//         if (business) {\r\n//             setSelectedOutlets(business.outlets);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"step2-container\">\r\n//             <div className=\"header\">\r\n//                 <h3 className=\"title\">Outlet Name</h3>\r\n//                 <button onClick={selectAllOutlets} className=\"active-all-btn\">\r\n//                     Select All\r\n//                 </button>\r\n//             </div>\r\n\r\n//             {business && category ? (\r\n//                 category.outlets.length > 0 ? (\r\n//                     <div className=\"outlet-list\">\r\n//                         {business.outlets\r\n//                             .filter((outlet: Outlet) => category.outlets.includes(outlet.outlet_id)) // Filtering relevant outlets\r\n//                             .map((outlet: Outlet) => (\r\n//                                 <div\r\n//                                     key={outlet.outlet_id}\r\n//                                     className=\"outlet-item\"\r\n//                                     onClick={() => toggleOutletSelection(outlet)}>\r\n//                                     <input\r\n//                                         type=\"checkbox\"\r\n//                                         checked={selectedOutlets.some((o) => o.outlet_id === outlet.outlet_id)}\r\n//                                         readOnly\r\n//                                         className=\"checkbox\"\r\n//                                     />\r\n//                                     <span className=\"outlet-name\">{outlet.outlet_name}</span>\r\n//                                 </div>\r\n//                             ))}\r\n//                     </div>\r\n//                 ) : (\r\n//                     <p className=\"no-outlets\">No outlets available for this Category.</p>\r\n//                 )\r\n//             ) : (\r\n//                 <p className=\"no-outlets\">Category not found.</p>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default RegisterItemStep2;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col } from 'react-bootstrap';\r\nimport './ManageMenu';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n}\r\n\r\ninterface Business {\r\n    business_id: string;\r\n    business_name: string;\r\n}\r\n\r\ninterface RegisterItemStep3Props {\r\n    formData: {\r\n        outlet_prices: { outlet_id: string; price: number }[];\r\n        price: string;\r\n    };\r\n    selectedOutlets: Outlet[];\r\n    business: Business | null;\r\n    handlePriceChange: (e: React.ChangeEvent<HTMLInputElement>, outlet_id: string) => void;\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    setFormData: (update: (prev: any) => any) => void;\r\n}\r\n\r\nconst RegisterItemStep3: React.FC<RegisterItemStep3Props> = ({\r\n    selectedOutlets,\r\n    formData,\r\n    handlePriceChange,\r\n    handleChange,\r\n    setFormData,\r\n}) => {\r\n    // Function to apply master price to all outlets\r\n    const applyMasterPrice = () => {\r\n        const masterPrice = parseFloat(formData.price); // Convert to number\r\n        if (!isNaN(masterPrice)) {\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                outlet_prices: selectedOutlets.map((outlet) => ({\r\n                    outlet_id: outlet.outlet_id,\r\n                    price: masterPrice, // Apply master price\r\n                })),\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-item-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Outlet List\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Row className=\"mb-3\">\r\n                        <Col md={6}>\r\n                            <Form.Group>\r\n                                <Form.Label>Master Price</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"number\"\r\n                                    name=\"price\"\r\n                                    value={formData.price}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"Enter Master Price\"\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={6} className=\"d-flex align-items-end\">\r\n                            <Button variant=\"primary\" onClick={applyMasterPrice}>\r\n                                Apply All\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {selectedOutlets.length > 0 ? (\r\n                        selectedOutlets.map((outlet) => {\r\n                            const price = formData.outlet_prices.find(\r\n                                (priceEntry) => priceEntry.outlet_id === outlet.outlet_id\r\n                            )?.price;\r\n\r\n                            return (\r\n                                <Card key={outlet.outlet_id} className=\"mb-3 shadow-sm\">\r\n                                    <Card.Body>\r\n                                        <Row>\r\n                                            <Col md={6}>\r\n                                                <h3 className=\"mb-2\">{outlet.outlet_name}</h3>\r\n                                            </Col>\r\n                                            <Col md={6}>\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"number\"\r\n                                                        value={price || ''}\r\n                                                        onChange={(e) =>\r\n                                                            handlePriceChange(\r\n                                                                e as React.ChangeEvent<HTMLInputElement>,\r\n                                                                outlet.outlet_id\r\n                                                            )\r\n                                                        }\r\n                                                        placeholder=\"Enter Outlet Price\"\r\n                                                        className=\"price-input\"\r\n                                                    />\r\n                                                </Form.Group>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            );\r\n                        })\r\n                    ) : (\r\n                        <p className=\"text-center text-muted\">No outlets selected.</p>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterItemStep3;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport { Button, Alert, Container, Card } from 'react-bootstrap';\r\nimport { useMultistepForm } from '../../../hooks/useMultistepForm';\r\nimport { registerItem } from '../../../redux/menuManagementItem/actions';\r\nimport './RegisterNewItem.css';\r\nimport RegisterItemStep1 from './RegisterItemStep1';\r\nimport RegisterItemStep2 from './RegisterItemStep2';\r\nimport RegisterItemStep3 from './RegisterItemStep3';\r\nimport { updateItem } from '../../../redux/menuManagementItem/actions';\r\n\r\ninterface Outlet {\r\n    outlet_id: string;\r\n    outlet_name: string;\r\n}\r\ninterface OutletPrice {\r\n    outlet_id: string;\r\n    price: number;\r\n}\r\n\r\ninterface CategoryItem {\r\n    selectedCategoryId: string;\r\n    item_id: string;\r\n    item_names: {\r\n        hindi: string;\r\n        english: string;\r\n        gujarati: string;\r\n    };\r\n    price: number;\r\n    dietary: string;\r\n    available_order_type: string[];\r\n    online_display_name: string;\r\n    description: string;\r\n    gst_type: string;\r\n    category_id: string;\r\n    business_id: string;\r\n    logo_image?: File;\r\n    swiggy_image?: File;\r\n    banner_image?: File;\r\n    is_loose: boolean;\r\n    quantity_type: string;\r\n    quantity_params: string;\r\n    quantity_value: number;\r\n    // outlets: Outlet[];\r\n    outlet_prices: { outlet_id: string; price: number }[];\r\n}\r\n\r\ninterface SelectedBusiness {\r\n    id: string;\r\n    business_id: string;\r\n    name: string;\r\n    business_name: string;\r\n    // outlets: Outlet[]; // Add other required properties\r\n}\r\n\r\nconst RegisterNewItem: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [formData, setFormData] = useState({\r\n        item_name: { hindi: '', english: '', gujarati: '' },\r\n        online_display_name: '',\r\n        price: '80',\r\n        description: '',\r\n        dietary: 'veg',\r\n        available_order_type: [''],\r\n        // Ok so now in available_order_type we have to implement a multiselect option where a user can select one or more options from the above given and it should be in array.\r\n        gst_type: 'none',\r\n        category_id: '',\r\n        business_id: '',\r\n        logo_image: null as File | null,\r\n        swiggy_image: null as File | null,\r\n        banner_image: null as File | null,\r\n        outlet_prices: [{ outlet_id: '', price: 0 }],\r\n        is_loose: false,\r\n        quantity_type: 'none' as 'none' | 'piece' | 'weight' | 'volume',\r\n        quantity_params: 'none' as 'none' | 'gm' | 'kg' | 'ml' | 'lt',\r\n        quantity_value: 'none',\r\n    });\r\n\r\n    const gstTypes = ['goods', 'services'];\r\n\r\n    const [logoPreview, setLogoPreview] = useState<string | null>(null);\r\n    const [swiggyPreview, setSwiggyPreview] = useState<string | null>(null);\r\n    const [bannerPreview, setBannerPreview] = useState<string | null>(null);\r\n    const [selectedBusiness, setSelectedBusiness] = useState<SelectedBusiness | null>(null);\r\n    const [selectedOutlets, setSelectedOutlets] = useState<Outlet[]>([]);\r\n    // const { business_id, selectedCategoryId, item_id } =\r\n    //     useParams<{ business_id: string; selectedCategoryId: string; item_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n    const selectedCategoryId = location.state?.category_id;\r\n    const item_id = location.state?.item_id;\r\n    const isEditMode = Boolean(item_id);\r\n    const navigate = useNavigate();\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n    // const [editItem, setEditItem] = useState<CategoryItem | null>(null);\r\n    const [errorMsg, setError] = useState<string>('');\r\n    const [successMsg, setSuccess] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        if (business_id && selectedCategoryId) {\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                business_id,\r\n                category_id: selectedCategoryId,\r\n            }));\r\n        }\r\n    }, [business_id, selectedCategoryId]);\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\r\n        const { name, value } = e.target;\r\n\r\n        if (name.startsWith('item_name')) {\r\n            const language = name.split('.')[1]; // Get 'hindi', 'english', 'gujarati'\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                item_name: {\r\n                    ...prevData.item_name,\r\n                    [language]: value, // Update the specific language field\r\n                },\r\n            }));\r\n        } else if (e.target instanceof HTMLSelectElement) {\r\n            // Handle multi-select for available_order_type\r\n            const selectedValues = Array.from(e.target.selectedOptions, (option) => option.value);\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                [name]: selectedValues,\r\n            }));\r\n        } else {\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                [name]: value,\r\n            }));\r\n        }\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (editItem) {\r\n    //         setFormData({\r\n    //             item_name: editItem.item_names || { hindi: '', english: '', gujarati: '' },\r\n    //             online_display_name: editItem.online_display_name || '',\r\n    //             price: String(editItem.price || ''),\r\n    //             description: editItem.description || '',\r\n    //             dietary: editItem.dietary || 'veg',\r\n    //             available_order_type: editItem.available_order_type || [''],\r\n    //             gst_type: editItem.gst_type || 'none',\r\n    //             category_id: editItem.category_id || '',\r\n    //             business_id: editItem.business_id || '',\r\n    //             logo_image: null,\r\n    //             swiggy_image: null,\r\n    //             banner_image: null,\r\n    //             outlet_prices: editItem.outlet_prices || [{ outlet_id: '', price: 0 }],\r\n    //             is_loose: editItem.is_loose || false,\r\n    //             quantity_type: editItem.quantity_type as 'none' | 'piece' | 'weight' | 'volume',\r\n    //             quantity_params: editItem.quantity_params as 'none' | 'gm' | 'kg' | 'ml' | 'lt',\r\n\r\n    //             quantity_value: String(editItem.quantity_value || ''),\r\n    //         });\r\n    //     }\r\n    // }, [isEditMode, editItem]);\r\n\r\n    // const validateCurrentStep = () => {\r\n    //     let newErrors: Record<string, string> = {};\r\n\r\n    //     if (currentStepIndex === 0) {\r\n    //         if (!formData.item_name.english.trim()) {\r\n    //             newErrors.item_name = 'Item name is required.';\r\n    //         }\r\n\r\n    //         if (\r\n    //             formData.available_order_type.length === 0 ||\r\n    //             formData.available_order_type.some((type) => !type.trim())\r\n    //         ) {\r\n    //             newErrors.available_order_type = 'Order Type is required.';\r\n    //         }\r\n\r\n    //         if (!formData.dietary) newErrors.dietary = 'Dietary Type is required';\r\n    //     }\r\n    //     setErrors(newErrors);\r\n    //     return Object.keys(newErrors).length === 0;\r\n    // };\r\n\r\n    const validateCurrentStep = () => {\r\n        console.log('Available Order TYPE VALUE:', formData.available_order_type);\r\n\r\n        let newErrors: Record<string, string> = {};\r\n\r\n        if (currentStepIndex === 0) {\r\n            if (!formData.item_name.english.trim()) {\r\n                newErrors.item_name = 'Item name is required.';\r\n            }\r\n\r\n            if (\r\n                !Array.isArray(formData.available_order_type) ||\r\n                formData.available_order_type.filter(Boolean).length === 0\r\n            ) {\r\n                console.log('Available Order TYPE ERROR: Required field is missing!');\r\n                newErrors.available_order_type = 'Order Type is required.';\r\n            }\r\n\r\n            if (!formData.dietary) newErrors.dietary = 'Dietary Type is required';\r\n        }\r\n\r\n        console.log('Available Order TYPE ERROR: ', errors);\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n        const { name, value, type } = e.target;\r\n\r\n        setFormData((prevState) => {\r\n            // Handling nested state updates for item_name fields\r\n            if (name.startsWith('item_name.')) {\r\n                const field = name.split('.')[1]; // Extract 'hindi', 'english', or 'gujarati'\r\n                return {\r\n                    ...prevState,\r\n                    item_name: {\r\n                        ...prevState.item_name,\r\n                        [field]: value, // Update only the specific field\r\n                    },\r\n                };\r\n            }\r\n\r\n            // Handling multiple selection in <select multiple>\r\n            if (e.target instanceof HTMLSelectElement && e.target.multiple) {\r\n                const selectedValues = Array.from(e.target.selectedOptions).map((option) => option.value);\r\n                return {\r\n                    ...prevState,\r\n                    [name]: selectedValues, // Store as an array\r\n                };\r\n            }\r\n\r\n            // Handle normal fields\r\n            return {\r\n                ...prevState,\r\n                [name]: value,\r\n            };\r\n        });\r\n    };\r\n\r\n    // const validateForm = () => {\r\n    //     if (!formData.item_name || !formData.online_display_name || !formData.price) {\r\n    //         setError('Please fill out all required fields.');\r\n    //         return false;\r\n    //     }\r\n    //     return true;\r\n    // };\r\n\r\n    useEffect(() => {\r\n        console.log('Selected Business:', selectedBusiness); // Debugging\r\n    }, [selectedBusiness]);\r\n\r\n    useEffect(() => {\r\n        console.log('business_id:', business_id); // Debugging\r\n        console.log('category_id:', selectedCategoryId); // Debugging\r\n\r\n        if (business_id) {\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                business_id, // Set the business_id\r\n            }));\r\n        }\r\n    }, [business_id]);\r\n\r\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        const { name } = e.target;\r\n\r\n        if (file) {\r\n            // Update the preview\r\n            const previewUrl = URL.createObjectURL(file);\r\n            if (name === 'logo_image') setLogoPreview(previewUrl);\r\n            if (name === 'swiggy_image') setSwiggyPreview(previewUrl);\r\n            if (name === 'banner_image') setBannerPreview(previewUrl);\r\n\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                [name]: file,\r\n            }));\r\n        }\r\n    };\r\n\r\n    // Assuming you have a handlePriceChange function like this:\r\n\r\n    const handlePriceChange = (e: React.ChangeEvent<HTMLInputElement>, outlet_id: string) => {\r\n        const updatedPrice = parseFloat(e.target.value); // Convert to number\r\n\r\n        if (isNaN(updatedPrice) || updatedPrice <= 0) {\r\n            return;\r\n        }\r\n\r\n        const updatedOutletPrices = [...formData.outlet_prices];\r\n        const outletIndex = updatedOutletPrices.findIndex((priceEntry) => priceEntry.outlet_id === outlet_id);\r\n\r\n        if (outletIndex !== -1) {\r\n            updatedOutletPrices[outletIndex].price = updatedPrice; // Update price\r\n        } else {\r\n            updatedOutletPrices.push({ outlet_id, price: updatedPrice }); // If outlet is new, add it\r\n        }\r\n\r\n        // Update the form data with the new prices\r\n        setFormData({\r\n            ...formData,\r\n            outlet_prices: updatedOutletPrices,\r\n        });\r\n    };\r\n\r\n    const validOutletPrices = formData.outlet_prices.filter((price) => price.outlet_id !== '' && price.price !== 0);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        console.log('Final Payload Before Dispatch:', JSON.stringify(formData, null, 2));\r\n        console.log('Final Payload:', formData);\r\n        // if (!validateForm()) {\r\n        //     console.log('Form validation failed');\r\n        //     return;\r\n        // }\r\n\r\n        const formDataToSend = new FormData();\r\n        formDataToSend.append('item_name', JSON.stringify(formData.item_name));\r\n        formDataToSend.append('online_display_name', formData.online_display_name);\r\n        formDataToSend.append('price', formData.price);\r\n        formDataToSend.append('description', formData.description);\r\n        formDataToSend.append('dietary', formData.dietary);\r\n        formDataToSend.append('available_order_type', JSON.stringify(formData.available_order_type));\r\n\r\n        formDataToSend.append('gst_type', formData.gst_type);\r\n        formDataToSend.append('category_id', formData.category_id);\r\n        formDataToSend.append('business_id', formData.business_id);\r\n        if (formData.logo_image) {\r\n            formDataToSend.append('logo_image', formData.logo_image);\r\n        }\r\n        if (formData.swiggy_image) {\r\n            formDataToSend.append('swiggy_image', formData.swiggy_image);\r\n        }\r\n        if (formData.banner_image) {\r\n            formDataToSend.append('banner_image', formData.banner_image);\r\n        }\r\n        if (validOutletPrices.length > 0) {\r\n            formDataToSend.append('outlet_prices', JSON.stringify(validOutletPrices));\r\n        }\r\n\r\n        // formData.outlet_prices.forEach((price: OutletPrice, index: number) => {\r\n        //     formDataToSend.append(`outlet_prices[${index}]`, JSON.stringify(price));\r\n        // });\r\n\r\n        formDataToSend.append('is_loose', formData.is_loose.toString());\r\n        formDataToSend.append('quantity_type', formData.quantity_type);\r\n        formDataToSend.append('quantity_params', formData.quantity_params);\r\n        formDataToSend.append('quantity_value', formData.quantity_value);\r\n\r\n        formDataToSend.forEach((value, key) => {\r\n            console.log(`${key}:`, value);\r\n        });\r\n\r\n        try {\r\n            if (isEditMode) {\r\n                console.log('Dispatching EDIT API: ');\r\n                dispatch(updateItem(formDataToSend));\r\n            } else {\r\n                console.log('Dispatching API request...');\r\n                await dispatch(registerItem(formDataToSend));\r\n                console.log('API request dispatched!');\r\n            }\r\n\r\n            setSuccess('Item registered successfully!');\r\n            navigate(`/apps/manage-menu`);\r\n            setError('');\r\n            setFormData({\r\n                item_name: { hindi: '', english: '', gujarati: '' },\r\n                online_display_name: '',\r\n                price: '',\r\n                description: '',\r\n                dietary: '',\r\n                available_order_type: [''],\r\n                gst_type: '',\r\n                category_id: '',\r\n                business_id: '',\r\n                logo_image: null,\r\n                swiggy_image: null,\r\n                banner_image: null,\r\n                outlet_prices: [{ outlet_id: '', price: 0 }],\r\n                is_loose: false,\r\n                quantity_type: 'none',\r\n                quantity_params: 'none',\r\n                quantity_value: '',\r\n            });\r\n            setLogoPreview(null);\r\n            setSwiggyPreview(null);\r\n            setBannerPreview(null);\r\n        } catch (err) {\r\n            setError('Error registering item, please try again.');\r\n            setSuccess('');\r\n        }\r\n    };\r\n\r\n    // console.log('Selected outlets in parent component:', selectedOutlets);\r\n\r\n    const { steps, currentStepIndex, step, isFirstStep, isLastStep, back, next } = useMultistepForm([\r\n        <RegisterItemStep1\r\n            formData={formData}\r\n            errorMsg={errorMsg}\r\n            successMsg={successMsg}\r\n            handleChange={handleChange}\r\n            handleFileChange={handleFileChange}\r\n            handleSubmit={handleSubmit}\r\n            logoPreview={logoPreview}\r\n            swiggyPreview={swiggyPreview}\r\n            bannerPreview={bannerPreview}\r\n            errors={errors}\r\n        />,\r\n        <RegisterItemStep2 selectedOutlets={selectedOutlets} setSelectedOutlets={setSelectedOutlets} />,\r\n        // selectedBusiness ? (\r\n        //     <RegisterItemStep2 business_id={selectedBusiness.business_id} setSelectedOutlets={setSelectedOutlets} />\r\n        // ) : (\r\n        //     <></>\r\n        // ),\r\n        <RegisterItemStep3\r\n            formData={formData}\r\n            handlePriceChange={handlePriceChange}\r\n            selectedOutlets={selectedOutlets}\r\n            business={selectedBusiness}\r\n            handleChange={handleChange}\r\n            setFormData={setFormData}\r\n        />,\r\n    ]);\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        {' '}\r\n                        {/* Single Form here */}\r\n                        <div>\r\n                            Step {currentStepIndex + 1} of {steps.length}\r\n                        </div>\r\n                        {step}\r\n                        <div className=\"d-flex justify-content-center mt-4 gap-3\">\r\n                            {!isFirstStep && (\r\n                                <Button variant=\"secondary\" type=\"button\" onClick={back} className=\"px-4 py-2\">\r\n                                    Back\r\n                                </Button>\r\n                            )}\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                onClick={(e) => {\r\n                                    if (!validateCurrentStep()) return;\r\n\r\n                                    if (formData.is_loose && !formData.quantity_type) {\r\n                                        setFormData((prevState) => ({\r\n                                            ...prevState,\r\n                                            is_loose: false,\r\n                                        }));\r\n                                    }\r\n                                    if (formData.quantity_type && !formData.quantity_value) {\r\n                                        setFormData((prevState) => ({\r\n                                            ...prevState,\r\n                                            is_loose: false,\r\n                                        }));\r\n                                    }\r\n\r\n                                    if (isLastStep) {\r\n                                        handleSubmit(e);\r\n                                    } else {\r\n                                        next();\r\n                                    }\r\n                                }}\r\n                                className=\"px-4 py-2\">\r\n                                {isLastStep ? (isEditMode ? 'Update' : 'Finish') : 'Next'}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterNewItem;\r\n// <div className=\"register-new-item-container\">\r\n//     <h2>Register New Item</h2>\r\n\r\n//     {errorMsg && <p className=\"error-message\">{errorMsg}</p>}\r\n//     {successMsg && <p className=\"success-message\">{successMsg}</p>}\r\n\r\n//     <form onSubmit={handleSubmit}>\r\n//         <div className=\"form-group\">\r\n//             <label>Item Name (Hindi)</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"item_name.hindi\"\r\n//                 value={formData.item_name.hindi}\r\n//                 onChange={handleInputChange}\r\n//             />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Item Name (English)</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"item_name.english\"\r\n//                 value={formData.item_name.english}\r\n//                 onChange={handleInputChange}\r\n//             />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Item Name (Gujarati)</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"item_name.gujarati\"\r\n//                 value={formData.item_name.gujarati}\r\n//                 onChange={handleInputChange}\r\n//             />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Online Display Name</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 name=\"online_display_name\"\r\n//                 value={formData.online_display_name}\r\n//                 onChange={handleInputChange}\r\n//                 required\r\n//             />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Price</label>\r\n//             <input type=\"number\" name=\"price\" value={formData.price} onChange={handleInputChange} required />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Description</label>\r\n//             <textarea name=\"description\" value={formData.description} onChange={handleInputChange} />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Dietary</label>\r\n//             <textarea name=\"dietary\" value={formData.dietary} onChange={handleInputChange} />\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Available Order Type</label>\r\n//             <select\r\n//                 name=\"available_order_type\"\r\n//                 multiple\r\n//                 value={formData.available_order_type} // Keep the state value synced\r\n//                 onChange={handleInputChange}>\r\n//                 <option value=\"delivery\">Delivery</option>\r\n//                 <option value=\"pick-up\">Pick-up</option>\r\n//                 <option value=\"dine_in\">Dine-in</option>\r\n//                 <option value=\"online\">Online</option>\r\n//             </select>\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>GST Type</label>\r\n//             <select name=\"gst_type\" value={formData.gst_type} onChange={handleInputChange}>\r\n//                 <option value=\"\">Select GST Type</option>\r\n//                 <option value=\"goods\">Goods</option>\r\n//                 <option value=\"services\">Services</option>\r\n//             </select>\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Logo Image</label>\r\n//             <input type=\"file\" name=\"logo_image\" onChange={handleFileChange} accept=\"image/*\" />\r\n//             {logoPreview && <img src={logoPreview} alt=\"Logo Preview\" className=\"image-preview\" />}\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Swiggy Image</label>\r\n//             <input type=\"file\" name=\"swiggy_image\" onChange={handleFileChange} accept=\"image/*\" />\r\n//             {swiggyPreview && <img src={swiggyPreview} alt=\"Swiggy Preview\" className=\"image-preview\" />}\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Banner Image</label>\r\n//             <input type=\"file\" name=\"banner_image\" onChange={handleFileChange} accept=\"image/*\" />\r\n//             {bannerPreview && <img src={bannerPreview} alt=\"Banner Preview\" className=\"image-preview\" />}\r\n//         </div>\r\n\r\n//         <div className=\"form-group\">\r\n//             <label>Outlet Price</label>\r\n//             <input\r\n//                 type=\"number\"\r\n//                 name=\"outlet_prices\"\r\n//                 value={formData.outlet_prices[0]}\r\n//                 onChange={(e) => setFormData({ ...formData, outlet_prices: [e.target.value] })}\r\n//             />\r\n//         </div>\r\n\r\n//         <button type=\"submit\">Register Item</button>\r\n//     </form>\r\n// </div>\r\n","import React from 'react';\r\nimport './ManageMenu'; // Add styles for the switch\r\n\r\ninterface ToggleSwitchProps {\r\n    checked: boolean;\r\n    onChange?: (checked: boolean) => void; // ✅ Make onChange optional\r\n    label?: string;\r\n}\r\n\r\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange, label }) => {\r\n    return (\r\n        <label className=\"toggle-switch\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                onChange={(e) => onChange?.(e.target.checked)} // ✅ Use optional chaining\r\n            />\r\n            <span className=\"slider\"></span>\r\n            {label && <span className=\"switch-label\">{label}</span>}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nconst AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nconst AlertLink = createWithBsPrefix('alert-link', {\n  Component: Anchor\n});\nconst defaultProps = {\n  variant: 'primary',\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nconst Alert = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    bsPrefix,\n    show,\n    closeLabel,\n    closeVariant,\n    className,\n    children,\n    variant,\n    onClose,\n    dismissible,\n    transition,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  const handleClose = useEventCallback(e => {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  const Transition = transition === true ? Fade : transition;\n\n  const alert = /*#__PURE__*/_jsxs(\"div\", {\n    role: \"alert\",\n    ...(!Transition ? props : undefined),\n    ref: ref,\n    className: classNames(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),\n    children: [dismissible && /*#__PURE__*/_jsx(CloseButton, {\n      onClick: handleClose,\n      \"aria-label\": closeLabel,\n      variant: closeVariant\n    }), children]\n  });\n\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/_jsx(Transition, {\n    unmountOnExit: true,\n    ...props,\n    ref: undefined,\n    in: show,\n    children: alert\n  });\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nexport default Object.assign(Alert, {\n  Link: AlertLink,\n  Heading: AlertHeading\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["show","onClose","onConfirm","title","message","onHide","centered","closeButton","variant","onClick","useState","isChecked","setIsChecked","className","md","style","fontSize","fontWeight","type","checked","onChange","id","transform","marginRight","htmlFor","marginBottom","useMultistepForm","steps","currentStepIndex","setCurrentStepIndex","step","isFirstStep","isLastStep","length","goTo","index","next","i","back","ErrorBoundary","state","hasError","error","errorInfo","console","this","props","children","React","ManageMenu","business_id","useLocation","useRedux","dispatch","appSelector","toggleStates","setToggleStates","setMessage","categories","category","selectedCategoryId","setSelectedCategoryId","categoryDelete","setCategoryDelete","showCategoryDeleteModal","setShowCategoryDeleteModal","itemDelete","setItemDelete","showItemDeleteModal","setShowItemDeleteModal","navigate","useNavigate","useEffect","categoryItemList","category_id","initialToggleStates","forEach","is_active","items","item","item_id","confirmItemDelete","deleteItem","setTimeout","confirmCategoryDelete","deleteCategory","filteredItems","filter","flatMap","log","map","src","logo_image","alt","category_name","e","stopPropagation","ToggleSwitch","prev","categoryUpdateIsActive","size","cursor","color","item_name","price","handleRecipe","itemUpdateIsActive","formData","handleChange","errorMsg","successMsg","handleFileChange","logoPreview","swiggyPreview","bannerPreview","errors","handleQuantityParamsChange","target","name","value","Container","Card","as","Row","Col","Form","width","required","english","placeholder","hindi","gujarati","label","is_loose","quantity_type","quantity_value","quantity_params","online_display_name","description","dietary","gst_type","option","replace","toUpperCase","Array","isArray","available_order_type","includes","updatedOrderTypes","trim","selectedOutlets","setSelectedOutlets","location","businesses","business","find","biz","cat","businessList","filteredOutlets","outlets","outlet","outlet_id","MasterOutletComponent","event","preventDefault","some","o","toggleOutletSelection","outlet_name","handlePriceChange","setFormData","Button","masterPrice","parseFloat","isNaN","prevData","outlet_prices","priceEntry","useDispatch","swiggy_image","banner_image","setLogoPreview","setSwiggyPreview","setBannerPreview","selectedBusiness","isEditMode","Boolean","setErrors","setError","setSuccess","prevState","startsWith","field","split","HTMLSelectElement","multiple","selectedValues","from","selectedOptions","validOutletPrices","handleSubmit","JSON","stringify","formDataToSend","FormData","append","toString","key","updateItem","registerItem","file","files","previewUrl","URL","createObjectURL","updatedPrice","updatedOutletPrices","outletIndex","findIndex","push","onSubmit","newErrors","Object","keys","validateCurrentStep","Alert","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","Anchor","defaultProps","transition","Fade","closeLabel","uncontrolledProps","ref","useUncontrolled","bsPrefix","closeVariant","dismissible","prefix","useBootstrapPrefix","handleClose","useEventCallback","Transition","alert","_jsxs","role","undefined","classNames","_jsx","CloseButton","unmountOnExit","in","assign","Link","Heading","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","DivStyledAsH6","CardBody","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Img","Title","Subtitle","Body","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}