{"version":3,"file":"static/js/5039.6a5dc856.chunk.js","mappings":"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","sources":["components/ConfirmDeleteItem.tsx","components/ErrorBoundary.tsx","pages/apps/MenuManagement/ManageMenu.tsx","pages/apps/MenuManagement/ToggleSwitch.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\ninterface ConfirmDeleteModalProps {\r\n    show: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n    title?: string;\r\n    message?: string;\r\n}\r\n\r\nconst ConfirmDeleteModal: React.FC<ConfirmDeleteModalProps> = ({\r\n    show,\r\n    onClose,\r\n    onConfirm,\r\n    title = 'Confirm Deletion',\r\n    message = 'Are you sure you want to delete this item?',\r\n}) => {\r\n    return (\r\n        <Modal show={show} onHide={onClose} centered>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{title}</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <p>{message}</p>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={onClose}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"danger\" onClick={onConfirm}>\r\n                    Delete\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ConfirmDeleteModal;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError() {\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n        console.error('Error caught by Error Boundary:', error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\nimport ErrorBoundary from '../../../components/ErrorBoundary';\r\nimport { categoryItemList, categoryUpdateIsActive } from '../../../redux/menuManagementCategory/actions';\r\nimport { deleteItem, updateItem } from '../../../redux/menuManagementItem/actions';\r\nimport { deleteCategory } from '../../../redux/menuManagementCategory/actions';\r\nimport RegisterCategory from './RegisterCategory';\r\nimport { useRedux } from '../../../hooks';\r\nimport { FaRegEdit, FaTrash } from 'react-icons/fa';\r\nimport { RootState } from '../../../redux/store';\r\nimport './ManageMenu.css';\r\nimport EditCategory from './EditCategory';\r\nimport ToggleSwitch from './ToggleSwitch';\r\nimport { itemUpdateIsActive } from '../../../redux/menuManagementItem/actions';\r\nimport ConfirmDeleteModal from '../../../components/ConfirmDeleteItem';\r\n\r\ninterface CategoryItem {\r\n    business_id: string;\r\n    category_id: string;\r\n    is_active: boolean;\r\n    category_name: string;\r\n    category_names: { [key: string]: string };\r\n    logo_image: string;\r\n    items: Array<{\r\n        category_id: string;\r\n        item_id: string;\r\n        item_name: string;\r\n        price: number;\r\n        is_active: boolean;\r\n        dietary: string;\r\n        logo_image: string;\r\n        available_order_type: string[];\r\n    }>;\r\n}\r\n\r\nconst ManageMenu: React.FC = () => {\r\n    // const { business_id } = useParams<{ business_id: string }>();\r\n    const location = useLocation();\r\n    const business_id = location.state?.business_id;\r\n\r\n    const { dispatch, appSelector } = useRedux();\r\n    // const [showCategoryRegistrationModal, setShowCategoryRegistrationModal] = useState(false);\r\n    // const [showCategoryUpdateModal, setShowCategoryUpdateModal] = useState(false);\r\n    const [toggleStates, setToggleStates] = useState<{ [key: string]: boolean }>({});\r\n    const [isToggled, setIsToggled] = useState(false);\r\n    const [isEditing, setIsEditing] = useState<boolean>(false);\r\n    const [editItem, setEditItem] = useState<CategoryItem['items'][number] | null>(null);\r\n    const [message, setMessage] = useState<string>('');\r\n    const categories = appSelector((state: RootState) => state.category.categories || []);\r\n    const [selectedCategoryId, setSelectedCategoryId] = useState<string | null>(null);\r\n    const [categoryDelete, setCategoryDelete] = useState<string | null>(null);\r\n    const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);\r\n    const [itemDelete, setItemDelete] = useState<string | null>(null);\r\n    const [showItemDeleteModal, setShowItemDeleteModal] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (business_id) {\r\n            dispatch(categoryItemList(business_id));\r\n        }\r\n    }, [dispatch, business_id]);\r\n\r\n    useEffect(() => {\r\n        if (categories.length > 0 && !selectedCategoryId) {\r\n            setSelectedCategoryId(categories[0].category_id);\r\n        }\r\n    }, [categories, selectedCategoryId]);\r\n    useEffect(() => {\r\n        if (categories.length > 0) {\r\n            const initialToggleStates: { [key: string]: boolean } = {};\r\n            categories.forEach((category: CategoryItem) => {\r\n                initialToggleStates[category.category_id] = category.is_active;\r\n                // Update toggle states for each item inside the category\r\n                category.items.forEach((item) => {\r\n                    initialToggleStates[item.item_id] = item.is_active;\r\n                });\r\n            });\r\n            setToggleStates(initialToggleStates);\r\n        }\r\n    }, [categories]); // Ensures sync when categories are updated\r\n\r\n    const handleCategoryClick = (category_id: string) => {\r\n        console.log('Category Clicked:', category_id); // Debugging log\r\n        // setSelectedCategoryId(category_id === selectedCategoryId ? null : category_id);\r\n        setSelectedCategoryId(category_id);\r\n    };\r\n\r\n    const handleCategoryToggle = (category_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [category_id]: is_active,\r\n        }));\r\n        dispatch(categoryUpdateIsActive(category_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n        // setSelectedBusinessUser(editedBusinessUser);\r\n    };\r\n\r\n    const handleItemToggle = (item_id: string, is_active: boolean) => {\r\n        setToggleStates((prev) => ({\r\n            ...prev,\r\n            [item_id]: is_active,\r\n        }));\r\n\r\n        // Dispatch action to update the item status\r\n        dispatch(itemUpdateIsActive(item_id, is_active));\r\n\r\n        setTimeout(() => {\r\n            setMessage('');\r\n            dispatch(categoryItemList(business_id!));\r\n        }, 100);\r\n    };\r\n    const handleRecipe = (business_id: string, item_id: string) => {\r\n        navigate('/apps/recipe', {\r\n            state: { business_id: business_id, item_id: item_id },\r\n        });\r\n    };\r\n\r\n    // const handleCategoryRegister = () => {\r\n    //     console.log('Category Register Clicked');\r\n\r\n    //     if (!showCategoryRegistrationModal) {\r\n    //         setShowCategoryRegistrationModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCategoryUpdate = () => {\r\n    //     console.log('Category Update Clicked');\r\n\r\n    //     if (!showCategoryUpdateModal) {\r\n    //         setShowCategoryUpdateModal(true);\r\n    //     }\r\n    // };\r\n\r\n    // const handleCloseCategoryRegistrationModal = () => {\r\n    //     console.log('Category Register Closed');\r\n    //     setShowCategoryRegistrationModal(false);\r\n    // };\r\n\r\n    // const handleCloseCategoryUpdateModal = () => {\r\n    //     console.log('Category Update Clicked');\r\n    //     setShowCategoryUpdateModal(false);\r\n    // };\r\n\r\n    const handleDeleteItem = (item_id: string) => {\r\n        const confirmDeleteitem = window.confirm('Are you sure you want to delete this Item?');\r\n        if (confirmDeleteitem) {\r\n            dispatch(deleteItem(item_id));\r\n            setMessage('Item deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n    const handleItemDelete = (item_id: string) => {\r\n        setItemDelete(item_id);\r\n        setShowItemDeleteModal(true);\r\n    };\r\n\r\n    const confirmItemDelete = () => {\r\n        if (itemDelete) {\r\n            dispatch(deleteItem(itemDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowItemDeleteModal(false);\r\n    };\r\n\r\n    const handleDeleteCategory = (category_id: string) => {\r\n        const confirmDeletecategory = window.confirm('Are you sure you want to delete this Category?');\r\n        if (confirmDeletecategory) {\r\n            dispatch(deleteCategory(category_id));\r\n            setMessage('Category deleted successfully');\r\n            setTimeout(() => {\r\n                setMessage('');\r\n                dispatch(categoryItemList(business_id!));\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    const handleCategoryDelete = (category_id: string) => {\r\n        setCategoryDelete(category_id);\r\n        setShowCategoryDeleteModal(true);\r\n    };\r\n\r\n    const confirmCategoryDelete = () => {\r\n        if (categoryDelete) {\r\n            dispatch(deleteCategory(categoryDelete));\r\n        }\r\n        setTimeout(() => {\r\n            dispatch(categoryItemList(business_id));\r\n        }, 500);\r\n        setShowCategoryDeleteModal(false);\r\n    };\r\n\r\n    const handleEditItem = (item_id: string, category_id: string) => {\r\n        navigate(`/apps/edit-item`, {\r\n            state: { business_id: business_id, category_id: selectedCategoryId, item_id: item_id },\r\n        });\r\n        console.log('category_id: ', category_id);\r\n        console.log('selectedCategoryId: ', selectedCategoryId);\r\n        console.log('setSelectedCategoryId: ', setSelectedCategoryId);\r\n    };\r\n\r\n    // const handleSaveChanges = () => {\r\n    //     if (editItem) {\r\n    //         // Create a FormData object\r\n    //         const formData = new FormData();\r\n\r\n    //         // Append each field of the editItem to the FormData\r\n    //         formData.append('item_id', editItem.item_id);\r\n    //         formData.append('item_name', editItem.item_name);\r\n    //         formData.append('price', editItem.price.toString()); // Ensure the price is a string\r\n    //         formData.append('dietary', editItem.dietary);\r\n    //         formData.append('available_order_type', JSON.stringify(editItem.available_order_type)); // Serialize array\r\n\r\n    //         console.log('Dispatching update with FormData payload', formData);\r\n\r\n    //         // Dispatch the updateItem action with the FormData\r\n    //         dispatch(updateItem(formData));\r\n    //     } else {\r\n    //         setMessage('No item to save.');\r\n    //     }\r\n    // };\r\n\r\n    const filteredItems = categories\r\n        .filter((category: CategoryItem) => !selectedCategoryId || category.category_id === selectedCategoryId)\r\n        .flatMap((category: CategoryItem) => category.items);\r\n\r\n    console.log('Filtered Items:', filteredItems); // Debugging log\r\n\r\n    return (\r\n        <div className=\"manage-menu-container\">\r\n            <div className=\"header\">\r\n                <h2>Item List</h2>\r\n                <div className=\"button-group\">\r\n                    <button\r\n                        className=\"add-item-button\"\r\n                        onClick={() =>\r\n                            navigate(`/apps/item-register`, {\r\n                                state: { business_id: business_id, category_id: selectedCategoryId },\r\n                            })\r\n                        }>\r\n                        + Add Item\r\n                    </button>\r\n                    {/* <button className=\"add-item-button\" onClick={handleRecipe}>\r\n                        Recipe\r\n                    </button> */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"category-tabs\">\r\n                {categories.map((category: CategoryItem) => (\r\n                    <div\r\n                        className={`category-tab ${selectedCategoryId === category.category_id ? 'active' : ''}`}\r\n                        key={category.category_id}\r\n                        onClick={() => handleCategoryClick(category.category_id)}>\r\n                        <img src={category.logo_image} alt={category.category_name} />\r\n                        <p>{category.category_name}</p>\r\n                        <div>\r\n                            <div onClick={(e) => e.stopPropagation()}>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[category.category_id] || false}\r\n                                    onChange={(checked) => handleCategoryToggle(category.category_id, checked)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <FaRegEdit\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                onClick={() =>\r\n                                    navigate(`/apps/category-update`, {\r\n                                        state: {\r\n                                            business_id: business_id,\r\n                                            category_id: selectedCategoryId,\r\n                                        },\r\n                                    })\r\n                                }\r\n                            />\r\n                            {/* {showCategoryUpdateModal && (\r\n                                <EditCategory show={showCategoryUpdateModal} onClose={handleCloseCategoryUpdateModal} />\r\n                            )} */}\r\n\r\n                            <FaTrash\r\n                                size={20}\r\n                                style={{ cursor: 'pointer', color: 'red' }}\r\n                                onClick={() => handleCategoryDelete(category.category_id)}\r\n                            />\r\n                            <ConfirmDeleteModal\r\n                                show={showCategoryDeleteModal}\r\n                                onClose={() => setShowCategoryDeleteModal(false)}\r\n                                onConfirm={confirmCategoryDelete}\r\n                                title=\"Delete this Category\"\r\n                                message=\"Are you sure you want to delete this Category? This action cannot be undone.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n                <button\r\n                    className=\"add-category-button\"\r\n                    onClick={() => navigate(`/apps/category-register`, { state: { business_id: business_id } })}>\r\n                    + Add Category\r\n                </button>\r\n                {/* {showCategoryRegistrationModal && (\r\n                    <RegisterCategory\r\n                        show={showCategoryRegistrationModal}\r\n                        onClose={handleCloseCategoryRegistrationModal}\r\n                    /> */}\r\n            </div>\r\n\r\n            <div className=\"item-list\">\r\n                {filteredItems.length > 0 ? (\r\n                    filteredItems.map((item: CategoryItem['items'][number]) => {\r\n                        return (\r\n                            <div className=\"item-card\" key={item.item_id}>\r\n                                <img src={item.logo_image} alt={item.item_name} className=\"item-image\" />\r\n                                <div className=\"item-details\">\r\n                                    <h3>{item.item_name}</h3>\r\n                                    <p>Price: {item.price}</p>\r\n                                    <p>Total Amount: 0</p>\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    <button\r\n                                        className=\"add-recipe-button\"\r\n                                        onClick={() => handleRecipe(business_id, item.item_id)}>\r\n                                        + Recipe\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button\r\n                                        className=\"edit-button\"\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}>\r\n                                        Edit\r\n                                    </button> */}\r\n                                    <FaRegEdit\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', marginRight: '10px' }}\r\n                                        onClick={() => handleEditItem(item.item_id, item.category_id)}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"item-actions\">\r\n                                    {/* <button className=\"delete-button\" onClick={() => handleDeleteItem(item.item_id)}>\r\n                                        Delete\r\n                                    </button> */}\r\n                                    <FaTrash\r\n                                        size={20}\r\n                                        style={{ cursor: 'pointer', color: 'red' }}\r\n                                        onClick={() => handleItemDelete(item.item_id)}\r\n                                    />\r\n                                    <ConfirmDeleteModal\r\n                                        show={showItemDeleteModal}\r\n                                        onClose={() => setShowItemDeleteModal(false)}\r\n                                        onConfirm={confirmItemDelete}\r\n                                        title=\"Delete this Item\"\r\n                                        message=\"Are you sure you want to delete this Item? This action cannot be undone.\"\r\n                                    />\r\n                                </div>\r\n                                <ToggleSwitch\r\n                                    checked={toggleStates[item.item_id] || false}\r\n                                    onChange={(checked) => handleItemToggle(item.item_id, checked)}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                ) : (\r\n                    <p className=\"no-items-message\">No items available</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ManageMenuWithBoundary: React.FC = () => (\r\n    <ErrorBoundary>\r\n        <ManageMenu />\r\n    </ErrorBoundary>\r\n);\r\n\r\nexport default ManageMenuWithBoundary;\r\n\r\n{\r\n    /* <Row>\r\n<Col md={6}>\r\n    <Form.Group>\r\n        <Form.Label>Item Order Type</Form.Label>\r\n        <div>\r\n            {['delivery', 'pick_up', 'dine_in', 'online'].map((type) => (\r\n                <Form.Check\r\n                    key={type}\r\n                    type=\"checkbox\"\r\n                    label={type.replace('_', ' ').toUpperCase()}\r\n                    name=\"available_order_type\"\r\n                    value={type}\r\n                    checked={formData.available_order_type.includes(type)}\r\n                    onChange={(e) => {\r\n                        const { value, checked } = e.target;\r\n                        const updatedOrderTypes = checked\r\n                            ? [...formData.available_order_type, value]\r\n                            : formData.available_order_type.filter((t) => t !== value);\r\n\r\n                        handleChange({\r\n                            target: { name: 'available_order_type', value: updatedOrderTypes },\r\n                        } as any);\r\n                    }}\r\n                />\r\n            ))}\r\n        </div>\r\n        {errors.available_order_type && (\r\n            <small className=\"text-danger\">{errors.available_order_type}</small>\r\n        )}\r\n    </Form.Group>\r\n</Col>\r\n</Row> */\r\n}\r\n","import React from 'react';\r\nimport './ManageMenu'; // Add styles for the switch\r\n\r\ninterface ToggleSwitchProps {\r\n    checked: boolean;\r\n    onChange?: (checked: boolean) => void; // ✅ Make onChange optional\r\n    label?: string;\r\n}\r\n\r\nconst ToggleSwitch: React.FC<ToggleSwitchProps> = ({ checked, onChange, label }) => {\r\n    return (\r\n        <label className=\"toggle-switch\">\r\n            <input\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                onChange={(e) => onChange?.(e.target.checked)} // ✅ Use optional chaining\r\n            />\r\n            <span className=\"slider\"></span>\r\n            {label && <span className=\"switch-label\">{label}</span>}\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ToggleSwitch;\r\n","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["show","onClose","onConfirm","title","message","onHide","centered","closeButton","variant","onClick","ErrorBoundary","state","hasError","error","errorInfo","console","this","props","children","React","ManageMenu","business_id","useLocation","useRedux","dispatch","appSelector","useState","toggleStates","setToggleStates","setMessage","categories","category","selectedCategoryId","setSelectedCategoryId","categoryDelete","setCategoryDelete","showCategoryDeleteModal","setShowCategoryDeleteModal","itemDelete","setItemDelete","showItemDeleteModal","setShowItemDeleteModal","navigate","useNavigate","useEffect","categoryItemList","length","category_id","initialToggleStates","forEach","is_active","items","item","item_id","confirmItemDelete","deleteItem","setTimeout","confirmCategoryDelete","deleteCategory","filteredItems","filter","flatMap","log","className","map","src","logo_image","alt","category_name","e","stopPropagation","ToggleSwitch","checked","onChange","prev","categoryUpdateIsActive","size","style","cursor","marginRight","color","item_name","price","handleRecipe","itemUpdateIsActive","label","type","target","toFnRef","ref","value","current","refA","refB","useMemo","a","b","mergeRefs","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","rHyphen","pascalCase","str","toUpperCase","replace","_","chr","slice","createWithBsPrefix","prefix","displayName","Component","defaultProps","BsComponent","bsPrefix","as","Tag","resolvedPrefix","useBootstrapPrefix","_jsx","classNames","p"],"sourceRoot":""}