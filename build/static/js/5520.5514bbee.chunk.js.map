{"version":3,"file":"static/js/5520.5514bbee.chunk.js","mappings":"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","sources":["hooks/useMultistepForm.ts","pages/apps/Business/BusinessInfoForm.tsx","pages/apps/Business/BusinessOutletsForm.tsx","pages/apps/Business/BusinessUsersForm.tsx","pages/apps/Business/BusinessRegister.tsx","../node_modules/react-bootstrap/esm/Alert.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-bootstrap/esm/CloseButton.js","../node_modules/react-bootstrap/esm/Fade.js"],"sourcesContent":["import { ReactElement, useState } from 'react';\r\nimport { isLabeledStatement } from 'typescript';\r\n\r\nexport function useMultistepForm(steps: ReactElement[]) {\r\n    const [currentStepIndex, setCurrentStepIndex] = useState(0);\r\n\r\n    function next() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i >= steps.length - 1) return i;\r\n            return i + 1;\r\n        });\r\n    }\r\n\r\n    function back() {\r\n        setCurrentStepIndex((i) => {\r\n            if (i <= 0) return i;\r\n            return i - 1;\r\n        });\r\n    }\r\n\r\n    function goTo(index: number) {\r\n        setCurrentStepIndex(index);\r\n    }\r\n\r\n    return {\r\n        currentStepIndex,\r\n        step: steps[currentStepIndex],\r\n        steps,\r\n        isFirstStep: currentStepIndex === 0,\r\n        isLastStep: currentStepIndex === steps.length - 1,\r\n        goTo,\r\n        next,\r\n        back,\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Form, Button, Container } from 'react-bootstrap';\r\nimport { Card, Row, Col, Alert } from 'react-bootstrap';\r\n\r\n// Define the types for the props to improve type safety\r\nexport interface BusinessInfoFormProps {\r\n    formData: {\r\n        business_name: string;\r\n        business_contact: string;\r\n        business_address: string;\r\n        gst_no: string;\r\n        cuisine: string;\r\n        currency: string;\r\n        business_logo: File | null;\r\n    };\r\n    errorMsg: string;\r\n    successMsg: string;\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    logoPreview: string | null; // New prop for preview URL\r\n    errors: Record<string, string>;\r\n}\r\n\r\nconst BusinessInfoForm: React.FC<BusinessInfoFormProps> = ({\r\n    formData,\r\n    errorMsg,\r\n    successMsg,\r\n    handleChange,\r\n    handleFileChange,\r\n    handleSubmit,\r\n    logoPreview,\r\n    errors,\r\n}) => {\r\n    // Handle changes for form fields, with phone number validation\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n\r\n        if (name === 'business_contact') {\r\n            // Allow only numeric values and limit the length to 10 digits\r\n            const numericValue = value.replace(/\\D/g, ''); // Remove non-numeric characters\r\n            const updatedValue = numericValue.slice(0, 10); // Limit to 10 digits\r\n            handleChange({\r\n                target: {\r\n                    name,\r\n                    value: updatedValue,\r\n                },\r\n            } as React.ChangeEvent<HTMLInputElement>);\r\n        } else {\r\n            handleChange(e); // For other fields, just pass the event\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Register Business\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        {/* Business Logo Field at the Top */}\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={12} className=\"text-center\">\r\n                                <Form.Label>Business Logo</Form.Label>\r\n                                <div className=\"logo-preview-container\">\r\n                                    {logoPreview && (\r\n                                        <img\r\n                                            src={logoPreview}\r\n                                            alt=\"Business Logo\"\r\n                                            className=\"logo-preview\"\r\n                                            style={{ maxWidth: '150px', maxHeight: '150px' }} // Added logo size limits\r\n                                        />\r\n                                    )}\r\n                                </div>\r\n                                <Form.Control\r\n                                    type=\"file\"\r\n                                    name=\"business_logo\"\r\n                                    onChange={handleFileChange}\r\n                                    accept=\"image/*\"\r\n                                    required\r\n                                />\r\n                            </Col>\r\n                            {errors.business_logo && <small className=\"text-danger\">{errors.business_logo}</small>}\r\n                        </Row>\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Business Name</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"business_name\"\r\n                                    value={formData.business_name}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"Enter business name\"\r\n                                />\r\n                                {errors.business_name && <small className=\"text-danger\">{errors.business_name}</small>}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <Form.Label>Business Contact</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"business_contact\"\r\n                                    value={formData.business_contact}\r\n                                    onChange={handleInputChange} // Updated to handleInputChange\r\n                                    required\r\n                                    placeholder=\"Enter business contact number\"\r\n                                />\r\n                                {errors.business_contact && (\r\n                                    <small className=\"text-danger\">{errors.business_contact}</small>\r\n                                )}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Business Address</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"business_address\"\r\n                                    value={formData.business_address}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"Enter business address\"\r\n                                />\r\n                                {errors.business_address && (\r\n                                    <small className=\"text-danger\">{errors.business_address}</small>\r\n                                )}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <Form.Label>GST Number</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"gst_no\"\r\n                                    value={formData.gst_no}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"Enter GST number\"\r\n                                />\r\n                                {errors.gst_no && <small className=\"text-danger\">{errors.gst_no}</small>}\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mb-3\">\r\n                            <Col md={6}>\r\n                                <Form.Label>Cuisine</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"cuisine\"\r\n                                    value={formData.cuisine}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"Enter cuisine\"\r\n                                />\r\n                                {errors.cuisine && <small className=\"text-danger\">{errors.cuisine}</small>}\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <Form.Label>Currency</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    name=\"currency\"\r\n                                    value={formData.currency}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"Enter currency\"\r\n                                />\r\n                                {errors.currency && <small className=\"text-danger\">{errors.currency}</small>}\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BusinessInfoForm;\r\n","import React, { useEffect, useState, ChangeEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Button, Container, Row, Col, Alert, Card } from 'react-bootstrap';\r\nimport { languageList } from '../../../redux/business/actions';\r\nimport { RootState } from '../../../redux/reducers';\r\n\r\ninterface Outlet {\r\n    outlet_name: string;\r\n    outlet_type: string;\r\n    is_primary_outlet: boolean;\r\n    outlet_address: string;\r\n    outlet_gst_no: string;\r\n    language_id: string;\r\n    [key: string]: string | boolean;\r\n}\r\n\r\ninterface BusinessOutletsFormProps {\r\n    formData: {\r\n        outlets: Outlet[];\r\n    };\r\n    errorMsg: string;\r\n    successMsg: string;\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    onOutletsChange: (outlets: Outlet[]) => void;\r\n    languages: { id: string; name: string }[]; // Add this line\r\n    // errors: string; // Add this line\r\n}\r\n\r\nconst BusinessOutletsForm: React.FC<BusinessOutletsFormProps> = ({\r\n    formData,\r\n    errorMsg,\r\n    successMsg,\r\n    handleSubmit,\r\n    onOutletsChange,\r\n    // errors,\r\n    handleChange,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const { languages, loading, error } = useSelector((state: RootState) => state.language) as {\r\n        languages: { id: string; name: string }[];\r\n        loading: boolean;\r\n        error: string | null;\r\n    };\r\n\r\n    const outletTypes = ['coco', 'cofo', 'fofo', 'foco'];\r\n\r\n    const [outlets, setOutlets] = useState<Outlet[]>(formData.outlets);\r\n    const [validationErrors, setValidationErrors] = useState<Outlet[]>([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch languages if not already loaded\r\n        if (!languages || languages.length === 0) {\r\n            dispatch(languageList());\r\n        }\r\n    }, [dispatch, languages]);\r\n\r\n    const addOutlet = () => {\r\n        const newOutlet: Outlet = {\r\n            outlet_name: '',\r\n            outlet_type: '',\r\n            is_primary_outlet: false,\r\n            outlet_address: '',\r\n            outlet_gst_no: '',\r\n            language_id: '',\r\n        };\r\n        const updatedOutlets = [...outlets, newOutlet];\r\n        setOutlets(updatedOutlets);\r\n        onOutletsChange(updatedOutlets);\r\n    };\r\n\r\n    const removeOutlet = (index: number) => {\r\n        if (outlets.length === 1) {\r\n            alert('At least one outlet should be there!');\r\n            return;\r\n        }\r\n        const updatedOutlets = outlets.filter((_, i) => i !== index);\r\n        setOutlets(updatedOutlets);\r\n        onOutletsChange(updatedOutlets);\r\n    };\r\n\r\n    const handleOutletFieldChange = (index: number, field: string, value: string) => {\r\n        const updatedOutlets = [...formData.outlets];\r\n        updatedOutlets[index][field] = value;\r\n        onOutletsChange(updatedOutlets);\r\n    };\r\n\r\n    const validateOutlet = (outlet: Outlet) => {\r\n        const errors: any = {};\r\n\r\n        // Validate outlet_name\r\n        if (!outlet.outlet_name) errors.outlet_name = 'Outlet name is required';\r\n\r\n        // Validate outlet_type\r\n        if (!outlet.outlet_type) errors.outlet_type = 'Outlet type is required';\r\n\r\n        // Validate outlet_address\r\n        if (!outlet.outlet_address) errors.outlet_address = 'Outlet address is required';\r\n\r\n        // Validate outlet_gst_no\r\n        if (!outlet.outlet_gst_no) errors.outlet_gst_no = 'Outlet GST number is required';\r\n\r\n        // Validate language_id\r\n        if (!outlet.language_id) errors.language_id = 'Language is required';\r\n\r\n        return errors;\r\n    };\r\n\r\n    const handleInputChange = (\r\n        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>,\r\n        index: number\r\n    ) => {\r\n        const { name, value, type } = e.target;\r\n        const updatedOutlets = [...outlets];\r\n\r\n        if (type === 'checkbox') {\r\n            updatedOutlets[index].is_primary_outlet = (e.target as HTMLInputElement).checked;\r\n        } else {\r\n            updatedOutlets[index][name as keyof Outlet] = value;\r\n        }\r\n\r\n        setOutlets(updatedOutlets);\r\n        onOutletsChange(updatedOutlets);\r\n        setValidationErrors([]);\r\n    };\r\n\r\n    const handleFormSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        const errors = outlets.map(validateOutlet);\r\n        const hasErrors = errors.some((error) => Object.keys(error).length > 0);\r\n\r\n        if (hasErrors) {\r\n            setValidationErrors(errors);\r\n            return;\r\n        }\r\n\r\n        handleSubmit(e);\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Register Outlets\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={handleFormSubmit}>\r\n                        {outlets.map((outlet, index) => (\r\n                            <div key={index}>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>Outlet Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"outlet_name\"\r\n                                            value={outlet.outlet_name}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter outlet name\"\r\n                                        />\r\n                                        {validationErrors[index]?.outlet_name && (\r\n                                            <Alert variant=\"danger\">{validationErrors[index]?.outlet_name}</Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group controlId={`outlet-type-${index}`}>\r\n                                            <Form.Label>Outlet Type</Form.Label>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                name=\"outlet_type\"\r\n                                                value={outlet.outlet_type}\r\n                                                onChange={(e) => handleInputChange(e, index)}\r\n                                                required>\r\n                                                <option value=\"\">Select Outlet Type</option>\r\n                                                {outletTypes.map((type, idx) => (\r\n                                                    <option key={idx} value={type}>\r\n                                                        {type}\r\n                                                    </option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n                                            {validationErrors[index]?.outlet_type && (\r\n                                                <Alert variant=\"danger\">{validationErrors[index]?.outlet_type}</Alert>\r\n                                            )}\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>Is Primary Outlet</Form.Label>\r\n                                        <Form.Check\r\n                                            type=\"switch\"\r\n                                            id={`is-primary-outlet-${index}`}\r\n                                            name=\"is_primary_outlet\"\r\n                                            checked={outlet.is_primary_outlet}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>Outlet Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"outlet_address\"\r\n                                            value={outlet.outlet_address}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter outlet address\"\r\n                                        />\r\n                                        {validationErrors[index]?.outlet_address && (\r\n                                            <Alert variant=\"danger\">{validationErrors[index]?.outlet_address}</Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>Outlet GST Number</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"outlet_gst_no\"\r\n                                            value={outlet.outlet_gst_no}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter GST number\"\r\n                                        />\r\n                                        {validationErrors[index]?.outlet_gst_no && (\r\n                                            <Alert variant=\"danger\">{validationErrors[index]?.outlet_gst_no}</Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>Language</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"language_id\"\r\n                                            value={outlet.language_id}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required>\r\n                                            <option value=\"\">Select Language</option>\r\n                                            {loading ? (\r\n                                                <option disabled>Loading languages...</option>\r\n                                            ) : error ? (\r\n                                                <option disabled>Error loading languages</option>\r\n                                            ) : (\r\n                                                languages.map((language) => (\r\n                                                    <option key={language.id} value={language.id}>\r\n                                                        {language.name}\r\n                                                    </option>\r\n                                                ))\r\n                                            )}\r\n                                        </Form.Control>\r\n                                        {validationErrors[index]?.language_id && (\r\n                                            <Alert variant=\"danger\">{validationErrors[index]?.language_id}</Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col className=\"d-flex justify-content-between\">\r\n                                        <Button\r\n                                            variant=\"danger\"\r\n                                            onClick={() => removeOutlet(index)}\r\n                                            style={{ borderRadius: '1.15rem' }}>\r\n                                            Remove Outlet\r\n                                        </Button>\r\n                                        <Button\r\n                                            variant=\"primary\"\r\n                                            onClick={addOutlet}\r\n                                            style={{ borderRadius: '1.15rem' }}>\r\n                                            Add Outlet\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        ))}\r\n                    </Form>\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BusinessOutletsForm;\r\n","import React, { useState, ChangeEvent } from 'react';\r\nimport { Form, Button, Container, Row, Col, Alert, Card } from 'react-bootstrap';\r\nimport Users from '../../dashboards/DashBoard1/Users';\r\n\r\n// Define the types for the form data (users)\r\ninterface UserDataType {\r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n    phone_number: string;\r\n    address: string;\r\n    [key: string]: string | boolean;\r\n}\r\n\r\ninterface BusinessUsersFormProps {\r\n    formData: {\r\n        business_users: UserDataType[]; // Array of user objects\r\n    };\r\n    errorMsg: string;\r\n    successMsg: string;\r\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleFileChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    handleSubmit: (e: React.FormEvent) => void;\r\n    onUsersChange: (business_users: UserDataType[]) => void;\r\n}\r\n\r\nconst BusinessUsersForm: React.FC<BusinessUsersFormProps> = ({\r\n    formData,\r\n    errorMsg,\r\n    successMsg,\r\n    handleChange,\r\n    handleFileChange,\r\n    handleSubmit,\r\n    onUsersChange,\r\n}) => {\r\n    // Add a new user to the array\r\n    const addUser = () => {\r\n        const newUser: UserDataType = {\r\n            first_name: '',\r\n            last_name: '',\r\n            email: '',\r\n            phone_number: '',\r\n            address: '',\r\n        };\r\n        const updatedUsers = [...formData.business_users, newUser];\r\n        onUsersChange(updatedUsers); // Update at parent level\r\n    };\r\n\r\n    // Remove a user from the array\r\n    const removeUser = (index: number) => {\r\n        if (formData.business_users.length === 1) {\r\n            alert(\"At least one Business User should be there!\");\r\n            return;\r\n        }\r\n        const updatedUsers = formData.business_users.filter((_, i) => i !== index);\r\n        onUsersChange(updatedUsers); // Update at parent level\r\n    };\r\n\r\n    // Handle input changes dynamically\r\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number) => {\r\n        const { name, value } = e.target;\r\n\r\n        // Create a copy of the users data to ensure immutability\r\n        const updatedUsers = [...formData.business_users];\r\n\r\n        // If the field is phone_number, only allow digits and limit to 10 digits\r\n        if (name === 'phone_number') {\r\n            const numericValue = value.replace(/\\D/g, ''); // Remove non-numeric characters\r\n            updatedUsers[index][name as keyof UserDataType] = numericValue.slice(0, 10); // Limit to 10 digits\r\n        } else {\r\n            updatedUsers[index][name as keyof UserDataType] = value;\r\n        }\r\n\r\n        onUsersChange(updatedUsers); // Pass the updated users to the parent\r\n    };\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Header as=\"h2\" className=\"text-center\">\r\n                    Register Business Users\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        {formData.business_users.map((user, index) => (\r\n                            <div key={index}>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>First Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"first_name\"\r\n                                            value={user.first_name}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter first name\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>Last Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"last_name\"\r\n                                            value={user.last_name}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter last name\"\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            value={user.email}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter email\"\r\n                                        />\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Label>Phone Number</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"phone_number\"\r\n                                            value={user.phone_number}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter phone number\"\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col>\r\n                                        <Form.Label>Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"address\"\r\n                                            value={user.address}\r\n                                            onChange={(e) => handleInputChange(e, index)}\r\n                                            required\r\n                                            placeholder=\"Enter address\"\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"mb-3\">\r\n                                    <Col className=\"d-flex justify-content-between\">\r\n                                        <Button\r\n                                            variant=\"danger\"\r\n                                            onClick={() => removeUser(index)}\r\n                                            style={{ borderRadius: '1.15rem' }}>\r\n                                            Remove User\r\n                                        </Button>\r\n                                        {index === formData.business_users.length - 1 && (\r\n                                            <Button\r\n                                                variant=\"primary\"\r\n                                                onClick={addUser}\r\n                                                style={{ borderRadius: '1.15rem' }}>\r\n                                                Add User\r\n                                            </Button>\r\n                                        )}\r\n                                    </Col>\r\n                                </Row>\r\n                                <hr />\r\n                            </div>\r\n                        ))}\r\n                    </Form>\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BusinessUsersForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerBusiness } from '../../../redux/business/actions';\r\nimport { Button, Alert, Container, Card } from 'react-bootstrap';\r\nimport { useMultistepForm } from '../../../hooks/useMultistepForm';\r\nimport BusinessInfoForm from './BusinessInfoForm';\r\nimport BusinessOutletsForm from './BusinessOutletsForm';\r\nimport BusinessUsersForm from './BusinessUsersForm';\r\n\r\n// Define the payload type for the registerBusiness action\r\ninterface RegisterBusinessPayload {\r\n    business_name: string;\r\n    business_contact: string;\r\n    business_address: string;\r\n    gst_no: string;\r\n    cuisine: string;\r\n    currency: string;\r\n    business_logo: File | null;\r\n    business_users: any; // define the type for business users\r\n    outlets: any; // define the type for outlets\r\n}\r\n\r\nconst RegisterBusiness: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { error, success } = useSelector((state: any) => state.business);\r\n\r\n    const [formData, setFormData] = useState({\r\n        business_name: '',\r\n        business_logo: null as File | null,\r\n        business_contact: '',\r\n        business_address: '',\r\n        gst_no: '',\r\n        cuisine: '',\r\n        currency: '',\r\n        business_users: [\r\n            {\r\n                first_name: '',\r\n                last_name: '',\r\n                email: '',\r\n                phone_number: '',\r\n                address: '',\r\n            },\r\n        ],\r\n        outlets: [\r\n            {\r\n                outlet_name: '',\r\n                outlet_type: '',\r\n                is_primary_outlet: false,\r\n                outlet_address: '',\r\n                outlet_gst_no: '',\r\n                language_id: '',\r\n            },\r\n        ],\r\n    });\r\n\r\n    const [logoPreview, setLogoPreview] = useState<string | null>(null);\r\n    const [errorMsg, setError] = useState<string>('');\r\n    const [successMsg, setSuccess] = useState<string>('');\r\n    const [formSubmitted, setFormSubmitted] = useState<boolean>(false);\r\n    const [errors, setErrors] = useState<Record<string, string>>({});\r\n\r\n    const [languages, setLanguages] = useState<{ id: string; name: string }[]>([]);\r\n\r\n    // Load form data from localStorage when the component mounts\r\n    useEffect(() => {\r\n        const savedFormData = localStorage.getItem('registerBusinessFormData');\r\n        if (savedFormData) {\r\n            setFormData(JSON.parse(savedFormData));\r\n        }\r\n    }, []);\r\n\r\n    // Update localStorage whenever form data changes\r\n    useEffect(() => {\r\n        localStorage.setItem('registerBusinessFormData', JSON.stringify(formData));\r\n    }, [formData]);\r\n\r\n    const handleOutletChange = (updatedOutlets: any[]) => {\r\n        setFormData((prevData) => ({\r\n            ...prevData,\r\n            outlets: updatedOutlets,\r\n        }));\r\n    };\r\n\r\n    const handleUserChange = (updatedUsers: any[]) => {\r\n        setFormData((prevData) => ({\r\n            ...prevData,\r\n            business_users: updatedUsers,\r\n        }));\r\n    };\r\n\r\n    const validateCurrentStep = (): boolean => {\r\n        let newErrors: Record<string, string> = {};\r\n\r\n        if (currentStepIndex === 0) {\r\n            // Validate Business Info Step\r\n            if (!formData.business_name.trim()) newErrors.business_name = 'Business name is required.';\r\n            if (!formData.business_contact.trim()) newErrors.business_contact = 'Business contact is required.';\r\n            if (!formData.business_address.trim()) newErrors.business_address = 'Business address is required.';\r\n            if (!formData.gst_no.trim()) newErrors.gst_no = 'GST number is required.';\r\n            if (!formData.cuisine.trim()) newErrors.cuisine = 'Cuisine is required.';\r\n            if (!formData.currency.trim()) newErrors.currency = 'Currency is required.';\r\n            if (!formData.business_logo) newErrors.business_logo = 'Business logo is required.';\r\n        } else if (currentStepIndex === 1) {\r\n            // Validate Business Outlets Step\r\n            formData.outlets.forEach((outlet, index) => {\r\n                if (!outlet.outlet_name.trim()) newErrors[`outlet_name_${index}`] = 'Outlet name is required.';\r\n                if (!outlet.outlet_address.trim()) newErrors[`outlet_address_${index}`] = 'Outlet address is required.';\r\n            });\r\n        } else if (currentStepIndex === 2) {\r\n            // Validate Business Users Step\r\n            formData.business_users.forEach((user, index) => {\r\n                if (!user.first_name.trim()) newErrors[`first_name_${index}`] = 'First name is required.';\r\n                if (!user.email.trim()) newErrors[`email_${index}`] = 'Email is required.';\r\n            });\r\n        }\r\n\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n        const { name, value } = e.target;\r\n        setFormData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        if (file) {\r\n            if (!file.type.startsWith('image/')) {\r\n                alert('Please upload an image file.');\r\n                return;\r\n            }\r\n\r\n            setFormData((prevData) => ({\r\n                ...prevData,\r\n                business_logo: file,\r\n            }));\r\n            const previewUrl = URL.createObjectURL(file);\r\n            setLogoPreview(previewUrl);\r\n\r\n            // Cleanup the previous URL after component unmount or file change\r\n            return () => {\r\n                URL.revokeObjectURL(previewUrl);\r\n            };\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        console.log('Final Payload:', formData);\r\n\r\n        if (formSubmitted) return;\r\n\r\n        setFormSubmitted(true);\r\n\r\n        // Validate required fields for outlets and business_users\r\n        // if (formData.outlets.length === 0 || formData.business_users.length === 0) {\r\n        //     setError('At least one outlet and one business user are required.');\r\n        //     setFormSubmitted(false);\r\n        //     return;\r\n        // }\r\n\r\n        const formDataToSend = new FormData();\r\n        formDataToSend.append('business_name', formData.business_name);\r\n        formDataToSend.append('business_contact', formData.business_contact);\r\n        formDataToSend.append('business_address', formData.business_address);\r\n        formDataToSend.append('gst_no', formData.gst_no);\r\n        formDataToSend.append('cuisine', formData.cuisine);\r\n        formDataToSend.append('currency', formData.currency);\r\n        if (formData.business_logo) {\r\n            formDataToSend.append('business_logo', formData.business_logo);\r\n        }\r\n        formDataToSend.append('outlets', JSON.stringify(formData.outlets));\r\n        formDataToSend.append('business_users', JSON.stringify(formData.business_users));\r\n\r\n        formDataToSend.forEach((value, key) => {\r\n            console.log(`${key}:`, value);\r\n        });\r\n\r\n        try {\r\n            await dispatch(registerBusiness(formDataToSend));\r\n            setSuccess('Business registered successfully!');\r\n            setFormData({\r\n                business_name: '',\r\n                business_logo: null,\r\n                business_contact: '',\r\n                business_address: '',\r\n                gst_no: '',\r\n                cuisine: '',\r\n                currency: '',\r\n                business_users: [\r\n                    {\r\n                        first_name: '',\r\n                        last_name: '',\r\n                        email: '',\r\n                        phone_number: '',\r\n                        address: '',\r\n                    },\r\n                ],\r\n                outlets: [\r\n                    {\r\n                        outlet_name: '',\r\n                        outlet_type: '',\r\n                        is_primary_outlet: false,\r\n                        outlet_address: '',\r\n                        outlet_gst_no: '',\r\n                        language_id: '',\r\n                    },\r\n                ],\r\n            });\r\n            setLogoPreview(null);\r\n        } catch (err) {\r\n            setError('Error registering business, please try again.');\r\n        }\r\n\r\n        setFormSubmitted(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        // Clear form data\r\n        setFormData({\r\n            business_name: '',\r\n            business_logo: null,\r\n            business_contact: '',\r\n            business_address: '',\r\n            gst_no: '',\r\n            cuisine: '',\r\n            currency: '',\r\n            business_users: [\r\n                {\r\n                    first_name: '',\r\n                    last_name: '',\r\n                    email: '',\r\n                    phone_number: '',\r\n                    address: '',\r\n                },\r\n            ],\r\n            outlets: [\r\n                {\r\n                    outlet_name: '',\r\n                    outlet_type: '',\r\n                    is_primary_outlet: false,\r\n                    outlet_address: '',\r\n                    outlet_gst_no: '',\r\n                    language_id: '',\r\n                },\r\n            ],\r\n        });\r\n\r\n        // Clear preview and localStorage\r\n        setLogoPreview(null);\r\n        localStorage.removeItem('registerBusinessFormData');\r\n        setErrors({});\r\n        setError('');\r\n        setSuccess('');\r\n    };\r\n\r\n    const { steps, currentStepIndex, step, isFirstStep, isLastStep, back, next } = useMultistepForm([\r\n        <BusinessInfoForm\r\n            formData={formData}\r\n            errorMsg={errorMsg}\r\n            successMsg={successMsg}\r\n            handleChange={handleChange}\r\n            handleFileChange={handleFileChange}\r\n            handleSubmit={handleSubmit}\r\n            logoPreview={logoPreview}\r\n            errors={errors}\r\n        />,\r\n        <BusinessOutletsForm\r\n            formData={formData}\r\n            errorMsg={errorMsg}\r\n            successMsg={successMsg}\r\n            handleChange={handleChange}\r\n            // handleFileChange={handleFileChange}\r\n            handleSubmit={handleSubmit}\r\n            languages={languages} // Pass languages here\r\n            onOutletsChange={handleOutletChange}\r\n        />,\r\n        <BusinessUsersForm\r\n            formData={formData}\r\n            errorMsg={errorMsg}\r\n            successMsg={successMsg}\r\n            handleChange={handleChange}\r\n            handleFileChange={handleFileChange}\r\n            handleSubmit={handleSubmit}\r\n            onUsersChange={handleUserChange}\r\n            // errors={errors}\r\n        />,\r\n    ]);\r\n\r\n    return (\r\n        <Container className=\"register-business-container\">\r\n            <Card className=\"shadow-sm\">\r\n                <Card.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        {' '}\r\n                        {/* Single Form here */}\r\n                        <div>\r\n                            Step {currentStepIndex + 1} of {steps.length}\r\n                        </div>\r\n                        {step}\r\n                        <div className=\"d-flex justify-content-center mt-4 gap-3\">\r\n                            {!isFirstStep && (\r\n                                <Button variant=\"secondary\" type=\"button\" onClick={back} className=\"px-4 py-2\">\r\n                                    Back\r\n                                </Button>\r\n                            )}\r\n                            <Button variant=\"danger\" type=\"button\" onClick={handleCancel} className=\"px-4 py-2\">\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                onClick={(e) => {\r\n                                    if (!validateCurrentStep()) return; // Stop if validation fails\r\n                                    if (isLastStep) {\r\n                                        handleSubmit(e);\r\n                                    } else {\r\n                                        next();\r\n                                    }\r\n                                }}\r\n                                className=\"px-4 py-2\">\r\n                                {isLastStep ? 'Finish' : 'Next'}\r\n                            </Button>\r\n                        </div>\r\n                    </form>\r\n\r\n                    {errorMsg && (\r\n                        <Alert variant=\"danger\" className=\"mt-3\">\r\n                            {errorMsg}\r\n                        </Alert>\r\n                    )}\r\n                    {successMsg && (\r\n                        <Alert variant=\"success\" className=\"mt-3\">\r\n                            {successMsg}\r\n                        </Alert>\r\n                    )}\r\n                </Card.Body>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegisterBusiness;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nconst AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nconst AlertLink = createWithBsPrefix('alert-link', {\n  Component: Anchor\n});\nconst defaultProps = {\n  variant: 'primary',\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nconst Alert = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    bsPrefix,\n    show,\n    closeLabel,\n    closeVariant,\n    className,\n    children,\n    variant,\n    onClose,\n    dismissible,\n    transition,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  const handleClose = useEventCallback(e => {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  const Transition = transition === true ? Fade : transition;\n\n  const alert = /*#__PURE__*/_jsxs(\"div\", {\n    role: \"alert\",\n    ...(!Transition ? props : undefined),\n    ref: ref,\n    className: classNames(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),\n    children: [dismissible && /*#__PURE__*/_jsx(CloseButton, {\n      onClick: handleClose,\n      \"aria-label\": closeLabel,\n      variant: closeVariant\n    }), children]\n  });\n\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/_jsx(Transition, {\n    unmountOnExit: true,\n    ...props,\n    ref: undefined,\n    in: show,\n    children: alert\n  });\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nexport default Object.assign(Alert, {\n  Link: AlertLink,\n  Heading: AlertHeading\n});","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propTypes = {\n  'aria-label': PropTypes.string,\n  onClick: PropTypes.func,\n\n  /**\n   * Render different color variant for the button.\n   *\n   * Omitting this will render the default dark color.\n   */\n  variant: PropTypes.oneOf(['white'])\n};\nconst defaultProps = {\n  'aria-label': 'Close'\n};\nconst CloseButton = /*#__PURE__*/React.forwardRef(({\n  className,\n  variant,\n  ...props\n}, ref) => /*#__PURE__*/_jsx(\"button\", {\n  ref: ref,\n  type: \"button\",\n  className: classNames('btn-close', variant && `btn-close-${variant}`, className),\n  ...props\n}));\nCloseButton.displayName = 'CloseButton';\nCloseButton.propTypes = propTypes;\nCloseButton.defaultProps = defaultProps;\nexport default CloseButton;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useCallback } from 'react';\nimport { ENTERED, ENTERING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport triggerBrowserReflow from './triggerBrowserReflow';\nimport TransitionWrapper from './TransitionWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  timeout: 300,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst fadeStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst Fade = /*#__PURE__*/React.forwardRef(({\n  className,\n  children,\n  transitionClasses = {},\n  ...props\n}, ref) => {\n  const handleEnter = useCallback((node, isAppearing) => {\n    triggerBrowserReflow(node);\n    props.onEnter == null ? void 0 : props.onEnter(node, isAppearing);\n  }, [props]);\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    onEnter: handleEnter,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames('fade', className, children.props.className, fadeStyles[status], transitionClasses[status])\n    })\n  });\n});\nFade.defaultProps = defaultProps;\nFade.displayName = 'Fade';\nexport default Fade;"],"names":["useMultistepForm","steps","useState","currentStepIndex","setCurrentStepIndex","step","isFirstStep","isLastStep","length","goTo","index","next","i","back","formData","errorMsg","successMsg","handleChange","handleFileChange","handleSubmit","logoPreview","errors","Container","className","Card","as","Form","onSubmit","Row","Col","md","src","alt","style","maxWidth","maxHeight","type","name","onChange","accept","required","business_logo","value","business_name","placeholder","business_contact","e","target","updatedValue","replace","slice","business_address","gst_no","cuisine","currency","Alert","variant","onOutletsChange","dispatch","useDispatch","useSelector","state","language","languages","loading","error","outletTypes","outlets","setOutlets","validationErrors","setValidationErrors","useEffect","languageList","addOutlet","updatedOutlets","outlet_name","outlet_type","is_primary_outlet","outlet_address","outlet_gst_no","language_id","validateOutlet","outlet","handleInputChange","checked","preventDefault","map","hasErrors","some","Object","keys","controlId","idx","id","disabled","Button","onClick","filter","_","alert","removeOutlet","borderRadius","onUsersChange","addUser","updatedUsers","business_users","first_name","last_name","email","phone_number","address","numericValue","user","removeUser","business","success","setFormData","setLogoPreview","setError","setSuccess","formSubmitted","setFormSubmitted","setErrors","savedFormData","localStorage","getItem","JSON","parse","setItem","stringify","prevData","file","files","startsWith","previewUrl","URL","createObjectURL","revokeObjectURL","console","log","formDataToSend","FormData","append","forEach","key","registerBusiness","removeItem","newErrors","trim","validateCurrentStep","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","Anchor","defaultProps","show","transition","Fade","closeLabel","React","uncontrolledProps","ref","useUncontrolled","bsPrefix","closeVariant","children","onClose","dismissible","props","prefix","useBootstrapPrefix","handleClose","useEventCallback","Transition","_jsxs","role","undefined","classNames","_jsx","CloseButton","unmountOnExit","in","assign","Link","Heading","size","active","useButtonProps","tagName","buttonProps","href","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","DivStyledAsH6","CardBody","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Img","Title","Subtitle","Body","Text","Header","Footer","ImgOverlay","context","propTypes","PropTypes","fadeStyles","ENTERING","ENTERED","transitionClasses","handleEnter","useCallback","node","isAppearing","triggerBrowserReflow","onEnter","TransitionWrapper","addEndListener","transitionEndListener","childRef","status","innerProps","timeout","mountOnEnter","appear"],"sourceRoot":""}